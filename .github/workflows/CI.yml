#
# Copyright (c) 2019 Broadcom.
# The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
#
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#
# Contributors:
#   Broadcom, Inc. - initial API and implementation
#

name: CI

on:
  push:
    branches:
      - master
      - development
      - release**
  pull_request:
    branches:
      - master
      - development

jobs:
  win-server:
    name: Windows language server
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v1
      - name: Configure
        shell: cmd
        run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release ../
      - name: Build
        shell: cmd
        run: cd build && cmake --build . --parallel --config Release
      - name: Server Test
        shell: cmd
        run: cd build\bin && library_test.exe && server_test.exe
      - name: Extension Test
        shell: cmd
        run: npm --prefix .\clients\vscode-hlasmplugin run test
      - name: Extension Test Insiders
        shell: cmd
        run: npm --prefix .\clients\vscode-hlasmplugin run test:insiders
      - name: Actions artifact
        uses: actions/upload-artifact@v1
        with:
          name: language_server_win
          path: build/bin/language_server.exe

  linux-server:
    name: Linux language server
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v1
      - name: Requirements install
        run: sudo apt-get update && sudo apt-get install uuid-dev g++-8 ninja-build
      - name: Configure
        run: mkdir build && cd build && cmake -G Ninja -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8 ../
      - name: Build
        run: cd build && cmake --build .
      - name: Server Test
        run: cd build/bin && ./server_test && ./library_test
      - name: Extension Test
        uses: GabrielBB/xvfb-action@v1.0
        with:
          run: npm --prefix clients/vscode-hlasmplugin run test
      - name: Extension Test Insiders
        uses: GabrielBB/xvfb-action@v1.0
        with:
          run: npm --prefix clients/vscode-hlasmplugin run test:insiders
      - name: Actions artifact
        uses: actions/upload-artifact@v1
        with:
          name: language_server_linux
          path: build/bin/language_server

  macos-server:
    name: MacOS language server
    runs-on: macos-10.15

    steps:
      - uses: actions/checkout@v1
      - name: Requirements install
        run: |
          brew install ninja llvm@8
          export PATH=~/usr/local/opt/llvm\@8/bin:$PATH
      - name: Configure
        run: mkdir build && cd build && cmake -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_PATH=/usr/local/opt/llvm\@8 ../
      - name: Build
        run: cd build && cmake --build . -- -v
      - name: Server Test
        run: cd build/bin && ./server_test && ./library_test
      - name: Extension Test
        run: npm --prefix clients/vscode-hlasmplugin run test
#      Remove the insiders test until it is clear where is the problem with freezing of the test
#      - name: Extension Test Insiders
#        run: npm --prefix clients/vscode-hlasmplugin run test:insiders
      - name: Actions artifact
        uses: actions/upload-artifact@v1
        with:
          name: language_server_macos
          path: build/bin/language_server

  VSIX:
    runs-on: ubuntu-18.04
    needs: [win-server, linux-server, macos-server]

    steps:
      - uses: actions/checkout@v1
      - name: Download windows language server
        uses: actions/download-artifact@v1
        with:
          name: language_server_win
          path: clients/vscode-hlasmplugin/bin/win32/
      - name: Download linux language server
        uses: actions/download-artifact@v1
        with:
          name: language_server_linux
          path: clients/vscode-hlasmplugin/bin/linux/
      - name: Download MacOS language server
        uses: actions/download-artifact@v1
        with:
          name: language_server_macos
          path: clients/vscode-hlasmplugin/bin/darwin/
      - name: Set executable flag
        run: |
          chmod +x clients/vscode-hlasmplugin/bin/darwin/language_server
          chmod +x clients/vscode-hlasmplugin/bin/linux/language_server
      - name: Extract branch name
        run: echo BRANCH=${GITHUB_REF#refs/heads/} >> $GITHUB_ENV
      - name: Update version
        if: env.BRANCH == 'master' || startsWith(env.BRANCH, 'release')
        run: cd clients/vscode-hlasmplugin && npm ci && npx semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Package VSIX
        run: cd clients/vscode-hlasmplugin/ && npm ci && npm run package
      - name: Get VSIX filename
        run: echo VSIX_FILENAME=$(ls clients/vscode-hlasmplugin/*.vsix) >> $GITHUB_ENV
      - name: Get version
        run: echo VERSION=$(node -e "console.log(require('./clients/vscode-hlasmplugin/package.json').version)") >> $GITHUB_ENV
      - name: Upload VSIX
        uses: actions/upload-artifact@v1
        with:
          name: hlasm-language-support-${{ env.VERSION }}.vsix
          path: ${{ env.VSIX_FILENAME }}

  alpine-VSIX:
    name: Alpine VSIX
    runs-on: ubuntu-18.04
    container:
      image: alpine:3.10

    steps:
      - uses: actions/checkout@v1
      - name: Requirements install
        run: |
          apk update
          apk add --no-cache linux-headers git g++ cmake util-linux-dev npm ninja pkgconfig openjdk8 maven
      - name: Extract branch name
        run: echo BRANCH=${GITHUB_REF#refs/heads/} >> $GITHUB_ENV
      - name: Update version
        if: env.BRANCH == 'master' || startsWith(env.BRANCH, 'release')
        run: cd clients/vscode-hlasmplugin && npm ci && npx semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure
        run: mkdir build && cd build && cmake -G Ninja ../
      - name: Build
        run: cd build && cmake --build .
      - name: Server Test
        run: cd build/bin && ./server_test && ./library_test
      - name: Get VSIX filename
        run: echo VSIX_FILENAME=$(ls build/bin/*.vsix) >> $GITHUB_ENV
      - name: Get version
        run: echo VERSION=$(node -e "console.log(require('./clients/vscode-hlasmplugin/package.json').version)") >> $GITHUB_ENV
      - name: Rename VSIX
        run: mv ${{ env.VSIX_FILENAME }} hlasm-language-support-${{ env.VERSION }}-alpine.vsix
      - name: Upload VSIX
        uses: actions/upload-artifact@v1
        with:
          name: hlasm-language-support-${{ env.VERSION }}-alpine.vsix
          path: hlasm-language-support-${{ env.VERSION }}-alpine.vsix

  release:
    name: Release VSIXs
    runs-on: ubuntu-18.04
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release'))
    needs: [alpine-VSIX, VSIX]

    steps:
      - uses: actions/checkout@v1
      - name: Update version
        run: cd clients/vscode-hlasmplugin && npm ci && npx semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get new version
        run: echo VERSION=$(node -e "console.log(require('./clients/vscode-hlasmplugin/package.json').version)") >> $GITHUB_ENV
      - name: Download VSIX
        uses: actions/download-artifact@v1
        with:
          name: hlasm-language-support-${{ env.VERSION }}.vsix
          path: clients/vscode-hlasmplugin/
      - name: Download alpine VSIX
        uses: actions/download-artifact@v1
        with:
          name: hlasm-language-support-${{ env.VERSION }}-alpine.vsix
          path: clients/vscode-hlasmplugin/
      - name: Rename VSIXs
        run: |
          cd clients/vscode-hlasmplugin/
          mv hlasm-language-support-${{ env.VERSION }}.vsix         multi.vsix
          mv hlasm-language-support-${{ env.VERSION }}-alpine.vsix  alpine.vsix

      - name: Commit changes
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions"
          git add CHANGELOG.md clients/vscode-hlasmplugin/package.json clients/vscode-hlasmplugin/CHANGELOG.md
          git commit -m "chore: Update version & changelog [skip ci]"
      - name: Push changes
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Release new version
        run: cd clients/vscode-hlasmplugin && npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Merge master into development
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          git stash
          git fetch
          git checkout origin/development
          git merge origin/master

          cd clients/vscode-hlasmplugin
          sed -i 's/"version": "\(.*\)"/"version": "\1-NEXT"/g' package.json
          sed -i '2s/^/\n## ****Unreleased****\n/' CHANGELOG.md
          git add package.json CHANGELOG.md
          git commit -m "chore: Prepare for next development cycle [skip ci]"
      - name: Push changes
        if: github.event_name == 'push'
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: development

      - name: Delete PRs head branches
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branches: release-${{ env.VERSION }}

  theia-test:
    name: Theia Integration Test
    runs-on: ubuntu-18.04
    needs: alpine-VSIX
    strategy:
      matrix:
        theia: ["theiaide/theia", "theiaide/theia:next"]
    container:
      image: ${{ matrix.theia }}
      options: --user root

    steps:
      - uses: actions/checkout@v1
      - name: Install Chromium
        run: apk add --no-cache chromium
      - name: Extract branch name
        run: echo BRANCH=${GITHUB_REF#refs/heads/} >> $GITHUB_ENV
      - name: Update version
        if: env.BRANCH == 'master' || startsWith(env.BRANCH, 'release')
        run: cd clients/vscode-hlasmplugin && npm ci && npx semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get version
        run: echo VERSION=$(node -e "console.log(require('./clients/vscode-hlasmplugin/package.json').version)") >> $GITHUB_ENV
      - name: Download VSIX
        uses: actions/download-artifact@v2
        with:
          name: hlasm-language-support-${{ env.VERSION }}-alpine.vsix
          path: clients/vscode-hlasmplugin/plugin/
      - name: npm install
        run: cd clients/vscode-hlasmplugin && npm install
      - name: Run Theia Tests
        run: cd clients/vscode-hlasmplugin && npm run test:theia /home/theia/
