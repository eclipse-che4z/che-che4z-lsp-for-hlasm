/*
 * Copyright (c) 2023 Broadcom.
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   Broadcom, Inc. - initial API and implementation
 */

// clang-format off

DEFINE_MACH_FORMAT(E, length_16)
DEFINE_MACH_FORMAT(I)
DEFINE_MACH_FORMAT(RR)
DEFINE_MACH_FORMAT(IE, length_32)
DEFINE_MACH_FORMAT(RRD)
DEFINE_MACH_FORMAT(RRE)
DEFINE_MACH_FORMAT(RRF_a)
DEFINE_MACH_FORMAT(RRF_b)
DEFINE_MACH_FORMAT(RRF_c)
DEFINE_MACH_FORMAT(RRF_d)
DEFINE_MACH_FORMAT(RRF_e)
DEFINE_MACH_FORMAT(RI_a)
DEFINE_MACH_FORMAT(RI_b)
DEFINE_MACH_FORMAT(RI_c)
DEFINE_MACH_FORMAT(RS_a)
DEFINE_MACH_FORMAT(RS_b)
DEFINE_MACH_FORMAT(RSI)
DEFINE_MACH_FORMAT(RX_a)
DEFINE_MACH_FORMAT(RX_b)
DEFINE_MACH_FORMAT(S)
DEFINE_MACH_FORMAT(SI)
DEFINE_MACH_FORMAT(DIAGNOSE)
DEFINE_MACH_FORMAT(MII, length_48)
DEFINE_MACH_FORMAT(RIE_a)
DEFINE_MACH_FORMAT(RIE_b)
DEFINE_MACH_FORMAT(RIE_c)
DEFINE_MACH_FORMAT(RIE_d)
DEFINE_MACH_FORMAT(RIE_e)
DEFINE_MACH_FORMAT(RIE_f)
DEFINE_MACH_FORMAT(RIE_g)
DEFINE_MACH_FORMAT(RIL_a)
DEFINE_MACH_FORMAT(RIL_b)
DEFINE_MACH_FORMAT(RIL_c)
DEFINE_MACH_FORMAT(RIS)
DEFINE_MACH_FORMAT(RRS)
DEFINE_MACH_FORMAT(RSL_a)
DEFINE_MACH_FORMAT(RSL_b)
DEFINE_MACH_FORMAT(RSY_a)
DEFINE_MACH_FORMAT(RSY_b)
DEFINE_MACH_FORMAT(RXE)
DEFINE_MACH_FORMAT(RXF)
DEFINE_MACH_FORMAT(RXY_a)
DEFINE_MACH_FORMAT(RXY_b)
DEFINE_MACH_FORMAT(RXY_c)
DEFINE_MACH_FORMAT(SIL)
DEFINE_MACH_FORMAT(SIY)
DEFINE_MACH_FORMAT(SMI)
DEFINE_MACH_FORMAT(SS_a)
DEFINE_MACH_FORMAT(SS_b)
DEFINE_MACH_FORMAT(SS_c)
DEFINE_MACH_FORMAT(SS_d)
DEFINE_MACH_FORMAT(SS_e)
DEFINE_MACH_FORMAT(SS_f)
DEFINE_MACH_FORMAT(SSE)
DEFINE_MACH_FORMAT(SSF)
DEFINE_MACH_FORMAT(VRI_a)
DEFINE_MACH_FORMAT(VRI_b)
DEFINE_MACH_FORMAT(VRI_c)
DEFINE_MACH_FORMAT(VRI_d)
DEFINE_MACH_FORMAT(VRI_e)
DEFINE_MACH_FORMAT(VRI_f)
DEFINE_MACH_FORMAT(VRI_g)
DEFINE_MACH_FORMAT(VRI_h)
DEFINE_MACH_FORMAT(VRI_i)
DEFINE_MACH_FORMAT(VRI_j)
DEFINE_MACH_FORMAT(VRI_k)
DEFINE_MACH_FORMAT(VRI_l)
DEFINE_MACH_FORMAT(VRR_a)
DEFINE_MACH_FORMAT(VRR_b)
DEFINE_MACH_FORMAT(VRR_c)
DEFINE_MACH_FORMAT(VRR_d)
DEFINE_MACH_FORMAT(VRR_e)
DEFINE_MACH_FORMAT(VRR_f)
DEFINE_MACH_FORMAT(VRR_g)
DEFINE_MACH_FORMAT(VRR_h)
DEFINE_MACH_FORMAT(VRR_i)
DEFINE_MACH_FORMAT(VRR_j)
DEFINE_MACH_FORMAT(VRR_k)
DEFINE_MACH_FORMAT(VRS_a)
DEFINE_MACH_FORMAT(VRS_b)
DEFINE_MACH_FORMAT(VRS_c)
DEFINE_MACH_FORMAT(VRS_d)
DEFINE_MACH_FORMAT(VRV)
DEFINE_MACH_FORMAT(VRX)
DEFINE_MACH_FORMAT(VSI)

DEFINE_INSTRUCTION_FORMAT(E_0, mach_format::E)
DEFINE_INSTRUCTION_FORMAT(I_1, mach_format::I, imm_8_U)
DEFINE_INSTRUCTION_FORMAT(IE_2, mach_format::IE, imm_4_U, imm_4_U)
DEFINE_INSTRUCTION_FORMAT(MII_3, mach_format::MII, mask_4_U, rel_addr_imm_12_S, rel_addr_imm_24_S)
DEFINE_INSTRUCTION_FORMAT(RI_a_2_s, mach_format::RI_a, reg_4_U, imm_16_S)
DEFINE_INSTRUCTION_FORMAT(RI_a_2_u, mach_format::RI_a, reg_4_U, imm_16_U)
DEFINE_INSTRUCTION_FORMAT(RI_b_2, mach_format::RI_b, reg_4_U, rel_addr_imm_16_S)
DEFINE_INSTRUCTION_FORMAT(RI_c_2, mach_format::RI_c, mask_4_U, rel_addr_imm_16_S)
DEFINE_INSTRUCTION_FORMAT(RIE_a_3, mach_format::RIE_a, reg_4_U, imm_16_S, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(RIE_b_4, mach_format::RIE_b, reg_4_U, reg_4_U, mask_4_U, rel_addr_imm_16_S)
DEFINE_INSTRUCTION_FORMAT(RIE_c_4, mach_format::RIE_c, reg_4_U, imm_8_S, mask_4_U, rel_addr_imm_16_S)
DEFINE_INSTRUCTION_FORMAT(RIE_d_3, mach_format::RIE_d, reg_4_U, reg_4_U, imm_16_S)
DEFINE_INSTRUCTION_FORMAT(RIE_e_3, mach_format::RIE_e, reg_4_U, reg_4_U, rel_addr_imm_16_S)
DEFINE_INSTRUCTION_FORMAT(RIE_f_5, mach_format::RIE_f, reg_4_U, reg_4_U, imm_8_U, imm_8_U, imm_8_U_opt)
DEFINE_INSTRUCTION_FORMAT(RIE_g_3, mach_format::RIE_g, reg_4_U, imm_16_S, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(RIL_a_2, mach_format::RIL_a, reg_4_U, imm_32_S)
DEFINE_INSTRUCTION_FORMAT(RIL_b_2, mach_format::RIL_b, reg_4_U, rel_addr_imm_32_S)
DEFINE_INSTRUCTION_FORMAT(RIL_c_2, mach_format::RIL_c, mask_4_U, rel_addr_imm_32_S)
DEFINE_INSTRUCTION_FORMAT(RIS_4, mach_format::RIS, reg_4_U, imm_8_S, mask_4_U, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(RR_1, mach_format::RR, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(RR_2_m, mach_format::RR, mask_4_U, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(RR_2, mach_format::RR, reg_4_U, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(RR_2_e, mach_format::RR, reg_4_U_even, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(RR_2_ee, mach_format::RR, reg_4_U_even, reg_4_U_even)
DEFINE_INSTRUCTION_FORMAT(RRD_3, mach_format::RRD, reg_4_U, reg_4_U, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(RRE_0, mach_format::RRE)
DEFINE_INSTRUCTION_FORMAT(RRE_1, mach_format::RRE, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(RRE_1_e, mach_format::RRE, reg_4_U_even)
DEFINE_INSTRUCTION_FORMAT(RRE_2, mach_format::RRE, reg_4_U, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(RRE_2_e, mach_format::RRE, reg_4_U_even, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(RRE_2_ne, mach_format::RRE, reg_4_U, reg_4_U_even)
DEFINE_INSTRUCTION_FORMAT(RRE_2_ne_01, mach_format::RRE, reg_4_U, reg_4_U_even_nz)
DEFINE_INSTRUCTION_FORMAT(RRE_2_ee, mach_format::RRE, reg_4_U_even, reg_4_U_even)
DEFINE_INSTRUCTION_FORMAT(RRE_2_ee_11, mach_format::RRE, reg_4_U_even_nz, reg_4_U_even_nz)
DEFINE_INSTRUCTION_FORMAT(RRE_3_ne_01, mach_format::RRE, reg_4_U, reg_4_U_even_nz, mask_4_U_opt)
DEFINE_INSTRUCTION_FORMAT(RRF_a_3, mach_format::RRF_a, reg_4_U, reg_4_U, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(RRF_a_3_e, mach_format::RRF_a, reg_4_U_even, reg_4_U, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(RRF_a_3_ee_112, mach_format::RRF_a, reg_4_U_even_nz, reg_4_U_even_nz, reg_4_U_2)
DEFINE_INSTRUCTION_FORMAT(RRF_a_4, mach_format::RRF_a, reg_4_U, reg_4_U, reg_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(RRF_a_4_opt, mach_format::RRF_a, reg_4_U, reg_4_U, reg_4_U_opt, mask_4_U_opt)
DEFINE_INSTRUCTION_FORMAT(RRF_b_3, mach_format::RRF_b, reg_4_U, reg_4_U, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(RRF_b_3_eee_111, mach_format::RRF_b, reg_4_U_even_nz, reg_4_U_even_nz, reg_4_U_even_nz)
DEFINE_INSTRUCTION_FORMAT(RRF_b_4, mach_format::RRF_b, reg_4_U, reg_4_U, reg_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(RRF_b_4_opt, mach_format::RRF_b, reg_4_U, reg_4_U, reg_4_U, mask_4_U_opt)
DEFINE_INSTRUCTION_FORMAT(RRF_b_4_opt_ene, mach_format::RRF_b, reg_4_U_even, reg_4_U, reg_4_U_even, mask_4_U_opt)
DEFINE_INSTRUCTION_FORMAT(RRF_c_3, mach_format::RRF_c, reg_4_U, reg_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(RRF_c_3_opt, mach_format::RRF_c, reg_4_U, reg_4_U, mask_4_U_opt)
DEFINE_INSTRUCTION_FORMAT(RRF_c_3_opt_e, mach_format::RRF_c, reg_4_U_even, reg_4_U, mask_4_U_opt)
DEFINE_INSTRUCTION_FORMAT(RRF_c_3_opt_ee, mach_format::RRF_c, reg_4_U_even, reg_4_U_even, mask_4_U_opt)
DEFINE_INSTRUCTION_FORMAT(RRF_d_3, mach_format::RRF_d, reg_4_U, reg_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(RRF_d_3_e, mach_format::RRF_d, reg_4_U_even, reg_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(RRF_e_3, mach_format::RRF_e, reg_4_U, mask_4_U, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(RRF_e_4, mach_format::RRF_e, reg_4_U, mask_4_U, reg_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(RRS_4, mach_format::RRS, reg_4_U, reg_4_U, mask_4_U, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(RS_a_2, mach_format::RS_a, reg_4_U, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(RS_a_2_e, mach_format::RS_a, reg_4_U_even, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(RS_a_3, mach_format::RS_a, reg_4_U, reg_4_U, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(RS_a_3_ee, mach_format::RS_a, reg_4_U_even, reg_4_U_even, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(RS_b_3, mach_format::RS_b, reg_4_U, mask_4_U, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(RSI_3, mach_format::RSI, reg_4_U, reg_4_U, rel_addr_imm_16_S)
DEFINE_INSTRUCTION_FORMAT(RSL_a_1, mach_format::RSL_a, db_12_4x4L_U)
DEFINE_INSTRUCTION_FORMAT(RSL_b_3, mach_format::RSL_b, reg_4_U, db_12_8x4L_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(RSY_a_3, mach_format::RSY_a, reg_4_U, reg_4_U, db_20_4_S)
DEFINE_INSTRUCTION_FORMAT(RSY_a_3_ee, mach_format::RSY_a, reg_4_U_even, reg_4_U_even, db_20_4_S)
DEFINE_INSTRUCTION_FORMAT(RSY_b_3_su, mach_format::RSY_b, reg_4_U, db_20_4_S, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(RSY_b_3_us, mach_format::RSY_b, reg_4_U, mask_4_U, db_20_4_S)
DEFINE_INSTRUCTION_FORMAT(RSY_b_3_ux, mach_format::RSY_b, reg_4_U, mask_4_U, dxb_20_4x4_S)
DEFINE_INSTRUCTION_FORMAT(RX_a_2_ux, mach_format::RX_a, reg_4_U, dxb_12_4x4_U)
DEFINE_INSTRUCTION_FORMAT(RX_a_2_ux_e, mach_format::RX_a, reg_4_U_even, dxb_12_4x4_U)
DEFINE_INSTRUCTION_FORMAT(RX_b_2, mach_format::RX_b, mask_4_U, dxb_12_4x4_U)
DEFINE_INSTRUCTION_FORMAT(RXE_2, mach_format::RXE, reg_4_U, dxb_12_4x4_U)
DEFINE_INSTRUCTION_FORMAT(RXE_3_xm, mach_format::RXE, reg_4_U, dxb_12_4x4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(RXF_3_x, mach_format::RXF, reg_4_U, reg_4_U, dxb_12_4x4_U)
DEFINE_INSTRUCTION_FORMAT(RXY_a_2, mach_format::RXY_a, reg_4_U, dxb_20_4x4_S)
DEFINE_INSTRUCTION_FORMAT(RXY_a_2_e, mach_format::RXY_a, reg_4_U_even, dxb_20_4x4_S)
DEFINE_INSTRUCTION_FORMAT(RXY_b_2, mach_format::RXY_b, mask_4_U, dxb_20_4x4_S)
DEFINE_INSTRUCTION_FORMAT(RXY_c_2, mach_format::RXY_c, mask_4_U, dxxb_20_4x4_S)
DEFINE_INSTRUCTION_FORMAT(S_0, mach_format::S)
DEFINE_INSTRUCTION_FORMAT(S_1_u, mach_format::S, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(S_1_s, mach_format::S, db_20_4_S)
DEFINE_INSTRUCTION_FORMAT(SI_1, mach_format::SI, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(SI_2_s, mach_format::SI, db_12_4_U, imm_8_S)
DEFINE_INSTRUCTION_FORMAT(SI_2_u, mach_format::SI, db_12_4_U, imm_8_U)
//DEFINE_INSTRUCTION_FORMAT(DIAGNOSE, mach_format::DIAGNOSE) // undocumented class of instructions
DEFINE_INSTRUCTION_FORMAT(SIL_2_s, mach_format::SIL, db_12_4_U, imm_16_S)
DEFINE_INSTRUCTION_FORMAT(SIL_2_u, mach_format::SIL, db_12_4_U, imm_16_U)
DEFINE_INSTRUCTION_FORMAT(SIY_2_ss, mach_format::SIY, db_20_4_S, imm_8_S)
DEFINE_INSTRUCTION_FORMAT(SIY_2_su, mach_format::SIY, db_20_4_S, imm_8_U)
DEFINE_INSTRUCTION_FORMAT(SMI_3, mach_format::SMI, mask_4_U, rel_addr_imm_16_S, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(SS_a_2_u, mach_format::SS_a, db_12_8x4L_U, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(SS_a_2_s, mach_format::SS_a, db_12_8x4L_U, db_20_4_S)
DEFINE_INSTRUCTION_FORMAT(SS_b_2, mach_format::SS_b, db_12_4x4L_U, db_12_4x4L_U)
DEFINE_INSTRUCTION_FORMAT(SS_c_3, mach_format::SS_c, db_12_4x4L_U, db_12_4_U, imm_4_U)
DEFINE_INSTRUCTION_FORMAT(SS_d_3, mach_format::SS_d, drb_12_4x4_U, db_12_4_U, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(SS_e_4_br, mach_format::SS_e, reg_4_U, db_12_4_U, reg_4_U, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(SS_e_4_rb, mach_format::SS_e, reg_4_U, reg_4_U, db_12_4_U, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(SS_f_2, mach_format::SS_f, db_12_4_U, db_12_8x4L_U)
DEFINE_INSTRUCTION_FORMAT(SSE_2, mach_format::SSE, db_12_4_U, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(SSF_3_dr, mach_format::SSF, db_12_4_U, db_12_4_U, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(SSF_3_rd, mach_format::SSF, reg_4_U, db_12_4_U, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(SSF_3_rd_e, mach_format::SSF, reg_4_U_even, db_12_4_U, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(VRI_a_2, mach_format::VRI_a, vec_reg_5_U, imm_16_U)
DEFINE_INSTRUCTION_FORMAT(VRI_a_3, mach_format::VRI_a, vec_reg_5_U, imm_16_S, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRI_b_4, mach_format::VRI_b, vec_reg_5_U, imm_8_U, imm_8_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRI_c_4, mach_format::VRI_c, vec_reg_5_U, vec_reg_5_U, imm_16_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRI_d_4, mach_format::VRI_d, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, imm_8_U)
DEFINE_INSTRUCTION_FORMAT(VRI_d_5, mach_format::VRI_d, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, imm_8_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRI_e_5, mach_format::VRI_e, vec_reg_5_U, vec_reg_5_U, imm_12_U, mask_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRI_f_5, mach_format::VRI_f, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, imm_8_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRI_g_5_s, mach_format::VRI_g, vec_reg_5_U, vec_reg_5_U, imm_8_U, imm_8_S, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRI_g_5_u, mach_format::VRI_g, vec_reg_5_U, vec_reg_5_U, imm_8_U, imm_8_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRI_h_3, mach_format::VRI_h, vec_reg_5_U, imm_16_S, imm_4_U)
DEFINE_INSTRUCTION_FORMAT(VRI_i_4, mach_format::VRI_i, vec_reg_5_U, reg_4_U, imm_8_S, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRI_j_4, mach_format::VRI_j, vec_reg_5_U, vec_reg_5_U, imm_8_S, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRI_k_5, mach_format::VRI_k, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, imm_8_U)
DEFINE_INSTRUCTION_FORMAT(VRI_l_3, mach_format::VRI_l, vec_reg_5_U, vec_reg_5_U, imm_8_U)
DEFINE_INSTRUCTION_FORMAT(VRR_a_2, mach_format::VRR_a, vec_reg_5_U, vec_reg_5_U)
DEFINE_INSTRUCTION_FORMAT(VRR_a_3, mach_format::VRR_a, vec_reg_5_U, vec_reg_5_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRR_a_4, mach_format::VRR_a, vec_reg_5_U, vec_reg_5_U, mask_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRR_a_4_opt, mach_format::VRR_a, vec_reg_5_U, vec_reg_5_U, mask_4_U, mask_4_U_opt)
DEFINE_INSTRUCTION_FORMAT(VRR_a_5, mach_format::VRR_a, vec_reg_5_U, vec_reg_5_U, mask_4_U, mask_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRR_b_3, mach_format::VRR_b, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U)
DEFINE_INSTRUCTION_FORMAT(VRR_b_5, mach_format::VRR_b, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, mask_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRR_b_5_opt, mach_format::VRR_b, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, mask_4_U, mask_4_U_opt)
DEFINE_INSTRUCTION_FORMAT(VRR_c_3, mach_format::VRR_c, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U)
DEFINE_INSTRUCTION_FORMAT(VRR_c_4, mach_format::VRR_c, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRR_c_5, mach_format::VRR_c, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, mask_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRR_c_6, mach_format::VRR_c, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, mask_4_U, mask_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRR_d_5, mach_format::VRR_d, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRR_d_6, mach_format::VRR_d, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, mask_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRR_d_6_opt, mach_format::VRR_d, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, mask_4_U, mask_4_U_opt)
DEFINE_INSTRUCTION_FORMAT(VRR_e_4, mach_format::VRR_e, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U)
DEFINE_INSTRUCTION_FORMAT(VRR_e_6, mach_format::VRR_e, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, mask_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRR_f_3, mach_format::VRR_f, vec_reg_5_U, reg_4_U, reg_4_U)
DEFINE_INSTRUCTION_FORMAT(VRR_g_1, mach_format::VRR_g, vec_reg_5_U)
DEFINE_INSTRUCTION_FORMAT(VRR_g_2_opt, mach_format::VRR_g, vec_reg_5_U, imm_16_U_opt)
DEFINE_INSTRUCTION_FORMAT(VRR_h_3, mach_format::VRR_h, vec_reg_5_U, vec_reg_5_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRR_i_3, mach_format::VRR_i, reg_4_U, vec_reg_5_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRR_j_4, mach_format::VRR_j, vec_reg_5_U, vec_reg_5_U, vec_reg_5_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRR_k_3, mach_format::VRR_k,  vec_reg_5_U, vec_reg_5_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRS_a_4, mach_format::VRS_a, vec_reg_5_U, vec_reg_5_U, db_12_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRS_a_4_opt, mach_format::VRS_a, vec_reg_5_U, vec_reg_5_U, db_12_4_U, mask_4_U_opt)
DEFINE_INSTRUCTION_FORMAT(VRS_b_3, mach_format::VRS_b, vec_reg_5_U, reg_4_U, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(VRS_b_4, mach_format::VRS_b, vec_reg_5_U, reg_4_U, db_12_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRS_c_4, mach_format::VRS_c, reg_4_U, vec_reg_5_U, db_12_4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRS_d_3, mach_format::VRS_d, vec_reg_5_U, reg_4_U, db_12_4_U)
DEFINE_INSTRUCTION_FORMAT(VRV_3, mach_format::VRV, vec_reg_5_U, dvb_12_5x4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRX_3, mach_format::VRX, vec_reg_5_U, dxb_12_4x4_U, mask_4_U)
DEFINE_INSTRUCTION_FORMAT(VRX_3_opt, mach_format::VRX, vec_reg_5_U, dxb_12_4x4_U, mask_4_U_opt)
DEFINE_INSTRUCTION_FORMAT(VSI_3, mach_format::VSI, vec_reg_5_U, db_12_4_U, imm_8_U)

DEFINE_CC_SET(no_cc, "The code remains unchanged")
DEFINE_CC_SET(arithmetic, "Result zero; no overflow", "Result less than zero; no overflow", "Result greater than zero; no overflow", "Overflow")
DEFINE_CC_SET(arithmetic_no_overflow, "Result zero", "Result less than zero", "Result greater than zero", "")
DEFINE_CC_SET(arithmetic_logical, "Result zero; no carry", "Result not zero; no carry", "Result zero; carry", "Result not zero; carry")
DEFINE_CC_SET(logical, "Result zero", "Result not zero", "", "")
DEFINE_CC_SET(comparison, "Operands equal", "First operand low", "First operand high", "")
DEFINE_CC_SET(comparison_interruptible, "Operands equal", "First operand low", "First operand high", "CPU-determined number of bytes compared without finding an inequality")
DEFINE_CC_SET(second_interruptible, "Entire second operand processed", "", "", "CPU-determined number of the second operands processed")
DEFINE_CC_SET(cipher_interruptible, "Normal completion", "", "", "Partial completion")
DEFINE_CC_SET(cipher, "Normal completion", "Verification-pattern mismatch", "", "Partial completion")
DEFINE_CC_SET(cipher_with_incomplete, "Normal completion", "Verification-pattern mismatch", "Incomplete processing", "Partial completion")
DEFINE_CC_SET(cfc_special, "Operands equal", "Operand 1 (or 3) is low", "Operand 1 (or 3) is high", "")
DEFINE_CC_SET(cal, "First and third operands are equal",  "First and third operands are not equal", "", "")
DEFINE_CC_SET(cas, "First and second operands match, the third operand replaced by the second", "First and second operands do not match, the first operand replaced by the second", "", "")
DEFINE_CC_SET(cass, "First and third operands match, the first operand replaced by the replacement value and the second operads replaced by the store value", "First and third operands do not match, third operand replaced by the first", "", "")
DEFINE_CC_SET(clst_special, "Operands equal; operands unchanged", "First operand low; operands updated", "First operand high; operands updated", "CPU-determined number of bytes compared without finding an inequality; operands updated")
DEFINE_CC_SET(cuse_special, "Substring found", "End of long operand reached, last bytes compared equal", "End of long operand reached, last bytes compared not equal", "CPU-determined number of bytes compared, last bytes compared not equal")
DEFINE_CC_SET(cmpsc_special, "End of second operand reached", "End of first operand only reached", "", "CPU-determined number of data processed")
DEFINE_CC_SET(unicode_convert_8, "Entire second operand processed", "End of first operand reached", "Invalid UTF-8 character", "CPU-determined number of characters processed")
DEFINE_CC_SET(unicode_convert_16, "Entire second operand processed", "End of first operand reached", "Invalid Unicode low surrogate", "CPU-determined number of characters processed")
DEFINE_CC_SET(unicode_convert_32, "Entire second operand processed", "End of first operand reached", "Invalid UTF-32 character", "CPU-determined number of characters processed")
DEFINE_CC_SET(execute, "Set by the target instructions")
DEFINE_CC_SET(flogr_special, "All zeros", "", "One bit found", "")
DEFINE_CC_SET(insert_character, "All inserted bits are zeros, or mask is zero", "Leftmost inserted bit is one", "Leftmost inserted bit is zero, but not all bits are zeros", "")
DEFINE_CC_SET(lcbb_special, "Operand one is 16", "", "", "Operand one is less than 16")
DEFINE_CC_SET(load_negative, "Result zero", "Result less than zero", "", "")
DEFINE_CC_SET(lpd_special, "Loaded by interlocked fetch", "", "", "Not loaded by interlocked fetch")
DEFINE_CC_SET(load_positive, "Result zero", "", "Result greater than zero", "Overflow")
DEFINE_CC_SET(mvcl_special, "Operands have equal lengths", "First operand shorted", "First operand longer", "Destructive overlap, no moves performed")
DEFINE_CC_SET(mvcle_special, "Operands have equal lengths", "First operand shorted", "First operand longer", "CPU-determined number of bytes moved")
DEFINE_CC_SET(mvst_special, "", "Entire second operand moved, first operand updated, second operand unchanged", "", "CPU-determined number of bytes moved, both operands updated")
DEFINE_CC_SET(pcc_special, "Normal completion", "Verification-pattern mismatch", "Invalid bit index, or message length, or result is infinity", "Partial completion")
DEFINE_CC_SET(plo_special, "Comparisons equal, replacement values stored or load performed, function code valid (T=1)", "First operand not equal", "Third operand not equal (DCS only)", "Function code invalid (T=1 only)")
DEFINE_CC_SET(string_search, "", "Character found, first operand updated with its address, second operands unchanged", "Character not found, operands unchanged", "CPU-determined number of characters searched, first operand unchanged, second operand updated")
DEFINE_CC_SET(spm_special, "Set to bits 34 and 35 of first operand")
DEFINE_CC_SET(stck, "Clock in set state", "Close in non-set state", "Clock in error state", "Clock in stopped or non-operational state")
DEFINE_CC_SET(stfle_special, "Complete facility list stored", "", "", "Incomplete facility list stored")
DEFINE_CC_SET(subtract_logical, "", "Result not zero, borrow", "Result zero, no borrow", "Result not zero, no borrow")
DEFINE_CC_SET(subtract_logical_borrow, "Result zero, borrow", "Result not zero, borrow", "Result zero, no borrow", "Result not zero, no borrow")
DEFINE_CC_SET(svc_special, "Saved as old PSW, replaced by value in new PSW")
DEFINE_CC_SET(tam_special, "AMODE24", "AMODE31", "", "AMODE64")
DEFINE_CC_SET(ts_special, "Leftmost bit zero", "Leftmost bit one", "", "")
DEFINE_CC_SET(tm_old_special, "Selected bits all zeros, or zero mask", "Selected bits are mixed", "", "Selected bits all one")
DEFINE_CC_SET(tm_new_special, "Selected bits all zeros, or zero mask", "Selected bits are mixed, leftmost zero", "Selected bits are mixed, leftmost one", "Selected bits all one")
DEFINE_CC_SET(tabort_special, "Set by transaction-abort processing")
DEFINE_CC_SET(tbegin_special, "Transaction initialized", "Aborted, unknown cause, re-execution not productive", "Aborted, transient cause, re-execution may be productive", "Aborted, persistent cause, re-execution not productive")
DEFINE_CC_SET(tbeginc_special, "Transaction initialized", "", "", "")
DEFINE_CC_SET(tend_special, "CPU was in transactional mode", "", "CPU was not in transactional mode", "")
DEFINE_CC_SET(trt_like, "All function bytes zero", "Non-zero byte, first operand not exhausted", "Non-zero byte, first operand exhausted", "")
DEFINE_CC_SET(trt_like_interruptible, "First operand processed without selecting a non-zero function code", "Non-zero function code selected", "", "CPU-determined number of bytes processed")
DEFINE_CC_SET(trxx_special, "Entire second operand processed, no resulting function character was equal to the test character", "Second operand character selected requested function code", "", "CPU-determined number of characters processed")
DEFINE_CC_SET(unpack_new, "Sign is plus", "Sign is minus", "", "Sign is invalid")
DEFINE_CC_SET(update_tree_special, "Compare value equal at current node", "Compare value not located, or no comparison made", "", "GR(W)5 not zero and GR(W)0 negative")
DEFINE_CC_SET(edit_special, "Last field zero or zero length", "Last field less than zero", "Last field greater than zero", "")
DEFINE_CC_SET(test_decimal_special, "All digits and the sign are valid", "All digits are valid, sign invalid", "One or more digits invalid, sign valid", "One or more digits invalid, sign invalid")
DEFINE_CC_SET(fp_conversion, "Source was zero", "Source was less than zero", "Source was greater than zero", "Special cases (NaN, infinity, target overflow)")
DEFINE_CC_SET(pfpo_special, "Normal result, or function is valid", "Non-trap exception", "Trap exception with alternate action", "Function is invalid")
DEFINE_CC_SET(cas_like_special, "First and second operands equal, second operand replaced by odd register of first operand", "First and second operands not equal, first operand replaced by second operand", "", "")
DEFINE_CC_SET(unpredictable, "The code is unpredictable")
DEFINE_CC_SET(esta_special, "Branch state entry", "Program-call state entry", "", "")
DEFINE_CC_SET(iac_special, "Primary space mode", "Secondary space mode", "Access-register mode", "Home space mode")
DEFINE_CC_SET(lasp_special, "Translation and authorization complete, parameters loaded", "Primary ASM or subspace not available, parameters not loaded", "Secondary ASN not available or not authorized, or secondary subspace not available, parameters not loaded", "Space-switch event specified, parameters not loaded")
DEFINE_CC_SET(lptea_special, "PTE address returned, P bit is 0 in all DAT-table entries", "PTE address returned, P bit is 1 in one of DAT-table entries", "Invalid bit is 1 in the region or segment table entry", "Exception condition exists")
DEFINE_CC_SET(load_psw, "Replaced by the value in the new PSW")
DEFINE_CC_SET(load_real_special, "Translation available", "Segment-table entry invalid", "Page-table entry invalid", "ASCE not available, region or segment entry outside of table")
DEFINE_CC_SET(move_page_special, "Data move and key is set if requested", "First operand page entry invalid", "Second operand page entry invalid", "")
DEFINE_CC_SET(move_asn, "True length less than or equal to 256", "", "", "True length greater than 256")
DEFINE_CC_SET(mvcos_special, "True length less than or equal to 4096", "", "", "True length greater than 4096")
DEFINE_CC_SET(pagein_special, "Page-in operation completed", "Expanded-storage data error", "", "Expanded-storage block not available")
DEFINE_CC_SET(pageout_special, "Page-out operation completed", "Expanded-storage data error", "", "Expanded-storage block not available")
DEFINE_CC_SET(ptff_special, "Requested function performed", "", "", "Requested function not available")
DEFINE_CC_SET(ptf_special, "Topology-change initiated, or Topology-change report not pending", "Topology-change report pending", "Request rejected", "")
DEFINE_CC_SET(qpaci_special, "Complete information stored", "", "", "Incomplete information stored")
DEFINE_CC_SET(rrbe_special, "Reference bit zero, change bit zero", "Reference bit zero, change bit one", "Reference bit one, change bit zero", "Reference bit one, change bit one")
DEFINE_CC_SET(sck_special, "Clock value set", "Clock value secure", "", "Clock in not-operational state")
DEFINE_CC_SET(sske_special, "Storage key not set", "Entire storage key set", "Partial storage key set", "Entire storage key set, first operand unpredictable")
DEFINE_CC_SET(signal_special, "Order code accepted", "Status stored", "Busy", "Not operational")
DEFINE_CC_SET(tar_special, "ALET is zero", "ALET designates DU access list entry and does not cause ART exception", "ALET designates primary access list entry and does not cause ART exception", "ALET is 1 or causes ART exception")
DEFINE_CC_SET(test_block_special, "Block usable", "Block not usable", "", "")
DEFINE_CC_SET(tpei_special, "No tested external interruptions are pending", "One or more pending external interruptions", "", "")
DEFINE_CC_SET(tprot_special, "Fetching permitted, storing permitted", "Fetching permitted, not storing permitted", "Fetching not permitted, storing not permitted", "Translation not available")
DEFINE_CC_SET(cancel_special, "Start function canceled", "Status pending", "Not applicable", "Not operational")
DEFINE_CC_SET(clear_subchannel_special, "Function initiated", "", "", "Not operational")
DEFINE_CC_SET(halt_subchannel_special, "Function initiated", "Status pending with other than intermediate status", "Busy", "Not operational")
DEFINE_CC_SET(channel_special, "Function initiated", "Status pending", "Busy", "Not operational")
DEFINE_CC_SET(rchp_special, "Function initiated", "", "Busy", "Not operational")
DEFINE_CC_SET(rsch_special, "Function initiated", "Status pending", "Function not applicable", "Not operational")
DEFINE_CC_SET(stcrw_special, "CRW stored", "Zeros stored", "", "")
DEFINE_CC_SET(stsch_special, "SCHIB stored", "", "", "Not operation")
DEFINE_CC_SET(tpi_special, "Interruption code not stored", "Interruption code stored", "", "")
DEFINE_CC_SET(tsch_special, "IRB stored, subchannel status pending", "IRB stored, subchannel not status pending", "", "Not operational")
DEFINE_CC_SET(fp_arithmetic, "Result is zero", "Result is less than zero", "Result is greater than zero", "Result is NaN")
DEFINE_CC_SET(fp_compare, "Operands equal", "First operand low", "First operand high", "Operands unordered")
DEFINE_CC_SET(fp_integer_div, "Remainder final, normal quotient", "Remainder final, quotient overflow or NaN", "Remainder partial, normal quotient", "Remainder partial, quotient overflow")
DEFINE_CC_SET(fp_negative, "Result is zero", "Result is less than zero", "", "Result is NaN")
DEFINE_CC_SET(fp_positive, "Result is zero", "", "Result is greater than zero", "Result is NaN")
DEFINE_CC_SET(test_data, "Selected bit is 0 (no match)", "Selected bit is 1 (match)", "", "")
DEFINE_CC_SET(compare_exp, "Biased exponents equal", "First operand biased exponent low", "First operand biased exponent high", "Unordered")
DEFINE_CC_SET(vector_saturate, "No saturation", "One or more but not all elements saturated", "", "All elements saturated", "only set when CS=1")
DEFINE_CC_SET(vector_equal, "All elements equal", "Some elements equal", "", "No element equal", "only set when CS=1")
DEFINE_CC_SET(vector_high, "All elements high", "Some elements high", "", "No element high", "only set when CS=1")
DEFINE_CC_SET(vector_find, "If ZS=1, No matching elements before an element containing zero in the second operand", "One or more matches in the second operand and, if ZS=1, no zero matches", "If ZS=1, at least one indication in the first intermediate result is true with a lower index than a true indication in the second intermediate result", "All intermediate results are false", "only set when CS=1")
DEFINE_CC_SET(vector_find_equal, "If ZS=1, no equal comparisons with index less than zero comparisons", "Equal comparisons detected, if ZS=1, no zero comparisons were done", "If ZS=1, Equal comparisons detected, if ZS=1, zero comparisons were done", "No comparisons, if ZS=1, no zero elements either", "only set when CS=1")
DEFINE_CC_SET(vector_find_neq, "If ZS=1, zero detected in both operands before mismatch was detected", "Mismatch found, second operands is less than third", "Mismatch found, second operand is greater than third", "All elements compare equal, if ZS=1 no zeros were found in the second operand", "only set when CS=1")
DEFINE_CC_SET(vistr_special, "Zero element found", "", "", "All elements are non-zero", "only set when CS=1")
DEFINE_CC_SET(vstrc_special, "If ZS=1, no matching elements found before zero element in the second operand", "At least one match in the second operand and, if ZS=1, no zero matches", "if ZS=1, at least one match before the zero match", "No matches", "only set when CS=1")
DEFINE_CC_SET(vector_string_search_special, "No match or partial match was found, ZS=0 or no zeros detected", "No match found, ZS=1 and zero byte was detected", "Full match", "Partial match")
DEFINE_CC_SET(vfce_special, "All elements equal", "Mix of equal and unequal or unordered", "", "All elements are not equal or unordered", "only set when CS=1")
DEFINE_CC_SET(vfch_special, "All elements greater than", "Mix of greater than and equal, lower or unordered", "", "All elements are lower, equal or unordered", "only set when CS=1")
DEFINE_CC_SET(vfche_special, "All elements greater than or equal", "Mix of greater than or equal and lower or unordered", "", "All elements are lower or unordered", "only set when CS=1")
DEFINE_CC_SET(vector_test_data, "Selected bit is 1 for all elements", "Selected bit is 1 for some elements", "", "Selected bit is 0 for all elements")
DEFINE_CC_SET(vector_decimal_arithmetic, "Result is zero", "Result is less than zero", "Result is greater than zero", "Overflow", "only set when CS=1")
DEFINE_CC_SET(vector_convert, "No overflow", "", "", "Overflow", "only set when CS=1")
DEFINE_CC_SET(vclzdp_special, "All digits and sign are valid, source is zero except NZ=1 and sign negative", "All digits and sign are valid, source is negative or NZ=1 and sign negative and source is zero", "All digits and sign are valid, source is positive or zero", "A digit or sign is invalid", "only set when CS=1")
DEFINE_CC_SET(vpkzr_special, "Result is zero", "Result is less than zero", "Result is greater than zero", "Overflow or invalid digit or invalid sign", "only set when CS=1")
DEFINE_CC_SET(vpsop_special, "Result is zero", "Result is less than zero", "Result is greater than zero, or non-zero with invalid sign", "Overflow", "only set when CS=1")
DEFINE_CC_SET(kdsa_special, "Query completes; signature verified; or sign normal completion", "Verify: failure; Sign: key verification-pattern mismatch", "Verify: signature is incorrect or bad key", "Partial completion")
DEFINE_CC_SET(dfltcc_special, "Normal completion", "The first operand length is insufficient", "The second operand length is insufficient, or invalid input", "CPU-determined number of bytes processed")
DEFINE_CC_SET(nnpa_special, "Normal completion", "Response code is set", "", "CPU-determined number of bytes processed")
DEFINE_CC_SET(sortl_special, "Normal completion", "The first operand length is smaller than the record size; or merge mode is zero and the length of the second operand is less than 16", "An incomplete input list was encountered, or EILCL is non-zero and the length of an input list became equal to zero during the operation", "CPU-determined number of bytes processed")
DEFINE_CC_SET(not_documented, "Undocumented")
DEFINE_CC_SET(old_pop, "See S/370 PoP (e.g. GA22-7000-7)")
DEFINE_CC_SET(old_vector, "See S/370 vector extension (e.g. SA22-7125-2)")
DEFINE_CC_SET(ecpga_special, "Normal completion", "", "", "CPU not installed")
DEFINE_CC_SET(counter, "Normal completion", "", "", "Counter not available")
DEFINE_CC_SET(counter_constrols, "Normal completion", "", "", "Controls not set")
DEFINE_CC_SET(lsctl_special, "Normal completion", "", "", "State controls not set")
DEFINE_CC_SET(stcctm_special, "All counters in counter set stored", "Not all available counters requested", "More than available counters requested", "No counters stored")

DEFINE_INSTRUCTION(A, RX_a_2_ux, 540, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add (32)", arithmetic)
DEFINE_INSTRUCTION(AD, RX_a_2_ux, 1534, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add Normalized (long HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(ADB, RXE_2, 1567, UNI_ESA_SINCE_ZOP, "Add (long BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(ADBR, RRE_2, 1567, UNI_ESA_SINCE_ZOP, "Add (long BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(ADDFRR, RRE_2, 0, ESA_XA, "Add FRR")
DEFINE_INSTRUCTION(ADR, RR_2, 1534, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add Normalized (long HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(ADTR, RRF_a_3, 1613, UNI_SINCE_Z9, "Add (long DFP)", fp_arithmetic)
DEFINE_INSTRUCTION(ADTRA, RRF_a_4, 1613, UNI_SINCE_Z11, "Add (long DFP)", fp_arithmetic)
DEFINE_INSTRUCTION(AE, RX_a_2_ux, 1534, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add Normalized (short HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(AEB, RXE_2, 1567, UNI_ESA_SINCE_ZOP, "Add (short BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(AEBR, RRE_2, 1567, UNI_ESA_SINCE_ZOP, "Add (short BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(AER, RR_2, 1534, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add Normalized (short HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(AFI, RIL_a_2, 541, UNI_SINCE_Z9, "Add Immediate (32)", arithmetic)
DEFINE_INSTRUCTION(AG, RXY_a_2, 540, UNI_SINCE_ZOP, "Add (64)", arithmetic)
DEFINE_INSTRUCTION(AGF, RXY_a_2, 541, UNI_SINCE_ZOP, "Add (64<-32)", arithmetic)
DEFINE_INSTRUCTION(AGFI, RIL_a_2, 541, UNI_SINCE_Z9, "Add Immediate (64<-32)", arithmetic)
DEFINE_INSTRUCTION(AGFR, RRE_2, 540, UNI_SINCE_ZOP, "Add (64<-32)", arithmetic)
DEFINE_INSTRUCTION(AGH, RXY_a_2, 542, UNI_SINCE_Z14, "Add Halfword (64<-16)", arithmetic)
DEFINE_INSTRUCTION(AGHI, RI_a_2_s, 542, UNI_SINCE_ZOP, "Add Halfword Immediate (64<-16)", arithmetic)
DEFINE_INSTRUCTION(AGHIK, RIE_d_3, 541, UNI_SINCE_Z11, "Add Immediate (64<-16)", arithmetic)
DEFINE_INSTRUCTION(AGR, RRE_2, 540, UNI_SINCE_ZOP, "Add (64)", arithmetic)
DEFINE_INSTRUCTION(AGRK, RRF_a_3, 540, UNI_SINCE_Z11, "Add (64)", arithmetic)
DEFINE_INSTRUCTION(AGSI, SIY_2_ss, 541, UNI_SINCE_Z10, "Add Immediate (64<-8)", arithmetic)
DEFINE_INSTRUCTION(AH, RX_a_2_ux, 542, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add Halfword (32<-16)", arithmetic)
DEFINE_INSTRUCTION(AHHHR, RRF_a_3, 543, UNI_SINCE_Z11, "Add High (32)", arithmetic)
DEFINE_INSTRUCTION(AHHLR, RRF_a_3, 543, UNI_SINCE_Z11, "Add High (32)", arithmetic)
DEFINE_INSTRUCTION(AHI, RI_a_2_s, 542, UNI_ESA_SINCE_ZOP, "Add Halfword Immediate (32<-16)", arithmetic)
DEFINE_INSTRUCTION(AHIK, RIE_d_3, 541, UNI_SINCE_Z11, "Add Immediate (32<-16)", arithmetic)
DEFINE_INSTRUCTION(AHY, RXY_a_2, 542, UNI_SINCE_YOP, "Add Halfword (32<-16)", arithmetic)
DEFINE_INSTRUCTION(AIH, RIL_a_2, 543, UNI_SINCE_Z11, "Add Immediate High (32)", arithmetic)
DEFINE_INSTRUCTION(AL, RX_a_2_ux, 544, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add Logical (32)", arithmetic_logical)
DEFINE_INSTRUCTION(ALC, RXY_a_2, 545, UNI_ESA_SINCE_ZOP, "Add Logical with Carry (32)", arithmetic_logical)
DEFINE_INSTRUCTION(ALCG, RXY_a_2, 545, UNI_SINCE_ZOP, "Add Logical with Carry (64)", arithmetic_logical)
DEFINE_INSTRUCTION(ALCGR, RRE_2, 545, UNI_SINCE_ZOP, "Add Logical with Carry (64)", arithmetic_logical)
DEFINE_INSTRUCTION(ALCR, RRE_2, 545, UNI_ESA_SINCE_ZOP, "Add Logical with Carry (32)", arithmetic_logical)
DEFINE_INSTRUCTION(ALFI, RIL_a_2, 544, UNI_SINCE_Z9, "Add Logical Immediate (32)", arithmetic_logical)
DEFINE_INSTRUCTION(ALG, RXY_a_2, 544, UNI_SINCE_ZOP, "Add Logical (64)", arithmetic_logical)
DEFINE_INSTRUCTION(ALGF, RXY_a_2, 544, UNI_SINCE_ZOP, "Add Logical (64<-32)", arithmetic_logical)
DEFINE_INSTRUCTION(ALGFI, RIL_a_2, 544, UNI_SINCE_Z9, "Add Logical Immediate (64<-32)", arithmetic_logical)
DEFINE_INSTRUCTION(ALGFR, RRE_2, 544, UNI_SINCE_ZOP, "Add Logical (64<-32)", arithmetic_logical)
DEFINE_INSTRUCTION(ALGHSIK, RIE_d_3, 546, UNI_SINCE_Z11, "Add Logical with Signed Immediate (64<-16)", arithmetic_logical)
DEFINE_INSTRUCTION(ALGR, RRE_2, 544, UNI_SINCE_ZOP, "Add Logical (64)", arithmetic_logical)
DEFINE_INSTRUCTION(ALGRK, RRF_a_3, 544, UNI_SINCE_Z11, "Add Logical (64)", arithmetic_logical)
DEFINE_INSTRUCTION(ALGSI, SIY_2_ss, 546, UNI_SINCE_Z10, "Add Logical with Signed Immediate (64<-8)", arithmetic_logical)
DEFINE_INSTRUCTION(ALHHHR, RRF_a_3, 545, UNI_SINCE_Z11, "Add Logical High (32)", arithmetic)
DEFINE_INSTRUCTION(ALHHLR, RRF_a_3, 545, UNI_SINCE_Z11, "Add Logical High (32)", arithmetic)
DEFINE_INSTRUCTION(ALHSIK, RIE_d_3, 546, UNI_SINCE_Z11, "Add Logical with Signed Immediate (32<-16)", arithmetic_logical)
DEFINE_INSTRUCTION(ALR, RR_2, 544, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add Logical (32)", arithmetic_logical)
DEFINE_INSTRUCTION(ALRK, RRF_a_3, 544, UNI_SINCE_Z11, "Add Logical (32)", arithmetic_logical)
DEFINE_INSTRUCTION(ALSI, SIY_2_ss, 546, UNI_SINCE_Z10, "Add Logical with Signed Immediate (32<-8)", arithmetic_logical)
DEFINE_INSTRUCTION(ALSIH, RIL_a_2, 547, UNI_SINCE_Z11, "Add Logical with Signed Immediate High (32)", arithmetic_logical)
DEFINE_INSTRUCTION(ALSIHN, RIL_a_2, 547, UNI_SINCE_Z11, "Add Logical with Signed Immediate High (32)")
DEFINE_INSTRUCTION(ALY, RXY_a_2, 544, UNI_SINCE_YOP, "Add Logical (32)", arithmetic_logical)
DEFINE_INSTRUCTION(AP, SS_b_2, 1022, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add Decimal", arithmetic)
DEFINE_INSTRUCTION(AR, RR_2, 540, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add (32)", arithmetic)
DEFINE_INSTRUCTION(ARK, RRF_a_3, 540, UNI_SINCE_Z11, "Add (32)", arithmetic)
DEFINE_INSTRUCTION(ASI, SIY_2_ss, 541, UNI_SINCE_Z10, "Add Immediate (32<-8)", arithmetic)
DEFINE_INSTRUCTION(AU, RX_a_2_ux, 1535, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add Unnormalized (short HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(AUR, RR_2, 1535, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add Unnormalized (short HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(AW, RX_a_2_ux, 1535, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add Unnormalized (long HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(AWR, RR_2, 1535, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add Unnormalized (long HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(AXBR, RRE_2, 1567, UNI_ESA_SINCE_ZOP, "Add (extended BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(AXR, RR_2, 1534, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Add Normalized (extended HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(AXTR, RRF_a_3, 1613, UNI_SINCE_Z9, "Add (extended DFP)", fp_arithmetic)
DEFINE_INSTRUCTION(AXTRA, RRF_a_4, 1613, UNI_SINCE_Z11, "Add (extended DFP)", fp_arithmetic)
DEFINE_INSTRUCTION(AY, RXY_a_2, 540, UNI_SINCE_YOP, "Add (32)", arithmetic)
DEFINE_INSTRUCTION(BAKR, RRE_2, 1095, UNI_ESA_SINCE_ZOP, "Branch and Stack", branch_argument_unknown_nonzero<1>)
DEFINE_INSTRUCTION(BAL, RX_a_2_ux, 550, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Branch and Link", branch_argument<1>)
DEFINE_INSTRUCTION(BALR, RR_2, 550, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Branch and Link", branch_argument_unknown_nonzero<1>)
DEFINE_INSTRUCTION(BAS, RX_a_2_ux, 551, UNI_ESA_XA_370_SINCE_ZOP, "Branch and Save", branch_argument<1>)
DEFINE_INSTRUCTION(BASR, RR_2, 551, UNI_ESA_XA_370_SINCE_ZOP, "Branch and Save", branch_argument_unknown_nonzero<1>)
DEFINE_INSTRUCTION(BASSM, RR_2, 552, UNI_ESA_XA_SINCE_ZOP, "Branch and Save and Set Mode", branch_argument_unknown_nonzero<1>)
DEFINE_INSTRUCTION(BC, RX_b_2, 555, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Branch on Condition", branch_argument_nonzero<1,0>)
DEFINE_INSTRUCTION(BCR, RR_2_m, 555, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Branch on Condition", branch_argument_unknown_nonzero<1>)
DEFINE_INSTRUCTION(BCT, RX_a_2_ux, 556, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Branch on Count (32)", branch_argument<1>)
DEFINE_INSTRUCTION(BCTG, RXY_a_2, 556, UNI_SINCE_ZOP, "Branch on Count (64)", branch_argument<1>)
DEFINE_INSTRUCTION(BCTGR, RRE_2, 556, UNI_SINCE_ZOP, "Branch on Count (64)", branch_argument_unknown_nonzero<1>)
DEFINE_INSTRUCTION(BCTR, RR_2, 556, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Branch on Count (32)", branch_argument_unknown_nonzero<1>)
DEFINE_INSTRUCTION(BDEPG, RRF_a_3, 549, UNI_SINCE_Z17, "Bit Deposit")
DEFINE_INSTRUCTION(BEXTG, RRF_a_3, 550, UNI_SINCE_Z17, "Bit Extract")
DEFINE_INSTRUCTION(BIC, RXY_b_2, 554, UNI_SINCE_Z14, "Branch Indirect On Condition", branch_argument_unknown_nonzero<0>)
DEFINE_INSTRUCTION(BPP, SMI_3, 558, UNI_SINCE_Z12, "Branch Prediction Preload")
DEFINE_INSTRUCTION(BPRP, MII_3, 558, UNI_SINCE_Z12, "Branch Prediction Relative Preload")
DEFINE_INSTRUCTION(BRAS, RI_b_2, 561, UNI_ESA_SINCE_ZOP, "Branch Relative And Save", branch_argument<1>)
DEFINE_INSTRUCTION(BRASL, RIL_b_2, 561, UNI_ESA_SINCE_ZOP, "Branch Relative and Save Long", branch_argument<1>)
DEFINE_INSTRUCTION(BRC, RI_c_2, 561, UNI_ESA_SINCE_ZOP, "Branch Relative on Condition", branch_argument_nonzero<1,0>)
DEFINE_INSTRUCTION(BRCL, RIL_c_2, 561, UNI_ESA_SINCE_ZOP, "Branch Relative on Condition Long", branch_argument_nonzero<1,0>)
DEFINE_INSTRUCTION(BRCT, RI_b_2, 562, UNI_ESA_SINCE_ZOP, "Branch Relative on Count (32)", branch_argument<1>)
DEFINE_INSTRUCTION(BRCTG, RI_b_2, 562, UNI_SINCE_ZOP, "Branch Relative on Count (64)", branch_argument<1>)
DEFINE_INSTRUCTION(BRCTH, RIL_b_2, 562, UNI_SINCE_Z11, "Branch Relative on Count High (32)", branch_argument<1>)
DEFINE_INSTRUCTION(BRXH, RSI_3, 563, UNI_ESA_SINCE_ZOP, "Branch Relative on Index High (32)", branch_argument<2>)
DEFINE_INSTRUCTION(BRXHG, RIE_e_3, 563, UNI_SINCE_ZOP, "Branch Relative on Index High (64)", branch_argument<2>)
DEFINE_INSTRUCTION(BRXLE, RSI_3, 563, UNI_ESA_SINCE_ZOP, "Branch Relative on Index Low or Equal (32)", branch_argument<2>)
DEFINE_INSTRUCTION(BRXLG, RIE_e_3, 563, UNI_SINCE_ZOP, "Branch Relative on Index Low or Equal (64)", branch_argument<2>)
DEFINE_INSTRUCTION(BSA, RRE_2, 1091, UNI_ESA_SINCE_ZOP, "Branch and Set Authority", privileged_conditionally, branch_argument_unknown)
DEFINE_INSTRUCTION(BSG, RRE_2, 1097, UNI_ESA_SINCE_ZOP, "Branch in Subspace Group", branch_argument_unknown)
DEFINE_INSTRUCTION(BSM, RR_2, 553, UNI_ESA_XA_SINCE_ZOP, "Branch and Set Mode", branch_argument_unknown_nonzero<1>)
DEFINE_INSTRUCTION(BXH, RS_a_3, 557, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Branch on Index High (32)", branch_argument<2>)
DEFINE_INSTRUCTION(BXHG, RSY_a_3, 557, UNI_SINCE_ZOP, "Branch on Index High (64)", branch_argument<2>)
DEFINE_INSTRUCTION(BXLE, RS_a_3, 557, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Branch on Index Low or Equal (32)", branch_argument<2>)
DEFINE_INSTRUCTION(BXLEG, RSY_a_3, 557, UNI_SINCE_ZOP, "Branch on Index Low or Equal (64)", branch_argument<2>)
DEFINE_INSTRUCTION(C, RX_a_2_ux, 663, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare (32)", comparison)
DEFINE_INSTRUCTION(CAL, SSF_3_rd, 672, UNI_SINCE_Z17, "Compare and Load (32)", cal)
DEFINE_INSTRUCTION(CALG, SSF_3_rd, 672, UNI_SINCE_Z17, "Compare and Load (64)", cal)
DEFINE_INSTRUCTION(CALGF, SSF_3_rd, 672, UNI_SINCE_Z17, "Compare and Load (64<-32)", cal)
DEFINE_INSTRUCTION(CD, RX_a_2_ux, 1536, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare (long HFP)", comparison)
DEFINE_INSTRUCTION(CDB, RXE_2, 1569, UNI_ESA_SINCE_ZOP, "Compare (long BFP)", fp_compare)
DEFINE_INSTRUCTION(CDBR, RRE_2, 1569, UNI_ESA_SINCE_ZOP, "Compare (long BFP)", fp_compare)
DEFINE_INSTRUCTION(CDFBR, RRE_2, 1571, UNI_ESA_SINCE_ZOP, "Convert from Fixed (long BFP<-32)")
DEFINE_INSTRUCTION(CDFBRA, RRF_e_4, 1571, UNI_SINCE_Z11, "Convert from Fixed (long BFP<-32)")
DEFINE_INSTRUCTION(CDFR, RRE_2, 1537, UNI_ESA_SINCE_ZOP, "Convert from Fixed (long HFP<-32)")
DEFINE_INSTRUCTION(CDFTR, RRF_e_4, 1618, UNI_SINCE_Z11, "Convert from Fixed (long DFP<-32)")
DEFINE_INSTRUCTION(CDGBR, RRE_2, 1571, UNI_SINCE_ZOP, "Convert from Fixed (long BFP<-64)")
DEFINE_INSTRUCTION(CDGBRA, RRF_e_4, 1571, UNI_SINCE_Z11, "Convert from Fixed (long BFP<-64)")
DEFINE_INSTRUCTION(CDGR, RRE_2, 1537, UNI_SINCE_ZOP, "Convert from Fixed (long HFP<-64)")
DEFINE_INSTRUCTION(CDGTR, RRE_2, 1618, UNI_SINCE_Z9, "Convert from Fixed (long DFP<-64)")
DEFINE_INSTRUCTION(CDGTRA, RRF_e_4, 1618, UNI_SINCE_Z11, "Convert from Fixed (long DFP<-64)")
DEFINE_INSTRUCTION(CDLFBR, RRF_e_4, 1573, UNI_SINCE_Z11, "Convert from Logical (long BFP<-32)")
DEFINE_INSTRUCTION(CDLFTR, RRF_e_4, 1619, UNI_SINCE_Z11, "Convert from Logical (long DFP<-32)")
DEFINE_INSTRUCTION(CDLGBR, RRF_e_4, 1573, UNI_SINCE_Z11, "Convert from Logical (long BFP<-64)")
DEFINE_INSTRUCTION(CDLGTR, RRF_e_4, 1619, UNI_SINCE_Z11, "Convert from Logical (long DFP<-64)")
DEFINE_INSTRUCTION(CDPT, RSL_b_3, 1620, UNI_SINCE_Z13, "Convert from Packed (To Long DFP)")
DEFINE_INSTRUCTION(CDR, RR_2, 1536, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare (long HFP)", comparison)
DEFINE_INSTRUCTION(CDS, RS_a_3_ee, 673, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare Double and Swap (32)", cas)
DEFINE_INSTRUCTION(CDSG, RSY_a_3_ee, 673, UNI_SINCE_ZOP, "Compare Double and Swap (64)", cas)
DEFINE_INSTRUCTION(CDSTR, RRE_2, 1622, UNI_SINCE_Z9, "Convert from Signed Packed (long DFP<-64)")
DEFINE_INSTRUCTION(CDSY, RSY_a_3_ee, 673, UNI_SINCE_YOP, "Compare Double and Swap (32)", cas)
DEFINE_INSTRUCTION(CDTR, RRE_2, 1616, UNI_SINCE_Z9, "Compare (long DFP)", fp_compare)
DEFINE_INSTRUCTION(CDUTR, RRE_2, 1622, UNI_SINCE_Z9, "Convert from Unsigned Packed (long DFP<-64)")
DEFINE_INSTRUCTION(CDZT, RSL_b_3, 1623, UNI_SINCE_Z12, "Comvert from Zoned (to long DFP)")
DEFINE_INSTRUCTION(CE, RX_a_2_ux, 1536, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare (short HFP)", comparison)
DEFINE_INSTRUCTION(CEB, RXE_2, 1569, UNI_ESA_SINCE_ZOP, "Compare (short BFP)", fp_compare)
DEFINE_INSTRUCTION(CEBR, RRE_2, 1569, UNI_ESA_SINCE_ZOP, "Compare (short BFP)", fp_compare)
DEFINE_INSTRUCTION(CEDTR, RRE_2, 1617, UNI_SINCE_Z9, "Compare Biased Exponent (long DFP)", compare_exp)
DEFINE_INSTRUCTION(CEFBR, RRE_2, 1571, UNI_ESA_SINCE_ZOP, "Convert from Fixed (short BFP<-32)")
DEFINE_INSTRUCTION(CEFBRA, RRF_e_4, 1571, UNI_SINCE_Z11, "Convert from Fixed (short BFP<-32)")
DEFINE_INSTRUCTION(CEFR, RRE_2, 1537, UNI_ESA_SINCE_ZOP, "Convert from Fixed (short HFP<-32)")
DEFINE_INSTRUCTION(CEGBR, RRE_2, 1571, UNI_SINCE_ZOP, "Convert from Fixed (short BFP<-64)")
DEFINE_INSTRUCTION(CEGBRA, RRF_e_4, 1571, UNI_SINCE_Z11, "Convert from Fixed (short BFP<-64)")
DEFINE_INSTRUCTION(CEGR, RRE_2, 1537, UNI_SINCE_ZOP, "Convert from Fixed (short HFP<-64)")
DEFINE_INSTRUCTION(CELFBR, RRF_e_4, 1573, UNI_SINCE_Z11, "Convert from Logical (short BFP<-32)")
DEFINE_INSTRUCTION(CELGBR, RRF_e_4, 1573, UNI_SINCE_Z11, "Convert from Logical (short BFP<-64)")
DEFINE_INSTRUCTION(CER, RR_2, 1536, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare (short HFP)", comparison)
DEFINE_INSTRUCTION(CEXTR, RRE_2, 1617, UNI_SINCE_Z9, "Compare Biased Exponent (extended DFP)", compare_exp)
DEFINE_INSTRUCTION(CFC, S_1_u, 665, UNI_ESA_XA_SINCE_ZOP, "Compare and Form Codeword", cfc_special, has_parameter_list)
DEFINE_INSTRUCTION(CFDBR, RRF_e_3, 1574, UNI_ESA_SINCE_ZOP, "Convert to Fixed (32<-long BFP)", fp_conversion)
DEFINE_INSTRUCTION(CFDBRA, RRF_e_4, 1574, UNI_SINCE_Z11, "Convert to Fixed (32<-long BFP)", fp_conversion)
DEFINE_INSTRUCTION(CFDR, RRF_e_3, 1537, UNI_ESA_SINCE_ZOP, "Convert to Fixed (32<-long HFP)", fp_conversion)
DEFINE_INSTRUCTION(CFDTR, RRF_e_4, 1624, UNI_SINCE_Z11, "Convert to Fixed (32<-long DFP)", fp_conversion)
DEFINE_INSTRUCTION(CFEBR, RRF_e_3, 1574, UNI_ESA_SINCE_ZOP, "Convert to Fixed (32<-short BFP)", fp_conversion)
DEFINE_INSTRUCTION(CFEBRA, RRF_e_4, 1574, UNI_SINCE_Z11, "Convert to Fixed (32<-short BFP)", fp_conversion)
DEFINE_INSTRUCTION(CFER, RRF_e_3, 1537, UNI_ESA_SINCE_ZOP, "Convert to Fixed (32<-short HFP)", fp_conversion)
DEFINE_INSTRUCTION(CFI, RIL_a_2, 663, UNI_SINCE_Z9, "Compare Immediate (32)", comparison)
DEFINE_INSTRUCTION(CFXBR, RRF_e_3, 1574, UNI_ESA_SINCE_ZOP, "Convert to Fixed (32<-extended BFP)", fp_conversion)
DEFINE_INSTRUCTION(CFXBRA, RRF_e_4, 1574, UNI_SINCE_Z11, "Convert to Fixed (32<-extended BFP)", fp_conversion)
DEFINE_INSTRUCTION(CFXR, RRF_e_3, 1537, UNI_ESA_SINCE_ZOP, "Convert to Fixed (32<-extended HFP)", fp_conversion)
DEFINE_INSTRUCTION(CFXTR, RRF_e_4, 1624, UNI_SINCE_Z11, "Convert to Fixed (32<-extended DFP)", fp_conversion)
DEFINE_INSTRUCTION(CG, RXY_a_2, 663, UNI_SINCE_ZOP, "Compare (64)", comparison)
DEFINE_INSTRUCTION(CGDBR, RRF_e_3, 1574, UNI_SINCE_ZOP, "Convert to Fixed (64<-long BFP)", fp_conversion)
DEFINE_INSTRUCTION(CGDBRA, RRF_e_4, 1574, UNI_SINCE_Z11, "Convert to Fixed (64<-long BFP)", fp_conversion)
DEFINE_INSTRUCTION(CGDR, RRF_e_3, 1537, UNI_SINCE_ZOP, "Convert to Fixed (64<-long HFP)", fp_conversion)
DEFINE_INSTRUCTION(CGDTR, RRF_e_3, 1623, UNI_SINCE_Z9, "Convert to Fixed (64<-long DFP)", fp_conversion)
DEFINE_INSTRUCTION(CGDTRA, RRF_e_4, 1624, UNI_SINCE_Z11, "Convert to Fixed (64<-long DFP)", fp_conversion)
DEFINE_INSTRUCTION(CGEBR, RRF_e_3, 1574, UNI_SINCE_ZOP, "Convert to Fixed (64<-short BFP)", fp_conversion)
DEFINE_INSTRUCTION(CGEBRA, RRF_e_4, 1574, UNI_SINCE_Z11, "Convert to Fixed (64<-short BFP)", fp_conversion)
DEFINE_INSTRUCTION(CGER, RRF_e_3, 1537, UNI_SINCE_ZOP, "Convert to Fixed (64<-short HFP)", fp_conversion)
DEFINE_INSTRUCTION(CGF, RXY_a_2, 663, UNI_SINCE_ZOP, "Compare (64<-32)", comparison)
DEFINE_INSTRUCTION(CGFI, RIL_a_2, 663, UNI_SINCE_Z9, "Compare Immediate (64<-32)", comparison)
DEFINE_INSTRUCTION(CGFR, RRE_2, 663, UNI_SINCE_ZOP, "Compare (64<-32)", comparison)
DEFINE_INSTRUCTION(CGFRL, RIL_b_2, 663, UNI_SINCE_Z10, "Compare Relative Long (64<-32)", comparison)
DEFINE_INSTRUCTION(CGH, RXY_a_2, 679, UNI_SINCE_Z10, "Compare Halfword (64<-16)", comparison)
DEFINE_INSTRUCTION(CGHI, RI_a_2_s, 679, UNI_SINCE_ZOP, "Compare Halfword Immediate (64<-16)", comparison)
DEFINE_INSTRUCTION(CGHRL, RIL_b_2, 680, UNI_SINCE_Z10, "Compare Halfword Relative Long (64<-16)", comparison)
DEFINE_INSTRUCTION(CGHSI, SIL_2_s, 680, UNI_SINCE_Z10, "Compare Halfword Immediate (64<-16)", comparison)
DEFINE_INSTRUCTION(CGIB, RIS_4, 664, UNI_SINCE_Z10, "Compare Immediate and Branch (64<-8)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CGIJ, RIE_c_4, 664, UNI_SINCE_Z10, "Compare Immediate and Branch Relative (64<-8)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CGIT, RIE_a_3, 678, UNI_SINCE_Z10, "Compare Immediate and Trap (64<-16)")
DEFINE_INSTRUCTION(CGR, RRE_2, 663, UNI_SINCE_ZOP, "Compare (64)", comparison)
DEFINE_INSTRUCTION(CGRB, RRS_4, 664, UNI_SINCE_Z10, "Compare and Branch (64)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CGRJ, RIE_b_4, 664, UNI_SINCE_Z10, "Compare and Branch Relative (64)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CGRL, RIL_b_2, 663, UNI_SINCE_Z10, "Compare Relative Long (64)", comparison)
DEFINE_INSTRUCTION(CGRT, RRF_c_3, 678, UNI_SINCE_Z10, "Compare and Trap (64)")
DEFINE_INSTRUCTION(CGXBR, RRF_e_3, 1574, UNI_SINCE_ZOP, "Convert to Fixed (64<-extended BFP)", fp_conversion)
DEFINE_INSTRUCTION(CGXBRA, RRF_e_4, 1574, UNI_SINCE_Z11, "Convert to Fixed (64<-extended BFP)", fp_conversion)
DEFINE_INSTRUCTION(CGXR, RRF_e_3, 1537, UNI_SINCE_ZOP, "Convert to Fixed (64<-extended HFP)", fp_conversion)
DEFINE_INSTRUCTION(CGXTR, RRF_e_3, 1623, UNI_SINCE_Z9, "Convert to Fixed (64<-extended DFP)", fp_conversion)
DEFINE_INSTRUCTION(CGXTRA, RRF_e_4, 1624, UNI_SINCE_Z11, "Convert to Fixed (64<-extended DFP)", fp_conversion)
DEFINE_INSTRUCTION(CH, RX_a_2_ux, 679, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare Halfword (32<-16)", comparison)
DEFINE_INSTRUCTION(CHF, RXY_a_2, 681, UNI_SINCE_Z11, "Compare High (32)", comparison)
DEFINE_INSTRUCTION(CHHR, RRE_2, 680, UNI_SINCE_Z11, "Compare High (32)", comparison)
DEFINE_INSTRUCTION(CHHSI, SIL_2_s, 680, UNI_SINCE_Z10, "Compare Halfword Immediate (16<-16)", comparison)
DEFINE_INSTRUCTION(CHI, RI_a_2_s, 679, UNI_ESA_SINCE_ZOP, "Compare Halfword Immediate (32<-16)", comparison)
DEFINE_INSTRUCTION(CHLR, RRE_2, 681, UNI_SINCE_Z11, "Compare High (32)", comparison)
DEFINE_INSTRUCTION(CHRL, RIL_b_2, 680, UNI_SINCE_Z10, "Compare Halfword Relative Long (32<-16)", comparison)
DEFINE_INSTRUCTION(CHSI, SIL_2_s, 680, UNI_SINCE_Z10, "Compare Halfword Immediate (32<-16)", comparison)
DEFINE_INSTRUCTION(CHY, RXY_a_2, 679, UNI_SINCE_YOP, "Compare Halfword (32<-16)", comparison)
DEFINE_INSTRUCTION(CIB, RIS_4, 664, UNI_SINCE_Z10, "Compare Immediate and Branch (32<-8)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CIH, RIL_a_2, 681, UNI_SINCE_Z11, "Compare Immediate High (32)", comparison)
DEFINE_INSTRUCTION(CIJ, RIE_c_4, 664, UNI_SINCE_Z10, "Compare Immediate and Branch Relative (32<-8)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CIT, RIE_a_3, 678, UNI_SINCE_Z10, "Compare Immediate and Trap (32<-16)")
DEFINE_INSTRUCTION(CKSM, RRE_2_ne, 564, UNI_ESA_SINCE_ZOP, "Checksum", second_interruptible)
DEFINE_INSTRUCTION(CL, RX_a_2_ux, 681, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare Logical (32)", comparison)
DEFINE_INSTRUCTION(CLC, SS_a_2_u, 681, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare Logical (character)", comparison)
DEFINE_INSTRUCTION(CLCL, RR_2_ee, 687, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare Logical Long", comparison)
DEFINE_INSTRUCTION(CLCLE, RS_a_3_ee, 689, UNI_ESA_SINCE_ZOP, "Compare Logical Long Extended", comparison_interruptible)
DEFINE_INSTRUCTION(CLCLU, RSY_a_3_ee, 692, UNI_SINCE_ZOP, "Compare Logical Long Unicode", comparison_interruptible)
DEFINE_INSTRUCTION(CLFDBR, RRF_e_4, 1577, UNI_SINCE_Z11, "Convert to Logical (32<-long BFP)", fp_conversion)
DEFINE_INSTRUCTION(CLFDTR, RRF_e_4, 1626, UNI_SINCE_Z11, "Convert to Logical (32<-long DFP)", fp_conversion)
DEFINE_INSTRUCTION(CLFEBR, RRF_e_4, 1577, UNI_SINCE_Z11, "Convert to Logical (32<-short BFP)", fp_conversion)
DEFINE_INSTRUCTION(CLFHSI, SIL_2_u, 682, UNI_SINCE_Z10, "Compare Logical Immediate (32<-16)", comparison)
DEFINE_INSTRUCTION(CLFI, RIL_a_2, 681, UNI_SINCE_Z9, "Compare Logical Immediate (32)", comparison)
DEFINE_INSTRUCTION(CLFIT, RIE_a_3, 685, UNI_SINCE_Z10, "Compare Logical Immediate and Trap (32<-16)")
DEFINE_INSTRUCTION(CLFXBR, RRF_e_4, 1577, UNI_SINCE_Z11, "Convert to Logical (32<-extended BFP)", fp_conversion)
DEFINE_INSTRUCTION(CLFXTR, RRF_e_4, 1626, UNI_SINCE_Z11, "Convert to Logical (32<-extended DFP)", fp_conversion)
DEFINE_INSTRUCTION(CLG, RXY_a_2, 681, UNI_SINCE_ZOP, "Compare Logical (64)", comparison)
DEFINE_INSTRUCTION(CLGDBR, RRF_e_4, 1577, UNI_SINCE_Z11, "Convert to Logical (64<-long BFP)", fp_conversion)
DEFINE_INSTRUCTION(CLGDTR, RRF_e_4, 1626, UNI_SINCE_Z11, "Convert to Logical (64<-long DFP)", fp_conversion)
DEFINE_INSTRUCTION(CLGEBR, RRF_e_4, 1577, UNI_SINCE_Z11, "Convert to Logical (64<-short BFP)", fp_conversion)
DEFINE_INSTRUCTION(CLGF, RXY_a_2, 681, UNI_SINCE_ZOP, "Compare Logical (64<-32)", comparison)
DEFINE_INSTRUCTION(CLGFI, RIL_a_2, 682, UNI_SINCE_Z9, "Compare Logical Immediate (64<-32)", comparison)
DEFINE_INSTRUCTION(CLGFR, RRE_2, 681, UNI_SINCE_ZOP, "Compare Logical (64<-32)", comparison)
DEFINE_INSTRUCTION(CLGFRL, RIL_b_2, 682, UNI_SINCE_Z10, "Compare Logical Relative Long (64<-32)", comparison)
DEFINE_INSTRUCTION(CLGHRL, RIL_b_2, 682, UNI_SINCE_Z10, "Compare Logical Relative Long (64<-16)", comparison)
DEFINE_INSTRUCTION(CLGHSI, SIL_2_u, 682, UNI_SINCE_Z10, "Compare Logical Immediate (64<-16)", comparison)
DEFINE_INSTRUCTION(CLGIB, RIS_4, 683, UNI_SINCE_Z10, "Compare Logical Immediate and Branch (64<-8)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CLGIJ, RIE_c_4, 684, UNI_SINCE_Z10, "Compare Logical Immediate and Branch Relative (64<-8)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CLGIT, RIE_a_3, 685, UNI_SINCE_Z10, "Compare Logical Immediate and Trap (64<-16)")
DEFINE_INSTRUCTION(CLGR, RRE_2, 681, UNI_SINCE_ZOP, "Compare Logical (64)", comparison)
DEFINE_INSTRUCTION(CLGRB, RRS_4, 683, UNI_SINCE_Z10, "Compare Logical and Branch (64)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CLGRJ, RIE_b_4, 683, UNI_SINCE_Z10, "Compare Logical and Branch Relative (64)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CLGRL, RIL_b_2, 682, UNI_SINCE_Z10, "Compare Logical Relative Long (64)", comparison)
DEFINE_INSTRUCTION(CLGRT, RRF_c_3, 685, UNI_SINCE_Z10, "Compare Logical and Trap (64)")
DEFINE_INSTRUCTION(CLGT, RSY_b_3_ux, 685, UNI_SINCE_Z12, "Compare Logical and Trap (64)")
DEFINE_INSTRUCTION(CLGXBR, RRF_e_4, 1577, UNI_SINCE_Z11, "Convert to Logical (64<-extended BFP)", fp_conversion)
DEFINE_INSTRUCTION(CLGXTR, RRF_e_4, 1626, UNI_SINCE_Z11, "Convert to Logical (64<-extended DFP)", fp_conversion)
DEFINE_INSTRUCTION(CLHF, RXY_a_2, 687, UNI_SINCE_Z11, "Compare Logical High (32)", comparison)
DEFINE_INSTRUCTION(CLHHR, RRE_2, 687, UNI_SINCE_Z11, "Compare Logical High (32)", comparison)
DEFINE_INSTRUCTION(CLHHSI, SIL_2_u, 682, UNI_SINCE_Z10, "Compare Logical Immediate (16<-16)", comparison)
DEFINE_INSTRUCTION(CLHLR, RRE_2, 687, UNI_SINCE_Z11, "Compare Logical High (32)", comparison)
DEFINE_INSTRUCTION(CLHRL, RIL_b_2, 682, UNI_SINCE_Z10, "Compare Logical Relative Long (32<-16)", comparison)
DEFINE_INSTRUCTION(CLI, SI_2_u, 682, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare Logical Immediate", comparison)
DEFINE_INSTRUCTION(CLIB, RIS_4, 683, UNI_SINCE_Z10, "Compare Logical Immediate and Branch (32<-8)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CLIH, RIL_a_2, 687, UNI_SINCE_Z11, "Compare Logical Immediate High (32)", comparison)
DEFINE_INSTRUCTION(CLIJ, RIE_c_4, 684, UNI_SINCE_Z10, "Compare Logical Immediate and Branch Relative (32<-8)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CLIY, SIY_2_su, 682, UNI_SINCE_YOP, "Compare Logical Immediate", comparison)
DEFINE_INSTRUCTION(CLM, RS_b_3, 686, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare Logical Characters under Mask (low)", comparison)
DEFINE_INSTRUCTION(CLMH, RSY_b_3_us, 686, UNI_SINCE_ZOP, "Compare Logical Characters under Mask (high)", comparison)
DEFINE_INSTRUCTION(CLMY, RSY_b_3_us, 686, UNI_SINCE_YOP, "Compare Logical Characters under Mask (low)", comparison)
DEFINE_INSTRUCTION(CLR, RR_2, 681, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare Logical (32)", comparison)
DEFINE_INSTRUCTION(CLRB, RRS_4, 683, UNI_SINCE_Z10, "Compare Logical and Branch (32)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CLRCH, S_1_u, 0, UNI_370, "Clear Channel", old_pop)
DEFINE_INSTRUCTION(CLRIO, S_1_u, 0, UNI_370_DOS, "Clear I/O", old_pop)
DEFINE_INSTRUCTION(CLRJ, RIE_b_4, 683, UNI_SINCE_Z10, "Compare Logical and Branch Relative (32)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CLRL, RIL_b_2, 682, UNI_SINCE_Z10, "Compare Logical Relative Long (32)", comparison)
DEFINE_INSTRUCTION(CLRT, RRF_c_3, 685, UNI_SINCE_Z10, "Compare Logical and Trap (32)")
DEFINE_INSTRUCTION(CLST, RRE_2, 695, UNI_ESA_SINCE_ZOP, "Compare Logical String", clst_special)
DEFINE_INSTRUCTION(CLT, RSY_b_3_ux, 685, UNI_SINCE_Z12, "Compare Logical and Trap (32)")
DEFINE_INSTRUCTION(CLY, RXY_a_2, 681, UNI_SINCE_YOP, "Compare Logical (32)", comparison)
DEFINE_INSTRUCTION(CLZG, RRE_2, 803, UNI_SINCE_Z17, "Count Leading Zeros")
DEFINE_INSTRUCTION(CMPSC, RRE_2_ee, 699, UNI_ESA_SINCE_ZOP, "Compression Call", cmpsc_special, has_parameter_list)
DEFINE_INSTRUCTION(CONCS, S_1_u, 0, UNI_370, "Connect Channel Set", old_pop)
DEFINE_INSTRUCTION(CP, SS_b_2, 1023, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare Decimal", comparison)
DEFINE_INSTRUCTION(CPDT, RSL_b_3, 1627, UNI_SINCE_Z13, "Convert to Packed (From Long DFP)", fp_conversion)
DEFINE_INSTRUCTION(CPSDR, RRF_b_3, 1060, UNI_SINCE_Z9, "Copy Sign (L)")
DEFINE_INSTRUCTION(CPXT, RSL_b_3, 1627, UNI_SINCE_Z13, "Convert to Packed (From Extended DFP)", fp_conversion)
DEFINE_INSTRUCTION(CPYA, RRE_2, 803, UNI_ESA_SINCE_ZOP, "Copy Access")
DEFINE_INSTRUCTION(CR, RR_2, 663, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare (32)", comparison)
DEFINE_INSTRUCTION(CRB, RRS_4, 664, UNI_SINCE_Z10, "Compare and Branch (32)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CRDTE, RRF_b_4_opt_ene, 1102, UNI_SINCE_Z12, "Compare and Replace DAT Table Entry", cas_like_special, privileged)
DEFINE_INSTRUCTION(CRJ, RIE_b_4, 664, UNI_SINCE_Z10, "Compare and Branch Relative (32)", branch_argument_nonzero<3,2>)
DEFINE_INSTRUCTION(CRL, RIL_b_2, 663, UNI_SINCE_Z10, "Compare Relative Long (32)", comparison)
DEFINE_INSTRUCTION(CRT, RRF_c_3, 678, UNI_SINCE_Z10, "Compare and Trap (32)")
DEFINE_INSTRUCTION(CS, RS_a_3, 673, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Compare and Swap (32)", cas)
DEFINE_INSTRUCTION(CSCH, S_0, 1333, UNI_ESA_XA_SINCE_ZOP, "Clear Subchannel", clear_subchannel_special, privileged, has_parameter_list)
DEFINE_INSTRUCTION(CSDTR, RRF_d_3, 1629, UNI_SINCE_Z9, "Convert to Signed Packed (64<-long DFP)")
DEFINE_INSTRUCTION(CSG, RSY_a_3, 673, UNI_SINCE_ZOP, "Compare and Swap (64)", cas)
DEFINE_INSTRUCTION(CSP, RRE_2_e, 1105, UNI_SINCE_ZOP, "Compare and Swap and Purge (32)", cas_like_special, privileged)
DEFINE_INSTRUCTION(CSPG, RRE_2_e, 1105, UNI_SINCE_YOP, "Compare and Swap and Purge (64)", cas_like_special, privileged)
DEFINE_INSTRUCTION(CSST, SSF_3_dr, 675, UNI_SINCE_Z9, "Compare and Swap and Store", cass, has_parameter_list)
DEFINE_INSTRUCTION(CSXTR, RRF_d_3_e, 1629, UNI_SINCE_Z9, "Convert to Signed Packed (128<-extended DFP)")
DEFINE_INSTRUCTION(CSY, RSY_a_3, 673, UNI_SINCE_YOP, "Compare and Swap (32)", cas)
DEFINE_INSTRUCTION(CTZG, RRE_2, 804, UNI_SINCE_Z17, "Count Trailing Zeros")
DEFINE_INSTRUCTION(CU12, RRF_c_3_opt_ee, 795, UNI_SINCE_YOP, "Convert UTF-8 to UTF-16", unicode_convert_8)
DEFINE_INSTRUCTION(CU14, RRF_c_3_opt_ee, 799, UNI_SINCE_YOP, "Convert UTF-8 to UTF-32", unicode_convert_8)
DEFINE_INSTRUCTION(CU21, RRF_c_3_opt_ee, 785, UNI_SINCE_YOP, "Convert UTF-16 to UTF-8", unicode_convert_16)
DEFINE_INSTRUCTION(CU24, RRF_c_3_opt_ee, 782, UNI_SINCE_YOP, "Convert UTF-16 to UTF-32", unicode_convert_16)
DEFINE_INSTRUCTION(CU41, RRE_2_ee, 792, UNI_SINCE_YOP, "Convert UTF-32 to UTF-8", unicode_convert_32)
DEFINE_INSTRUCTION(CU42, RRE_2_ee, 789, UNI_SINCE_YOP, "Convert UTF-32 to UTF-16", unicode_convert_32)
DEFINE_INSTRUCTION(CUDTR, RRE_2, 1629, UNI_SINCE_Z9, "Convert to Unsigned Packed (64<-long DFP)")
DEFINE_INSTRUCTION(CUSE, RRE_2_ee, 696, UNI_ESA_SINCE_ZOP, "Compare until Substring Equal", cuse_special, has_parameter_list)
DEFINE_INSTRUCTION(CUTFU, RRF_c_3_opt_ee, 795, UNI_ESA_SINCE_ZOP, "Convert UTF-8 to Unicode", unicode_convert_8)
DEFINE_INSTRUCTION(CUUTF, RRF_c_3_opt_ee, 785, UNI_ESA_SINCE_ZOP, "Convert Unicode to UTF-8", unicode_convert_16)
DEFINE_INSTRUCTION(CUXTR, RRE_2_ne, 1629, UNI_SINCE_Z9, "Convert to Unsigned Packed (128<-extended DFP)")
DEFINE_INSTRUCTION(CVB, RX_a_2_ux, 780, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Convert to Binary (32)")
DEFINE_INSTRUCTION(CVBG, RXY_a_2, 780, UNI_SINCE_ZOP, "Convert to Binary (64)")
DEFINE_INSTRUCTION(CVBY, RXY_a_2, 780, UNI_SINCE_YOP, "Convert to Binary (32)")
DEFINE_INSTRUCTION(CVD, RX_a_2_ux, 781, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Convert to Decimal (32)")
DEFINE_INSTRUCTION(CVDG, RXY_a_2, 781, UNI_SINCE_ZOP, "Convert to Decimal (64)")
DEFINE_INSTRUCTION(CVDY, RXY_a_2, 781, UNI_SINCE_YOP, "Convert to Decimal (32)")
DEFINE_INSTRUCTION(CXBR, RRE_2, 1569, UNI_ESA_SINCE_ZOP, "Compare (extended BFP)", fp_compare)
DEFINE_INSTRUCTION(CXFBR, RRE_2, 1571, UNI_ESA_SINCE_ZOP, "Convert from Fixed (extended BFP<-32)")
DEFINE_INSTRUCTION(CXFBRA, RRF_e_4, 1571, UNI_SINCE_Z11, "Convert from Fixed (extended BFP<-32)")
DEFINE_INSTRUCTION(CXFR, RRE_2, 1537, UNI_ESA_SINCE_ZOP, "Convert from Fixed (extended HFP<-32)")
DEFINE_INSTRUCTION(CXFTR, RRF_e_4, 1618, UNI_SINCE_Z11, "Convert from Fixed (extended DFP<-32)")
DEFINE_INSTRUCTION(CXGBR, RRE_2, 1571, UNI_SINCE_ZOP, "Convert from Fixed (extended BFP<-64)")
DEFINE_INSTRUCTION(CXGBRA, RRF_e_4, 1571, UNI_SINCE_Z11, "Convert from Fixed (extended BFP<-64)")
DEFINE_INSTRUCTION(CXGR, RRE_2, 1537, UNI_SINCE_ZOP, "Convert from Fixed (extended HFP<-64)")
DEFINE_INSTRUCTION(CXGTR, RRE_2, 1618, UNI_SINCE_Z9, "Convert from Fixed (extended DFP<-64)")
DEFINE_INSTRUCTION(CXGTRA, RRF_e_4, 1618, UNI_SINCE_Z11, "Convert from Fixed (extended DFP<-64)")
DEFINE_INSTRUCTION(CXLFBR, RRF_e_4, 1573, UNI_SINCE_Z11, "Convert from Logical (extended BFP<-32)")
DEFINE_INSTRUCTION(CXLFTR, RRF_e_4, 1619, UNI_SINCE_Z11, "Convert from Logical (extended DFP<-32)")
DEFINE_INSTRUCTION(CXLGBR, RRF_e_4, 1573, UNI_SINCE_Z11, "Convert from Logical (extended BFP<-64)")
DEFINE_INSTRUCTION(CXLGTR, RRF_e_4, 1619, UNI_SINCE_Z11, "Convert from Logical (extended DFP<-64)")
DEFINE_INSTRUCTION(CXPT, RSL_b_3, 1620, UNI_SINCE_Z13, "Convert from Packed (To Extended DFP)")
DEFINE_INSTRUCTION(CXR, RRE_2, 1536, UNI_ESA_SINCE_ZOP, "Compare (extended HFP)", comparison)
DEFINE_INSTRUCTION(CXSTR, RRE_2_ne, 1622, UNI_SINCE_Z9, "Convert from Signed Packed (extended DFP<-128)")
DEFINE_INSTRUCTION(CXTR, RRE_2, 1616, UNI_SINCE_Z9, "Compare (extended DFP)", fp_compare)
DEFINE_INSTRUCTION(CXUTR, RRE_2_ne, 1622, UNI_SINCE_Z9, "Convert from Unsigned Packed (extended DFP<-128)")
DEFINE_INSTRUCTION(CXZT, RSL_b_3, 1623, UNI_SINCE_Z12, "Comvert from Zoned (to extended DFP)")
DEFINE_INSTRUCTION(CY, RXY_a_2, 663, UNI_SINCE_YOP, "Compare (32)", comparison)
DEFINE_INSTRUCTION(CZDT, RSL_b_3, 1630, UNI_SINCE_Z12, "Comvert to Zoned (from long DFP)", fp_conversion)
DEFINE_INSTRUCTION(CZXT, RSL_b_3, 1630, UNI_SINCE_Z12, "Comvert to Zoned (from extended DFP)", fp_conversion)
DEFINE_INSTRUCTION(D, RX_a_2_ux_e, 804, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Divide (32<-64)")
DEFINE_INSTRUCTION(DD, RX_a_2_ux, 1538, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Divide (long HFP)")
DEFINE_INSTRUCTION(DDB, RXE_2, 1579, UNI_ESA_SINCE_ZOP, "Divide (long BFP)")
DEFINE_INSTRUCTION(DDBR, RRE_2, 1579, UNI_ESA_SINCE_ZOP, "Divide (long BFP)")
DEFINE_INSTRUCTION(DDR, RR_2, 1538, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Divide (long HFP)")
DEFINE_INSTRUCTION(DDTR, RRF_a_3, 1631, UNI_SINCE_Z9, "Divide (long DFP)")
DEFINE_INSTRUCTION(DDTRA, RRF_a_4, 1631, UNI_SINCE_Z11, "Divide (long DFP)")
DEFINE_INSTRUCTION(DE, RX_a_2_ux, 1538, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Divide (short HFP)")
DEFINE_INSTRUCTION(DEB, RXE_2, 1579, UNI_ESA_SINCE_ZOP, "Divide (short BFP)")
DEFINE_INSTRUCTION(DEBR, RRE_2, 1579, UNI_ESA_SINCE_ZOP, "Divide (short BFP)")
DEFINE_INSTRUCTION(DER, RR_2, 1538, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Divide (short HFP)")
DEFINE_INSTRUCTION(DFLTCC, RRF_a_3_ee_112, 1838, UNI_SINCE_Z15, "Deflate Conversion Call", dfltcc_special, has_parameter_list)
//DEFINE_INSTRUCTION(DIAGNOSE, DIAGNOSE, 0, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Diagnose", unpredictable, privileged) // undocumented class of instructions
DEFINE_INSTRUCTION(DIDBR, RRF_b_4, 1580, UNI_ESA_SINCE_ZOP, "Divide to Integer (long BFP)", fp_integer_div)
DEFINE_INSTRUCTION(DIEBR, RRF_b_4, 1580, UNI_ESA_SINCE_ZOP, "Divide to Integer (short BFP)", fp_integer_div)
DEFINE_INSTRUCTION(DISCS, S_1_u, 0, UNI_370, "Disconnect Channel Set", old_pop)
DEFINE_INSTRUCTION(DL, RXY_a_2_e, 805, UNI_ESA_SINCE_ZOP, "Divide Logical (32<-64)")
DEFINE_INSTRUCTION(DLG, RXY_a_2_e, 805, UNI_SINCE_ZOP, "Divide Logical (64<-128)")
DEFINE_INSTRUCTION(DLGR, RRE_2_e, 804, UNI_SINCE_ZOP, "Divide Logical (64<-128)")
DEFINE_INSTRUCTION(DLR, RRE_2_e, 804, UNI_ESA_SINCE_ZOP, "Divide Logical (32<-64)")
DEFINE_INSTRUCTION(DP, SS_b_2, 1023, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Divide Decimal")
DEFINE_INSTRUCTION(DR, RR_2_e, 804, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Divide (32<-64)")
DEFINE_INSTRUCTION(DSG, RXY_a_2_e, 805, UNI_SINCE_ZOP, "Divide Single (64)")
DEFINE_INSTRUCTION(DSGF, RXY_a_2_e, 805, UNI_SINCE_ZOP, "Divide Single (64<-32)")
DEFINE_INSTRUCTION(DSGFR, RRE_2_e, 805, UNI_SINCE_ZOP, "Divide Single (64<-32)")
DEFINE_INSTRUCTION(DSGR, RRE_2_e, 805, UNI_SINCE_ZOP, "Divide Single (64)")
DEFINE_INSTRUCTION(DXBR, RRE_2, 1579, UNI_ESA_SINCE_ZOP, "Divide (extended BFP)")
DEFINE_INSTRUCTION(DXR, RRE_2, 1538, UNI_ESA_XA_SINCE_ZOP, "Divide (extended HFP)")
DEFINE_INSTRUCTION(DXTR, RRF_a_3, 1631, UNI_SINCE_Z9, "Divide (extended DFP)")
DEFINE_INSTRUCTION(DXTRA, RRF_a_4, 1631, UNI_SINCE_Z11, "Divide (extended DFP)")
DEFINE_INSTRUCTION(EAR, RRE_2, 809, UNI_ESA_SINCE_ZOP, "Extract Access")
DEFINE_INSTRUCTION(ECAG, RSY_a_3, 809, UNI_SINCE_Z10, "Extract CPU Attribute")
DEFINE_INSTRUCTION(ECCTR, RRE_2, 0, UNI_SINCE_Z10, "Extract Cpu Counter", counter)
DEFINE_INSTRUCTION(ECPGA, RRE_2, 0, UNI_SINCE_Z10, "Extract Coprocessor-Group Address", ecpga_special)
DEFINE_INSTRUCTION(ECTG, SSF_3_dr, 812, UNI_SINCE_Z9, "Extract CPU Time")
DEFINE_INSTRUCTION(ED, SS_a_2_u, 1024, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Edit", edit_special)
DEFINE_INSTRUCTION(EDMK, SS_a_2_u, 1027, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Edit and Mark", edit_special)
DEFINE_INSTRUCTION(EEDTR, RRE_2, 1633, UNI_SINCE_Z9, "Extract Biased Exponent (64<-long DFP)")
DEFINE_INSTRUCTION(EEXTR, RRE_2, 1633, UNI_SINCE_Z9, "Extract Biased Exponent (64<-extended DFP)")
DEFINE_INSTRUCTION(EFPC, RRE_1, 1060, UNI_ESA_SINCE_ZOP, "Extract FPC")
DEFINE_INSTRUCTION(EPAIR, RRE_1, 1109, UNI_SINCE_YOP, "Extract Primary ASN and Instance", privileged_conditionally)
DEFINE_INSTRUCTION(EPAR, RRE_1, 1108, UNI_ESA_XA_370_SINCE_ZOP, "Extract Primary ASN", privileged_conditionally)
DEFINE_INSTRUCTION(EPCTR, RRE_2, 0, UNI_SINCE_Z10, "Extract Peripheral Counter", counter)
DEFINE_INSTRUCTION(EPSW, RRE_2, 813, UNI_ESA_SINCE_ZOP, "Extract PSW")
DEFINE_INSTRUCTION(EREG, RRE_2, 1110, UNI_ESA_SINCE_ZOP, "Extract Stacked Registers (32)")
DEFINE_INSTRUCTION(EREGG, RRE_2, 1110, UNI_SINCE_ZOP, "Extract Stacked Registers (64)")
DEFINE_INSTRUCTION(ESAIR, RRE_1, 1109, UNI_SINCE_YOP, "Extract Secondary ASN and Instance", privileged_conditionally)
DEFINE_INSTRUCTION(ESAR, RRE_1, 1109, UNI_ESA_XA_370_SINCE_ZOP, "Extract Secondary ASN", privileged_conditionally)
DEFINE_INSTRUCTION(ESDTR, RRE_2, 1633, UNI_SINCE_Z9, "Extract Significance (64<-long DFP)")
DEFINE_INSTRUCTION(ESEA, RRE_1, 1108, UNI_SINCE_ZOP, "Extract and Set Extended Authority", privileged)
DEFINE_INSTRUCTION(ESTA, RRE_2_e, 1111, UNI_ESA_SINCE_ZOP, "Extract Stacked State", esta_special)
DEFINE_INSTRUCTION(ESXTR, RRE_2, 1633, UNI_SINCE_Z9, "Extract Significance (64<-extended DFP)")
DEFINE_INSTRUCTION(ETND, RRE_1, 813, UNI_SINCE_Z12, "Extract Transaction Nesting Depth")
DEFINE_INSTRUCTION(EX, RX_a_2_ux, 808, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Execute", execute)
DEFINE_INSTRUCTION(EXRL, RIL_b_2, 808, UNI_SINCE_Z10, "Execute Relative Long", execute)
DEFINE_INSTRUCTION(FIDBR, RRF_e_3, 1584, UNI_ESA_SINCE_ZOP, "Load FP Integer (long BFP)")
DEFINE_INSTRUCTION(FIDBRA, RRF_e_4, 1584, UNI_SINCE_Z11, "Load FP Integer (long BFP)")
DEFINE_INSTRUCTION(FIDR, RRE_2, 1541, UNI_ESA_SINCE_ZOP, "Load FP Integer (long HFP)")
DEFINE_INSTRUCTION(FIDTR, RRF_e_4, 1636, UNI_SINCE_Z9, "Load FP Integer (long DFP)")
DEFINE_INSTRUCTION(FIEBR, RRF_e_3, 1584, UNI_ESA_SINCE_ZOP, "Load FP Integer (short BFP)")
DEFINE_INSTRUCTION(FIEBRA, RRF_e_4, 1584, UNI_SINCE_Z11, "Load FP Integer (short BFP)")
DEFINE_INSTRUCTION(FIER, RRE_2, 1541, UNI_ESA_SINCE_ZOP, "Load FP Integer (short HFP)")
DEFINE_INSTRUCTION(FIXBR, RRF_e_3, 1584, UNI_ESA_SINCE_ZOP, "Load FP Integer (extended BFP)")
DEFINE_INSTRUCTION(FIXBRA, RRF_e_4, 1584, UNI_SINCE_Z11, "Load FP Integer (extended BFP)")
DEFINE_INSTRUCTION(FIXR, RRE_2, 1541, UNI_ESA_SINCE_ZOP, "Load FP Integer (extended HFP)")
DEFINE_INSTRUCTION(FIXTR, RRF_e_4, 1636, UNI_SINCE_Z9, "Load FP Integer (extended DFP)")
DEFINE_INSTRUCTION(FLOGR, RRE_2_e, 813, UNI_SINCE_Z9, "Find Leftmost One", flogr_special)
DEFINE_INSTRUCTION(HDR, RR_2, 1539, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Halve (long HFP)")
DEFINE_INSTRUCTION(HDV, S_1_u, 0, UNI_370_DOS, "Halt Device", old_pop)
DEFINE_INSTRUCTION(HER, RR_2, 1539, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Halve (short HFP)")
DEFINE_INSTRUCTION(HIO, S_1_u, 0, UNI_370_DOS, "Halt I/O", old_pop)
DEFINE_INSTRUCTION(HSCH, S_0, 1334, UNI_ESA_XA_SINCE_ZOP, "Halt Subchannel", halt_subchannel_special, privileged, has_parameter_list)
DEFINE_INSTRUCTION(IAC, RRE_1, 1113, UNI_ESA_XA_370_SINCE_ZOP, "Insert Address Space Control", iac_special, privileged_conditionally)
DEFINE_INSTRUCTION(IC, RX_a_2_ux, 814, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Insert Character")
DEFINE_INSTRUCTION(ICM, RS_b_3, 814, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Insert Characters under Mask (low)", insert_character)
DEFINE_INSTRUCTION(ICMH, RSY_b_3_us, 814, UNI_SINCE_ZOP, "Insert Characters under Mask (high)", insert_character)
DEFINE_INSTRUCTION(ICMY, RSY_b_3_us, 814, UNI_SINCE_YOP, "Insert Characters under Mask (low)", insert_character)
DEFINE_INSTRUCTION(ICY, RXY_a_2, 814, UNI_SINCE_YOP, "Insert Character")
DEFINE_INSTRUCTION(IDTE, RRF_b_4_opt, 1117, UNI_SINCE_YOP, "Invalidate DAT Table Entry", privileged)
DEFINE_INSTRUCTION(IEDTR, RRF_b_3, 1634, UNI_SINCE_Z9, "Insert Biased Exponent (long DFP<-64&long DFP)")
DEFINE_INSTRUCTION(IEXTR, RRF_b_3, 1634, UNI_SINCE_Z9, "Insert Biased Exponent (extended DFP<-64&extended DFP)")
DEFINE_INSTRUCTION(IIHF, RIL_a_2, 815, UNI_SINCE_Z9, "Insert Immediate (high)")
DEFINE_INSTRUCTION(IIHH, RI_a_2_u, 815, UNI_SINCE_ZOP, "Insert Immediate (high high)")
DEFINE_INSTRUCTION(IIHL, RI_a_2_u, 815, UNI_SINCE_ZOP, "Insert Immediate (high low)")
DEFINE_INSTRUCTION(IILF, RIL_a_2, 815, UNI_SINCE_Z9, "Insert Immediate (low)")
DEFINE_INSTRUCTION(IILH, RI_a_2_u, 815, UNI_SINCE_ZOP, "Insert Immediate (low high)")
DEFINE_INSTRUCTION(IILL, RI_a_2_u, 815, UNI_SINCE_ZOP, "Insert Immediate (low low)")
DEFINE_INSTRUCTION(IPK, S_0, 1114, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Insert PSW Key", privileged_conditionally)
DEFINE_INSTRUCTION(IPM, RRE_1, 816, UNI_ESA_XA_SINCE_ZOP, "Insert Program Mask")
DEFINE_INSTRUCTION(IPTE, RRF_a_4_opt, 1122, UNI_ESA_XA_370_SINCE_ZOP, "Invalidate Page Table Entry", privileged)
DEFINE_INSTRUCTION(IRBM, RRE_2, 1114, UNI_SINCE_Z14, "Insert Reference Bits Multiple", privileged)
DEFINE_INSTRUCTION(ISK, RR_2, 0, UNI_370_DOS, "Insert Storage Key")
DEFINE_INSTRUCTION(ISKE, RRE_2, 1115, UNI_ESA_XA_370_SINCE_ZOP, "Insert Storage Key Extended", privileged)
DEFINE_INSTRUCTION(IVSK, RRE_2, 1115, UNI_ESA_XA_370_SINCE_ZOP, "Insert Virtual Storage Key", privileged_conditionally)
DEFINE_INSTRUCTION(KDB, RXE_2, 1570, UNI_ESA_SINCE_ZOP, "Compare and Signal (long BFP)", fp_compare)
DEFINE_INSTRUCTION(KDBR, RRE_2, 1570, UNI_ESA_SINCE_ZOP, "Compare and Signal (long BFP)", fp_compare)
DEFINE_INSTRUCTION(KDSA, RRE_2_ne_01, 1823, UNI_SINCE_Z15, "Compute Digital Signature Authentication", kdsa_special, has_parameter_list)
DEFINE_INSTRUCTION(KDTR, RRE_2, 1617, UNI_SINCE_Z9, "Compare and Signal (long DFP)", fp_compare)
DEFINE_INSTRUCTION(KEB, RXE_2, 1570, UNI_ESA_SINCE_ZOP, "Compare and Signal (short BFP)", fp_compare)
DEFINE_INSTRUCTION(KEBR, RRE_2, 1570, UNI_ESA_SINCE_ZOP, "Compare and Signal (short BFP)", fp_compare)
DEFINE_INSTRUCTION(KIMD, RRE_3_ne_01, 717, UNI_SINCE_Z17, "Compute Intermediate Message Digest", cipher_interruptible, has_parameter_list)
DEFINE_INSTRUCTION(KIMD, RRE_2_ne_01, 717, SINCE_YOP_TILL_Z17, "Compute Intermediate Message Digest", cipher_interruptible, has_parameter_list)
DEFINE_INSTRUCTION(KLMD, RRE_3_ne_01, 732, UNI_SINCE_Z17, "Compute Last Message Digest", cipher_interruptible, has_parameter_list)
DEFINE_INSTRUCTION(KLMD, RRE_2_ne_01, 732, SINCE_YOP_TILL_Z17, "Compute Last Message Digest", cipher_interruptible, has_parameter_list)
DEFINE_INSTRUCTION(KM, RRE_2_ee_11, 568, UNI_SINCE_YOP, "Cipher Message", cipher, has_parameter_list)
DEFINE_INSTRUCTION(KMA, RRF_b_3_eee_111, 600, UNI_SINCE_Z14, "Cipher Message With Authentication", cipher_with_incomplete, has_parameter_list)
DEFINE_INSTRUCTION(KMAC, RRE_2_ne_01, 753, UNI_SINCE_YOP, "Compute Message Authentication Code", cipher, has_parameter_list)
DEFINE_INSTRUCTION(KMC, RRE_2_ee_11, 568, UNI_SINCE_YOP, "Cipher Message with Chaining", cipher, has_parameter_list)
DEFINE_INSTRUCTION(KMCTR, RRF_b_3_eee_111, 633, UNI_SINCE_Z11, "Cipher Message with Counter", cipher, has_parameter_list)
DEFINE_INSTRUCTION(KMF, RRE_2_ee_11, 616, UNI_SINCE_Z11, "Cipher Message with Cipher Feedback", cipher, has_parameter_list)
DEFINE_INSTRUCTION(KMO, RRE_2_ee_11, 647, UNI_SINCE_Z11, "Cipher Message with Output Feedback", cipher, has_parameter_list)
DEFINE_INSTRUCTION(KXBR, RRE_2, 1570, UNI_ESA_SINCE_ZOP, "Compare and Signal (extended BFP)", fp_compare)
DEFINE_INSTRUCTION(KXTR, RRE_2, 1617, UNI_SINCE_Z9, "Compare and Signal (extended DFP)", fp_compare)
DEFINE_INSTRUCTION(L, RX_a_2_ux, 816, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load (32)")
DEFINE_INSTRUCTION(LA, RX_a_2_ux, 817, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Address")
DEFINE_INSTRUCTION(LAA, RSY_a_3, 819, UNI_SINCE_Z11, "Load and Add (32)", arithmetic)
DEFINE_INSTRUCTION(LAAG, RSY_a_3, 819, UNI_SINCE_Z11, "Load and Add (64)", arithmetic)
DEFINE_INSTRUCTION(LAAL, RSY_a_3, 820, UNI_SINCE_Z11, "Load and Add Logical (32)", arithmetic_logical)
DEFINE_INSTRUCTION(LAALG, RSY_a_3, 820, UNI_SINCE_Z11, "Load and Add Logical (64)", arithmetic_logical)
DEFINE_INSTRUCTION(LAE, RX_a_2_ux, 818, UNI_ESA_SINCE_ZOP, "Load Address Extended")
DEFINE_INSTRUCTION(LAEY, RXY_a_2, 818, UNI_SINCE_Z10, "Load Address Extended")
DEFINE_INSTRUCTION(LAM, RS_a_3, 817, UNI_ESA_SINCE_ZOP, "Load Access Multiple")
DEFINE_INSTRUCTION(LAMY, RSY_a_3, 817, UNI_SINCE_YOP, "Load Access Multiple")
DEFINE_INSTRUCTION(LAN, RSY_a_3, 820, UNI_SINCE_Z11, "Load and And (32)", logical)
DEFINE_INSTRUCTION(LANG, RSY_a_3, 820, UNI_SINCE_Z11, "Load and And (64)", logical)
DEFINE_INSTRUCTION(LAO, RSY_a_3, 821, UNI_SINCE_Z11, "Load and Or (32)", logical)
DEFINE_INSTRUCTION(LAOG, RSY_a_3, 822, UNI_SINCE_Z11, "Load and Or (64)", logical)
DEFINE_INSTRUCTION(LARL, RIL_b_2, 819, UNI_ESA_SINCE_ZOP, "Load Address Relative Long")
DEFINE_INSTRUCTION(LASP, SSE_2, 1126, UNI_ESA_XA_370_SINCE_ZOP, "Load Address Space Parameters", lasp_special, privileged)
DEFINE_INSTRUCTION(LAT, RXY_a_2, 823, UNI_SINCE_Z12, "Load and Trap (32)")
DEFINE_INSTRUCTION(LAX, RSY_a_3, 821, UNI_SINCE_Z11, "Load and Exclusive Or (32)", logical)
DEFINE_INSTRUCTION(LAXG, RSY_a_3, 821, UNI_SINCE_Z11, "Load and Exclusive Or (64)", logical)
DEFINE_INSTRUCTION(LAY, RXY_a_2, 817, UNI_SINCE_YOP, "Load Address")
DEFINE_INSTRUCTION(LB, RXY_a_2, 823, UNI_SINCE_YOP, "Load Byte (32<-8)")
DEFINE_INSTRUCTION(LBEAR, S_1_u, 1135, UNI_SINCE_Z16, "Load BEAR", privileged)
DEFINE_INSTRUCTION(LBH, RXY_a_2, 824, UNI_SINCE_Z11, "Load Byte High (32<-8)")
DEFINE_INSTRUCTION(LBR, RRE_2, 823, UNI_SINCE_Z9, "Load Byte (32<-8)")
DEFINE_INSTRUCTION(LCBB, RXE_3_xm, 825, UNI_SINCE_Z13, "Load Count to Block Boundary", lcbb_special)
DEFINE_INSTRUCTION(LCCTL, S_1_u, 0, UNI_SINCE_Z10, "Load CPU-Counter-Set Controls", counter_constrols)
DEFINE_INSTRUCTION(LCDBR, RRE_2, 1583, UNI_ESA_SINCE_ZOP, "Load Complement (long BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(LCDFR, RRE_2, 1061, UNI_SINCE_Z9, "Load Complement (L)")
DEFINE_INSTRUCTION(LCDR, RR_2, 1540, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Complement (long HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(LCEBR, RRE_2, 1583, UNI_ESA_SINCE_ZOP, "Load Complement (short BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(LCER, RR_2, 1540, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Complement (short HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(LCGFR, RRE_2, 824, UNI_SINCE_ZOP, "Load Complement (64<-32)", arithmetic)
DEFINE_INSTRUCTION(LCGR, RRE_2, 824, UNI_SINCE_ZOP, "Load Complement (64)", arithmetic)
DEFINE_INSTRUCTION(LCR, RR_2, 824, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Complement (32)", arithmetic)
DEFINE_INSTRUCTION(LCTL, RS_a_3, 1135, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Control (32)", privileged)
DEFINE_INSTRUCTION(LCTLG, RSY_a_3, 1135, UNI_SINCE_ZOP, "Load Control (64)", privileged)
DEFINE_INSTRUCTION(LCXBR, RRE_2, 1583, UNI_ESA_SINCE_ZOP, "Load Complement (extended BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(LCXR, RRE_2, 1540, UNI_ESA_SINCE_ZOP, "Load Complement (extended HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(LD, RX_a_2_ux, 1061, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load (L)")
DEFINE_INSTRUCTION(LDE, RXE_2, 1541, UNI_ESA_SINCE_ZOP, "Load Lengthened (long HFP<-short HFP)")
DEFINE_INSTRUCTION(LDEB, RXE_2, 1586, UNI_ESA_SINCE_ZOP, "Load Lengthened (long BFP<-short BFP)")
DEFINE_INSTRUCTION(LDEBR, RRE_2, 1585, UNI_ESA_SINCE_ZOP, "Load Lengthened (long BFP<-short BFP)")
DEFINE_INSTRUCTION(LDER, RRE_2, 1541, UNI_ESA_SINCE_ZOP, "Load Lengthened (long HFP<-short HFP)")
DEFINE_INSTRUCTION(LDETR, RRF_d_3, 1639, UNI_SINCE_Z9, "Load Lengthened (long DFP<-short DFP)")
DEFINE_INSTRUCTION(LDGR, RRE_2, 1064, UNI_SINCE_Z9, "Load FPR from GR (L<-64)")
DEFINE_INSTRUCTION(LDR, RR_2, 1061, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load (L)")
DEFINE_INSTRUCTION(LDXBR, RRE_2, 1587, UNI_ESA_SINCE_ZOP, "Load Rounded (long BFP<-extended BFP)")
DEFINE_INSTRUCTION(LDXBRA, RRF_e_4, 1587, UNI_SINCE_Z11, "Load Rounded (long BFP<-extended BFP)")
DEFINE_INSTRUCTION(LDXR, RR_2, 1543, UNI_ESA_SINCE_ZOP, "Load Rounded (long HFP<-extended HFP)")
DEFINE_INSTRUCTION(LDXTR, RRF_e_4, 1640, UNI_SINCE_Z9, "Load Rounded (long DFP<-extended DFP)")
DEFINE_INSTRUCTION(LDY, RXY_a_2, 1061, UNI_SINCE_YOP, "Load (L)")
DEFINE_INSTRUCTION(LE, RX_a_2_ux, 1061, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load (S)")
DEFINE_INSTRUCTION(LEDBR, RRE_2, 1587, UNI_ESA_SINCE_ZOP, "Load Rounded (short BFP<-long BFP)")
DEFINE_INSTRUCTION(LEDBRA, RRF_e_4, 1587, UNI_SINCE_Z11, "Load Rounded (short BFP<-long BFP)")
DEFINE_INSTRUCTION(LEDR, RR_2, 1543, UNI_ESA_SINCE_ZOP, "Load Rounded (short HFP<-long HFP)")
DEFINE_INSTRUCTION(LEDTR, RRF_e_4, 1640, UNI_SINCE_Z9, "Load Rounded (short DFP<-long DFP)")
DEFINE_INSTRUCTION(LER, RR_2, 1061, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load (S)")
DEFINE_INSTRUCTION(LEXBR, RRE_2, 1587, UNI_ESA_SINCE_ZOP, "Load Rounded (short BFP<-extended BFP)")
DEFINE_INSTRUCTION(LEXBRA, RRF_e_4, 1587, UNI_SINCE_Z11, "Load Rounded (short BFP<-extended BFP)")
DEFINE_INSTRUCTION(LEXR, RRE_2, 1543, UNI_ESA_SINCE_ZOP, "Load Rounded (short HFP<-extended HFP)")
DEFINE_INSTRUCTION(LEY, RXY_a_2, 1061, UNI_SINCE_YOP, "Load (S)")
DEFINE_INSTRUCTION(LFAS, S_1_u, 1062, UNI_SINCE_Z9, "Load FPC and Signal")
DEFINE_INSTRUCTION(LFH, RXY_a_2, 829, UNI_SINCE_Z11, "Load High (32)")
DEFINE_INSTRUCTION(LFHAT, RXY_a_2, 829, UNI_SINCE_Z12, "Load and Trap (32H<-32)")
DEFINE_INSTRUCTION(LFPC, S_1_u, 1061, UNI_ESA_SINCE_ZOP, "Load FPC")
DEFINE_INSTRUCTION(LG, RXY_a_2, 816, UNI_SINCE_ZOP, "Load (64)")
DEFINE_INSTRUCTION(LGAT, RXY_a_2, 823, UNI_SINCE_Z12, "Load and Trap (64)")
DEFINE_INSTRUCTION(LGB, RXY_a_2, 824, UNI_SINCE_YOP, "Load Byte (64<-8)")
DEFINE_INSTRUCTION(LGBR, RRE_2, 823, UNI_SINCE_Z9, "Load Byte (64<-8)")
DEFINE_INSTRUCTION(LGDR, RRE_2, 1064, UNI_SINCE_Z9, "Load GR from FPR (64<-L)")
DEFINE_INSTRUCTION(LGF, RXY_a_2, 816, UNI_SINCE_ZOP, "Load (64<-32)")
DEFINE_INSTRUCTION(LGFI, RIL_a_2, 816, UNI_SINCE_Z9, "Load Immediate (64<-32)")
DEFINE_INSTRUCTION(LGFR, RRE_2, 816, UNI_SINCE_ZOP, "Load (64<-32)")
DEFINE_INSTRUCTION(LGFRL, RIL_b_2, 816, UNI_SINCE_Z10, "Load Relative Long (64<-32)")
DEFINE_INSTRUCTION(LGG, RXY_a_2, 825, UNI_SINCE_Z14, "Load Guarded (64)")
DEFINE_INSTRUCTION(LGH, RXY_a_2, 827, UNI_SINCE_ZOP, "Load Halfword (64<-16)")
DEFINE_INSTRUCTION(LGHI, RI_a_2_s, 827, UNI_SINCE_ZOP, "Load Halfword Immediate (64<-16)")
DEFINE_INSTRUCTION(LGHR, RRE_2, 827, UNI_SINCE_Z9, "Load Halfword (64<-16)")
DEFINE_INSTRUCTION(LGHRL, RIL_b_2, 828, UNI_SINCE_Z10, "Load Halfword Relative Long (64<-16)")
DEFINE_INSTRUCTION(LGR, RRE_2, 816, UNI_SINCE_ZOP, "Load (64)")
DEFINE_INSTRUCTION(LGRL, RIL_b_2, 816, UNI_SINCE_Z10, "Load Relative Long (64)")
DEFINE_INSTRUCTION(LGSC, RXY_a_2, 827, UNI_SINCE_Z14, "Load Guarded Storage Controls")
DEFINE_INSTRUCTION(LH, RX_a_2_ux, 827, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Halfword (32<-16)")
DEFINE_INSTRUCTION(LHH, RXY_a_2, 828, UNI_SINCE_Z11, "Load Halfword High (32<-16)")
DEFINE_INSTRUCTION(LHI, RI_a_2_s, 827, UNI_ESA_SINCE_ZOP, "Load Halfword Immediate (32<-16)")
DEFINE_INSTRUCTION(LHR, RRE_2, 827, UNI_SINCE_Z9, "Load Halfword (32<-16)")
DEFINE_INSTRUCTION(LHRL, RIL_b_2, 828, UNI_SINCE_Z10, "Load Halfword Relative Long (32<-16)")
DEFINE_INSTRUCTION(LHY, RXY_a_2, 827, UNI_SINCE_YOP, "Load Halfword (32<-16)")
DEFINE_INSTRUCTION(LLC, RXY_a_2, 833, UNI_SINCE_Z9, "Load Logical Character (32<-8)")
DEFINE_INSTRUCTION(LLCH, RXY_a_2, 833, UNI_SINCE_Z11, "Load Logical Character High (32<-8)")
DEFINE_INSTRUCTION(LLCR, RRE_2, 832, UNI_SINCE_Z9, "Load Logical Character (32<-8)")
DEFINE_INSTRUCTION(LLGC, RXY_a_2, 833, UNI_SINCE_ZOP, "Load Logical Character (64<-8)")
DEFINE_INSTRUCTION(LLGCR, RRE_2, 832, UNI_SINCE_Z9, "Load Logical Character (64<-8)")
DEFINE_INSTRUCTION(LLGF, RXY_a_2, 831, UNI_SINCE_ZOP, "Load Logical (64<-32)")
DEFINE_INSTRUCTION(LLGFAT, RXY_a_2, 832, UNI_SINCE_Z12, "Load and Trap (64<-32)")
DEFINE_INSTRUCTION(LLGFR, RRE_2, 831, UNI_SINCE_ZOP, "Load Logical (64<-32)")
DEFINE_INSTRUCTION(LLGFRL, RIL_b_2, 832, UNI_SINCE_Z10, "Load Logical Relative Long (64<-32)")
DEFINE_INSTRUCTION(LLGFSG, RXY_a_2, 825, UNI_SINCE_Z14, "Load Logical And Shift Guarded")
DEFINE_INSTRUCTION(LLGH, RXY_a_2, 833, UNI_SINCE_ZOP, "Load Logical Halfword (64<-16)")
DEFINE_INSTRUCTION(LLGHR, RRE_2, 833, UNI_SINCE_Z9, "Load Logical Halfword (64<-16)")
DEFINE_INSTRUCTION(LLGHRL, RIL_b_2, 833, UNI_SINCE_Z10, "Load Logical Halfword Relative Long (64<-16)")
DEFINE_INSTRUCTION(LLGT, RXY_a_2, 836, UNI_SINCE_ZOP, "Load Logical Thirty One Bits (64<-31)")
DEFINE_INSTRUCTION(LLGTAT, RXY_a_2, 836, UNI_SINCE_Z12, "Load Logical Thirty One Bits and Trap (64<-31)")
DEFINE_INSTRUCTION(LLGTR, RRE_2, 836, UNI_SINCE_ZOP, "Load Logical Thirty One Bits (64<-31)")
DEFINE_INSTRUCTION(LLH, RXY_a_2, 833, UNI_SINCE_Z9, "Load Logical Halfword (32<-16)")
DEFINE_INSTRUCTION(LLHH, RXY_a_2, 834, UNI_SINCE_Z11, "Load Logical Halfword High (32<-16)")
DEFINE_INSTRUCTION(LLHR, RRE_2, 833, UNI_SINCE_Z9, "Load Logical Halfword (32<-16)")
DEFINE_INSTRUCTION(LLHRL, RIL_b_2, 833, UNI_SINCE_Z10, "Load Logical Halfword Relative Long (32<-16)")
DEFINE_INSTRUCTION(LLIHF, RIL_a_2, 834, UNI_SINCE_Z9, "Load Logical Immediate (high)")
DEFINE_INSTRUCTION(LLIHH, RI_a_2_u, 834, UNI_SINCE_ZOP, "Load Logical Immediate (high high)")
DEFINE_INSTRUCTION(LLIHL, RI_a_2_u, 834, UNI_SINCE_ZOP, "Load Logical Immediate (high low)")
DEFINE_INSTRUCTION(LLILF, RIL_a_2, 834, UNI_SINCE_Z9, "Load Logical Immediate (low)")
DEFINE_INSTRUCTION(LLILH, RI_a_2_u, 834, UNI_SINCE_ZOP, "Load Logical Immediate (low high)")
DEFINE_INSTRUCTION(LLILL, RI_a_2_u, 834, UNI_SINCE_ZOP, "Load Logical Immediate (low low)")
DEFINE_INSTRUCTION(LLXAB, RXY_c_2, 835, UNI_SINCE_Z17, "Load Logical Indexed Address (shift left 0)")
DEFINE_INSTRUCTION(LLXAF, RXY_c_2, 835, UNI_SINCE_Z17, "Load Logical Indexed Address (shift left 2)")
DEFINE_INSTRUCTION(LLXAG, RXY_c_2, 835, UNI_SINCE_Z17, "Load Logical Indexed Address (shift left 3)")
DEFINE_INSTRUCTION(LLXAH, RXY_c_2, 835, UNI_SINCE_Z17, "Load Logical Indexed Address (shift left 1)")
DEFINE_INSTRUCTION(LLXAQ, RXY_c_2, 835, UNI_SINCE_Z17, "Load Logical Indexed Address (shift left 4)")
DEFINE_INSTRUCTION(LLZRGF, RXY_a_2, 832, UNI_SINCE_Z13, "Load Logical and Zero Rightmost Byte (32)")
DEFINE_INSTRUCTION(LM, RS_a_3, 837, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Multiple (32)")
DEFINE_INSTRUCTION(LMD, SS_e_4_rb, 837, UNI_SINCE_ZOP, "Load Multiple Disjoint (64<-32&32)")
DEFINE_INSTRUCTION(LMG, RSY_a_3, 837, UNI_SINCE_ZOP, "Load Multiple (64)")
DEFINE_INSTRUCTION(LMH, RSY_a_3, 838, UNI_SINCE_ZOP, "Load Multiple High")
DEFINE_INSTRUCTION(LMY, RSY_a_3, 837, UNI_SINCE_YOP, "Load Multiple (32)")
DEFINE_INSTRUCTION(LNDBR, RRE_2, 1586, UNI_ESA_SINCE_ZOP, "Load Negative (long BFP)", fp_negative)
DEFINE_INSTRUCTION(LNDFR, RRE_2, 1064, UNI_SINCE_Z9, "Load Negative (L)")
DEFINE_INSTRUCTION(LNDR, RR_2, 1542, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Negative (long HFP)", load_negative)
DEFINE_INSTRUCTION(LNEBR, RRE_2, 1586, UNI_ESA_SINCE_ZOP, "Load Negative (short BFP)", fp_negative)
DEFINE_INSTRUCTION(LNER, RR_2, 1542, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Negative (short HFP)", load_negative)
DEFINE_INSTRUCTION(LNGFR, RRE_2, 838, UNI_SINCE_ZOP, "Load Negative (64<-32)", load_negative)
DEFINE_INSTRUCTION(LNGR, RRE_2, 838, UNI_SINCE_ZOP, "Load Negative (64)", load_negative)
DEFINE_INSTRUCTION(LNR, RR_2, 838, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Negative (32)", load_negative)
DEFINE_INSTRUCTION(LNXBR, RRE_2, 1586, UNI_ESA_SINCE_ZOP, "Load Negative (extended BFP)", fp_negative)
DEFINE_INSTRUCTION(LNXR, RRE_2, 1542, UNI_ESA_SINCE_ZOP, "Load Negative (extended HFP)", load_negative)
DEFINE_INSTRUCTION(LOC, RSY_b_3_su, 839, UNI_SINCE_Z11, "Load on Condition (32)")
DEFINE_INSTRUCTION(LOCFH, RSY_b_3_su, 839, UNI_SINCE_Z13, "Load High on Condition (32)")
DEFINE_INSTRUCTION(LOCFHR, RRF_c_3, 839, UNI_SINCE_Z13, "Load High on Condition (32)")
DEFINE_INSTRUCTION(LOCG, RSY_b_3_su, 839, UNI_SINCE_Z11, "Load on Condition (64)")
DEFINE_INSTRUCTION(LOCGHI, RIE_g_3, 829, UNI_SINCE_Z13, "Load Halfword Immediate on Condition (64<-16)")
DEFINE_INSTRUCTION(LOCGR, RRF_c_3, 838, UNI_SINCE_Z11, "Load on Condition (64)")
DEFINE_INSTRUCTION(LOCHHI, RIE_g_3, 829, UNI_SINCE_Z13, "Load Halfword High Immediate on Condition (32<-16)")
DEFINE_INSTRUCTION(LOCHI, RIE_g_3, 829, UNI_SINCE_Z13, "Load Halfword Immediate on Condition (32<-16)")
DEFINE_INSTRUCTION(LOCR, RRF_c_3, 838, UNI_SINCE_Z11, "Load on Condition (32)")
DEFINE_INSTRUCTION(LPCTL, S_1_u, 0, UNI_SINCE_Z10, "Load Peripheral-Counter-Set Controls", counter_constrols)
DEFINE_INSTRUCTION(LPD, SSF_3_rd_e, 840, UNI_SINCE_Z11, "Load Pair Disjoint (32)", lpd_special)
DEFINE_INSTRUCTION(LPDBR, RRE_2, 1587, UNI_ESA_SINCE_ZOP, "Load Positive (long BFP)", fp_positive)
DEFINE_INSTRUCTION(LPDFR, RRE_2, 1064, UNI_SINCE_Z9, "Load Positive (L)")
DEFINE_INSTRUCTION(LPDG, SSF_3_rd_e, 840, UNI_SINCE_Z11, "Load Pair Disjoint (64)", lpd_special)
DEFINE_INSTRUCTION(LPDR, RR_2, 1542, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Positive (long HFP)", load_positive)
DEFINE_INSTRUCTION(LPEBR, RRE_2, 1587, UNI_ESA_SINCE_ZOP, "Load Positive (short BFP)", fp_positive)
DEFINE_INSTRUCTION(LPER, RR_2, 1542, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Positive (short HFP)", load_positive)
DEFINE_INSTRUCTION(LPGFR, RRE_2, 841, UNI_SINCE_ZOP, "Load Positive (64<-32)", load_positive)
DEFINE_INSTRUCTION(LPGR, RRE_2, 841, UNI_SINCE_ZOP, "Load Positive (64)", load_positive)
DEFINE_INSTRUCTION(LPP, S_1_u, 0, UNI_SINCE_Z10, "Load Program Parameter")
DEFINE_INSTRUCTION(LPQ, RXY_a_2_e, 841, UNI_SINCE_ZOP, "Load Pair from Quadword (64&64<-128)")
DEFINE_INSTRUCTION(LPR, RR_2, 841, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Positive (32)", load_positive)
DEFINE_INSTRUCTION(LPSW, SI_1, 1140, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load PSW", load_psw, privileged, branch_argument_unknown)
DEFINE_INSTRUCTION(LPSWE, S_1_u, 1141, UNI_SINCE_ZOP, "Load PSW Extended", load_psw, privileged, branch_argument_unknown)
DEFINE_INSTRUCTION(LPSWEY, S_1_s, 1141, UNI_SINCE_Z16, "Load PSW Extended", load_psw, privileged, branch_argument_unknown)
DEFINE_INSTRUCTION(LPTEA, RRF_b_4, 1136, UNI_SINCE_Z9, "Load Page-Table-Entry Address", lptea_special, privileged)
DEFINE_INSTRUCTION(LPXBR, RRE_2, 1587, UNI_ESA_SINCE_ZOP, "Load Positive (extended BFP)", fp_positive)
DEFINE_INSTRUCTION(LPXR, RRE_2, 1542, UNI_ESA_SINCE_ZOP, "Load Positive (extended HFP)", load_positive)
DEFINE_INSTRUCTION(LR, RR_2, 816, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load (32)")
DEFINE_INSTRUCTION(LRA, RX_a_2_ux, 1142, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Real Address (32)", load_real_special, privileged)
DEFINE_INSTRUCTION(LRAG, RXY_a_2, 1142, UNI_SINCE_ZOP, "Load Real Address (64)", load_real_special, privileged)
DEFINE_INSTRUCTION(LRAY, RXY_a_2, 1142, UNI_SINCE_YOP, "Load Real Address (32)", load_real_special, privileged)
DEFINE_INSTRUCTION(LRDR, RR_2, 1543, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Rounded (long HFP<-extended HFP)")
DEFINE_INSTRUCTION(LRER, RR_2, 1543, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load Rounded (short HFP<-long HFP)")
DEFINE_INSTRUCTION(LRL, RIL_b_2, 816, UNI_SINCE_Z10, "Load Relative Long (32)")
DEFINE_INSTRUCTION(LRV, RXY_a_2, 842, UNI_ESA_SINCE_ZOP, "Load Reversed (32)")
DEFINE_INSTRUCTION(LRVG, RXY_a_2, 842, UNI_SINCE_ZOP, "Load Reversed (64)")
DEFINE_INSTRUCTION(LRVGR, RRE_2, 842, UNI_SINCE_ZOP, "Load Reversed (64)")
DEFINE_INSTRUCTION(LRVH, RXY_a_2, 842, UNI_ESA_SINCE_ZOP, "Load Reversed (16)")
DEFINE_INSTRUCTION(LRVR, RRE_2, 842, UNI_ESA_SINCE_ZOP, "Load Reversed (32)")
DEFINE_INSTRUCTION(LSCTL, S_1_u, 0, UNI_SINCE_Z10, "Load Sampling Controls", lsctl_special)
DEFINE_INSTRUCTION(LT, RXY_a_2, 822, UNI_SINCE_Z9, "Load and Test (32)", comparison)
DEFINE_INSTRUCTION(LTDBR, RRE_2, 1583, UNI_ESA_SINCE_ZOP, "Load and Test (long BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(LTDR, RR_2, 1539, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load and Test (long HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(LTDTR, RRE_2, 1635, UNI_SINCE_Z9, "Load and Test (long DFP)", fp_arithmetic)
DEFINE_INSTRUCTION(LTEBR, RRE_2, 1583, UNI_ESA_SINCE_ZOP, "Load and Test (short BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(LTER, RR_2, 1539, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load and Test (short HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(LTG, RXY_a_2, 822, UNI_SINCE_Z9, "Load and Test (64)", comparison)
DEFINE_INSTRUCTION(LTGF, RXY_a_2, 822, UNI_SINCE_Z10, "Load And Test (64<-32)", comparison)
DEFINE_INSTRUCTION(LTGFR, RRE_2, 822, UNI_SINCE_ZOP, "Load and Test (64<-32)", comparison)
DEFINE_INSTRUCTION(LTGR, RRE_2, 822, UNI_SINCE_ZOP, "Load and Test (64)", comparison)
DEFINE_INSTRUCTION(LTR, RR_2, 822, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Load and Test (32)", comparison)
DEFINE_INSTRUCTION(LTXBR, RRE_2, 1583, UNI_ESA_SINCE_ZOP, "Load and Test (extended BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(LTXR, RRE_2, 1540, UNI_ESA_SINCE_ZOP, "Load and Test (extended HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(LTXTR, RRE_2, 1635, UNI_SINCE_Z9, "Load and Test (extended DFP)", fp_arithmetic)
DEFINE_INSTRUCTION(LURA, RRE_2, 1146, UNI_ESA_SINCE_ZOP, "Load Using Real Address (32)", privileged)
DEFINE_INSTRUCTION(LURAG, RRE_2, 1147, UNI_SINCE_ZOP, "Load Using Real Address (64)", privileged)
DEFINE_INSTRUCTION(LXAB, RXY_c_2, 830, UNI_SINCE_Z17, "Load Indexed Address (shift left 0)")
DEFINE_INSTRUCTION(LXAF, RXY_c_2, 830, UNI_SINCE_Z17, "Load Indexed Address (shift left 2)")
DEFINE_INSTRUCTION(LXAG, RXY_c_2, 830, UNI_SINCE_Z17, "Load Indexed Address (shift left 3)")
DEFINE_INSTRUCTION(LXAH, RXY_c_2, 830, UNI_SINCE_Z17, "Load Indexed Address (shift left 1)")
DEFINE_INSTRUCTION(LXAQ, RXY_c_2, 830, UNI_SINCE_Z17, "Load Indexed Address (shift left 4)")
DEFINE_INSTRUCTION(LXD, RXE_2, 1541, UNI_ESA_SINCE_ZOP, "Load Lengthened (extended HFP<-long HFP)")
DEFINE_INSTRUCTION(LXDB, RXE_2, 1586, UNI_ESA_SINCE_ZOP, "Load Lengthened (extended BFP<-long BFP)")
DEFINE_INSTRUCTION(LXDBR, RRE_2, 1585, UNI_ESA_SINCE_ZOP, "Load Lengthened (extended BFP<-long BFP)")
DEFINE_INSTRUCTION(LXDR, RRE_2, 1541, UNI_ESA_SINCE_ZOP, "Load Lengthened (extended HFP<-long HFP)")
DEFINE_INSTRUCTION(LXDTR, RRF_d_3, 1639, UNI_SINCE_Z9, "Load Lengthened (extended DFP<-long DFP)")
DEFINE_INSTRUCTION(LXE, RXE_2, 1541, UNI_ESA_SINCE_ZOP, "Load Lengthened (extended HFP<-short HFP)")
DEFINE_INSTRUCTION(LXEB, RXE_2, 1586, UNI_ESA_SINCE_ZOP, "Load Lengthened (extended BFP<-short BFP)")
DEFINE_INSTRUCTION(LXEBR, RRE_2, 1585, UNI_ESA_SINCE_ZOP, "Load Lengthened (extended BFP<-short BFP)")
DEFINE_INSTRUCTION(LXER, RRE_2, 1541, UNI_ESA_SINCE_ZOP, "Load Lengthened (extended HFP<-short HFP)")
DEFINE_INSTRUCTION(LXR, RRE_2, 1061, UNI_ESA_SINCE_ZOP, "Load (E)")
DEFINE_INSTRUCTION(LY, RXY_a_2, 816, UNI_SINCE_YOP, "Load (32)")
DEFINE_INSTRUCTION(LZDR, RRE_1, 1065, UNI_ESA_SINCE_ZOP, "Load Zero (L)")
DEFINE_INSTRUCTION(LZER, RRE_1, 1065, UNI_ESA_SINCE_ZOP, "Load Zero (S)")
DEFINE_INSTRUCTION(LZRF, RXY_a_2, 823, UNI_SINCE_Z13, "Load and Zero Rightmost Byte (32)")
DEFINE_INSTRUCTION(LZRG, RXY_a_2, 823, UNI_SINCE_Z13, "Load and Zero Rightmost Byte (64)")
DEFINE_INSTRUCTION(LZXR, RRE_1, 1065, UNI_ESA_SINCE_ZOP, "Load Zero (E)")
DEFINE_INSTRUCTION(M, RX_a_2_ux_e, 859, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Multiply (64<-32)")
DEFINE_INSTRUCTION(MAD, RXF_3_x, 1545, UNI_SINCE_YOP, "Multiply and Add (long HFP)")
DEFINE_INSTRUCTION(MADB, RXF_3_x, 1590, UNI_ESA_SINCE_ZOP, "Multiply and Add (long BFP)")
DEFINE_INSTRUCTION(MADBR, RRD_3, 1590, UNI_ESA_SINCE_ZOP, "Multiply and Add (long BFP)")
DEFINE_INSTRUCTION(MADR, RRD_3, 1545, UNI_SINCE_YOP, "Multiply and Add (long HFP)")
DEFINE_INSTRUCTION(MAE, RXF_3_x, 1545, UNI_SINCE_YOP, "Multiply and Add (short HFP)")
DEFINE_INSTRUCTION(MAEB, RXF_3_x, 1590, UNI_ESA_SINCE_ZOP, "Multiply and Add (short BFP)")
DEFINE_INSTRUCTION(MAEBR, RRD_3, 1590, UNI_ESA_SINCE_ZOP, "Multiply and Add (short BFP)")
DEFINE_INSTRUCTION(MAER, RRD_3, 1545, UNI_SINCE_YOP, "Multiply and Add (short HFP)")
DEFINE_INSTRUCTION(MAY, RXF_3_x, 1546, UNI_SINCE_Z9, "Multiply and Add Unnormalized (extended HFP<-long HFP)")
DEFINE_INSTRUCTION(MAYH, RXF_3_x, 1546, UNI_SINCE_Z9, "Multiply and Add Unnormalized (EHH<-long HFP)")
DEFINE_INSTRUCTION(MAYHR, RRD_3, 1546, UNI_SINCE_Z9, "Multiply and Add Unnormalized (EHH<-long HFP)")
DEFINE_INSTRUCTION(MAYL, RXF_3_x, 1546, UNI_SINCE_Z9, "Multiply and Add Unnormalized (EHL<-long HFP)")
DEFINE_INSTRUCTION(MAYLR, RRD_3, 1546, UNI_SINCE_Z9, "Multiply and Add Unnormalized (EHL<-long HFP)")
DEFINE_INSTRUCTION(MAYR, RRD_3, 1546, UNI_SINCE_Z9, "Multiply and Add Unnormalized (extended HFP<-long HFP)")
DEFINE_INSTRUCTION(MC, SI_2_s, 843, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Monitor Call")
DEFINE_INSTRUCTION(MD, RX_a_2_ux, 1544, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Multiply (long HFP)")
DEFINE_INSTRUCTION(MDB, RXE_2, 1589, UNI_ESA_SINCE_ZOP, "Multiply (long BFP)")
DEFINE_INSTRUCTION(MDBR, RRE_2, 1589, UNI_ESA_SINCE_ZOP, "Multiply (long BFP)")
DEFINE_INSTRUCTION(MDE, RX_a_2_ux, 1544, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Multiply (long HFP<-short HFP)")
DEFINE_INSTRUCTION(MDEB, RXE_2, 1589, UNI_ESA_SINCE_ZOP, "Multiply (long BFP<-short BFP)")
DEFINE_INSTRUCTION(MDEBR, RRE_2, 1589, UNI_ESA_SINCE_ZOP, "Multiply (long BFP<-short BFP)")
DEFINE_INSTRUCTION(MDER, RR_2, 1543, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Multiply (long HFP<-short HFP)")
DEFINE_INSTRUCTION(MDR, RR_2, 1543, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Multiply (long HFP)")
DEFINE_INSTRUCTION(MDTR, RRF_a_3, 1641, UNI_SINCE_Z9, "Multiply (long DFP)")
DEFINE_INSTRUCTION(MDTRA, RRF_a_4, 1642, UNI_SINCE_Z11, "Multiply (long DFP)")
DEFINE_INSTRUCTION(ME, RX_a_2_ux, 1544, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Multiply (long HFP<-short HFP)")
DEFINE_INSTRUCTION(MEE, RXE_2, 1544, UNI_ESA_SINCE_ZOP, "Multiply (short HFP)")
DEFINE_INSTRUCTION(MEEB, RXE_2, 1589, UNI_ESA_SINCE_ZOP, "Multiply (short BFP)")
DEFINE_INSTRUCTION(MEEBR, RRE_2, 1589, UNI_ESA_SINCE_ZOP, "Multiply (short BFP)")
DEFINE_INSTRUCTION(MEER, RRE_2, 1543, UNI_ESA_SINCE_ZOP, "Multiply (short HFP)")
DEFINE_INSTRUCTION(MER, RR_2, 1544, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Multiply (long HFP<-short HFP)")
DEFINE_INSTRUCTION(MFY, RXY_a_2_e, 859, UNI_SINCE_Z10, "Multiply (64<-32)")
DEFINE_INSTRUCTION(MG, RXY_a_2_e, 859, UNI_SINCE_Z14, "Multiply (128<-64)")
DEFINE_INSTRUCTION(MGH, RXY_a_2, 860, UNI_SINCE_Z14, "Multiply Halfword (64<-16)")
DEFINE_INSTRUCTION(MGHI, RI_a_2_s, 861, UNI_SINCE_ZOP, "Multiply Halfword Immediate (64<-16)")
DEFINE_INSTRUCTION(MGRK, RRF_a_3_e, 859, UNI_SINCE_Z14, "Multiply (128<-64)")
DEFINE_INSTRUCTION(MH, RX_a_2_ux, 860, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Multiply Halfword (32<-16)")
DEFINE_INSTRUCTION(MHI, RI_a_2_s, 861, UNI_ESA_SINCE_ZOP, "Multiply Halfword Immediate (32<-16)")
DEFINE_INSTRUCTION(MHY, RXY_a_2, 860, UNI_SINCE_Z10, "Multiply Halfword (64<-16)")
DEFINE_INSTRUCTION(ML, RXY_a_2_e, 861, UNI_ESA_SINCE_ZOP, "Multiply Logical (64<-32)")
DEFINE_INSTRUCTION(MLG, RXY_a_2_e, 862, UNI_SINCE_ZOP, "Multiply Logical (128<-64)")
DEFINE_INSTRUCTION(MLGR, RRE_2_e, 861, UNI_SINCE_ZOP, "Multiply Logical (128<-64)")
DEFINE_INSTRUCTION(MLR, RRE_2_e, 861, UNI_ESA_SINCE_ZOP, "Multiply Logical (64<-32)")
DEFINE_INSTRUCTION(MP, SS_b_2, 1028, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Multiply Decimal")
DEFINE_INSTRUCTION(MR, RR_2, 859, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Multiply (64<-32)")
DEFINE_INSTRUCTION(MS, RX_a_2_ux, 862, UNI_ESA_SINCE_ZOP, "Multiply Single (32)")
DEFINE_INSTRUCTION(MSC, RXY_a_2, 862, UNI_SINCE_Z14, "Multiply Single (32)", arithmetic)
DEFINE_INSTRUCTION(MSCH, S_1_u, 1335, UNI_ESA_XA_SINCE_ZOP, "Modify Subchannel", channel_special, privileged, has_parameter_list)
DEFINE_INSTRUCTION(MSD, RXF_3_x, 1545, UNI_SINCE_YOP, "Multiply and Subtract (long HFP)")
DEFINE_INSTRUCTION(MSDB, RXF_3_x, 1590, UNI_ESA_SINCE_ZOP, "Multiply and Subtract (long BFP)")
DEFINE_INSTRUCTION(MSDBR, RRD_3, 1590, UNI_ESA_SINCE_ZOP, "Multiply and Subtract (long BFP)")
DEFINE_INSTRUCTION(MSDR, RRD_3, 1545, UNI_SINCE_YOP, "Multiply and Subtract (long HFP)")
DEFINE_INSTRUCTION(MSE, RXF_3_x, 1545, UNI_SINCE_YOP, "Multiply and Subtract (short HFP)")
DEFINE_INSTRUCTION(MSEB, RXF_3_x, 1590, UNI_ESA_SINCE_ZOP, "Multiply and Subtract (short BFP)")
DEFINE_INSTRUCTION(MSEBR, RRD_3, 1590, UNI_ESA_SINCE_ZOP, "Multiply and Subtract (short BFP)")
DEFINE_INSTRUCTION(MSER, RRD_3, 1545, UNI_SINCE_YOP, "Multiply and Subtract (short HFP)")
DEFINE_INSTRUCTION(MSFI, RIL_a_2, 863, UNI_SINCE_Z10, "Multiply Single Immediate (32)")
DEFINE_INSTRUCTION(MSG, RXY_a_2, 862, UNI_SINCE_ZOP, "Multiply Single (64)")
DEFINE_INSTRUCTION(MSGC, RXY_a_2, 862, UNI_SINCE_Z14, "Multiply Single (64)", arithmetic)
DEFINE_INSTRUCTION(MSGF, RXY_a_2, 863, UNI_SINCE_ZOP, "Multiply Single (64<-32)")
DEFINE_INSTRUCTION(MSGFI, RIL_a_2, 863, UNI_SINCE_Z10, "Multiply Single Immediate (64<-32)")
DEFINE_INSTRUCTION(MSGFR, RRE_2, 862, UNI_SINCE_ZOP, "Multiply Single (64<-32)")
DEFINE_INSTRUCTION(MSGR, RRE_2, 862, UNI_SINCE_ZOP, "Multiply Single (64)")
DEFINE_INSTRUCTION(MSGRKC, RRF_a_3, 862, UNI_SINCE_Z14, "Multiply Single (64)", arithmetic)
DEFINE_INSTRUCTION(MSR, RRE_2, 862, UNI_ESA_SINCE_ZOP, "Multiply Single (32)")
DEFINE_INSTRUCTION(MSRKC, RRF_a_3, 862, UNI_SINCE_Z14, "Multiply Single (32)", arithmetic)
DEFINE_INSTRUCTION(MSTA, RRE_1_e, 1147, UNI_ESA_SINCE_ZOP, "Modify Stacked State")
DEFINE_INSTRUCTION(MSY, RXY_a_2, 862, UNI_SINCE_YOP, "Multiply Single (32)")
DEFINE_INSTRUCTION(MVC, SS_a_2_u, 844, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Move (character)")
DEFINE_INSTRUCTION(MVCDK, SSE_2, 1153, UNI_ESA_SINCE_ZOP, "Move with Destination Key", privileged_conditionally, has_parameter_list)
DEFINE_INSTRUCTION(MVCIN, SS_a_2_u, 844, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Move Inverse")
DEFINE_INSTRUCTION(MVCK, SS_d_3, 1154, UNI_ESA_XA_370_SINCE_ZOP, "Move with Key", move_asn, privileged_conditionally)
DEFINE_INSTRUCTION(MVCL, RR_2_ee, 845, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Move Long", mvcl_special)
DEFINE_INSTRUCTION(MVCLE, RS_a_3_ee, 849, UNI_ESA_SINCE_ZOP, "Move Long Extended", mvcle_special)
DEFINE_INSTRUCTION(MVCLU, RSY_a_3_ee, 852, UNI_SINCE_ZOP, "Move Long Unicode", mvcle_special)
DEFINE_INSTRUCTION(MVCOS, SSF_3_dr, 1156, UNI_SINCE_Z9, "Move with Optional Specifications", mvcos_special, privileged_conditionally, has_parameter_list)
DEFINE_INSTRUCTION(MVCP, SS_d_3, 1151, UNI_ESA_XA_370_SINCE_ZOP, "Move to Primary", move_asn, privileged_conditionally)
DEFINE_INSTRUCTION(MVCRL, SSE_2, 856, UNI_SINCE_Z15, "Move Right To Left", has_parameter_list)
DEFINE_INSTRUCTION(MVCS, SS_d_3, 1151, UNI_ESA_XA_370_SINCE_ZOP, "Move to Secondary", move_asn, privileged_conditionally)
DEFINE_INSTRUCTION(MVCSK, SSE_2, 1159, UNI_ESA_SINCE_ZOP, "Move with Source Key", privileged_conditionally, has_parameter_list)
DEFINE_INSTRUCTION(MVGHI, SIL_2_s, 844, UNI_SINCE_Z10, "Move (64<-16)")
DEFINE_INSTRUCTION(MVHHI, SIL_2_s, 844, UNI_SINCE_Z10, "Move (16<-16)")
DEFINE_INSTRUCTION(MVHI, SIL_2_s, 844, UNI_SINCE_Z10, "Move (32<-16)")
DEFINE_INSTRUCTION(MVI, SI_2_u, 844, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Move Immediate")
DEFINE_INSTRUCTION(MVIY, SIY_2_su, 844, UNI_SINCE_YOP, "Move Immediate")
DEFINE_INSTRUCTION(MVN, SS_a_2_u, 855, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Move Numerics")
DEFINE_INSTRUCTION(MVO, SS_b_2, 858, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Move with Offset")
DEFINE_INSTRUCTION(MVPG, RRE_2, 1148, UNI_ESA_SINCE_ZOP, "Move Page", move_page_special, privileged_conditionally, has_parameter_list)
DEFINE_INSTRUCTION(MVST, RRE_2, 857, UNI_ESA_SINCE_ZOP, "Move String", mvst_special, has_parameter_list)
DEFINE_INSTRUCTION(MVZ, SS_a_2_u, 859, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Move Zones")
DEFINE_INSTRUCTION(MXBR, RRE_2, 1589, UNI_ESA_SINCE_ZOP, "Multiply (extended BFP)")
DEFINE_INSTRUCTION(MXD, RX_a_2_ux, 1544, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Multiply (extended HFP<-long HFP)")
DEFINE_INSTRUCTION(MXDB, RXE_2, 1589, UNI_ESA_SINCE_ZOP, "Multiply (extended BFP<-long BFP)")
DEFINE_INSTRUCTION(MXDBR, RRE_2, 1589, UNI_ESA_SINCE_ZOP, "Multiply (extended BFP<-long BFP)")
DEFINE_INSTRUCTION(MXDR, RR_2, 1543, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Multiply (extended HFP<-long HFP)")
DEFINE_INSTRUCTION(MXR, RR_2, 1543, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Multiply (extended HFP)")
DEFINE_INSTRUCTION(MXTR, RRF_a_3, 1641, UNI_SINCE_Z9, "Multiply (extended DFP)")
DEFINE_INSTRUCTION(MXTRA, RRF_a_4, 1642, UNI_SINCE_Z11, "Multiply (extended DFP)")
DEFINE_INSTRUCTION(MY, RXF_3_x, 1548, UNI_SINCE_Z9, "Multiply Unnormalized (extended HFP<-long HFP)")
DEFINE_INSTRUCTION(MYH, RXF_3_x, 1548, UNI_SINCE_Z9, "Multiply Unnormalized (EHH<-long HFP)")
DEFINE_INSTRUCTION(MYHR, RRD_3, 1548, UNI_SINCE_Z9, "Multiply Unnormalized (EHH<-long HFP)")
DEFINE_INSTRUCTION(MYL, RXF_3_x, 1548, UNI_SINCE_Z9, "Multiply Unnormalized (EHL<-long HFP)")
DEFINE_INSTRUCTION(MYLR, RRD_3, 1548, UNI_SINCE_Z9, "Multiply Unnormalized (EHL<-long HFP)")
DEFINE_INSTRUCTION(MYR, RRD_3, 1548, UNI_SINCE_Z9, "Multiply Unnormalized (extended HFP<-long HFP)")
DEFINE_INSTRUCTION(N, RX_a_2_ux, 547, UNI_ESA_XA_370_DOS_SINCE_ZOP, "And (32)", logical)
DEFINE_INSTRUCTION(NC, SS_a_2_u, 548, UNI_ESA_XA_370_DOS_SINCE_ZOP, "And (character)", logical)
DEFINE_INSTRUCTION(NCGRK, RRF_a_3, 549, UNI_SINCE_Z15, "And With Complement (64)", logical)
DEFINE_INSTRUCTION(NCRK, RRF_a_3, 549, UNI_SINCE_Z15, "And With Complement (32)", logical)
DEFINE_INSTRUCTION(NG, RXY_a_2, 547, UNI_SINCE_ZOP, "And (64)", logical)
DEFINE_INSTRUCTION(NGR, RRE_2, 547, UNI_SINCE_ZOP, "And (64)", logical)
DEFINE_INSTRUCTION(NGRK, RRF_a_3, 547, UNI_SINCE_Z11, "And (64)", logical)
DEFINE_INSTRUCTION(NI, SI_2_u, 547, UNI_ESA_XA_370_DOS_SINCE_ZOP, "And Immediate", logical)
DEFINE_INSTRUCTION(NIAI, IE_2, 864, UNI_SINCE_Z12, "Next Instruction Access Intent")
DEFINE_INSTRUCTION(NIHF, RIL_a_2, 548, UNI_SINCE_Z9, "And Immediate (high)", logical)
DEFINE_INSTRUCTION(NIHH, RI_a_2_u, 548, UNI_SINCE_ZOP, "And Immediate (high high)", logical)
DEFINE_INSTRUCTION(NIHL, RI_a_2_u, 548, UNI_SINCE_ZOP, "And Immediate (high low)", logical)
DEFINE_INSTRUCTION(NILF, RIL_a_2, 549, UNI_SINCE_Z9, "And Immediate (low)", logical)
DEFINE_INSTRUCTION(NILH, RI_a_2_u, 549, UNI_SINCE_ZOP, "And Immediate (low high)", logical)
DEFINE_INSTRUCTION(NILL, RI_a_2_u, 549, UNI_SINCE_ZOP, "And Immediate (low low)", logical)
DEFINE_INSTRUCTION(NIY, SIY_2_su, 547, UNI_SINCE_YOP, "And Immediate", logical)
DEFINE_INSTRUCTION(NNGRK, RRF_a_3, 864, UNI_SINCE_Z15, "Nand (64)", logical)
DEFINE_INSTRUCTION(NNPA, RRE_0, 1882, UNI_SINCE_Z16, "Neural Network Processing Assist", nnpa_special, has_parameter_list)
DEFINE_INSTRUCTION(NNRK, RRF_a_3, 864, UNI_SINCE_Z15, "Nand (32)", logical)
DEFINE_INSTRUCTION(NOGRK, RRF_a_3, 866, UNI_SINCE_Z15, "Nor (64)", logical)
DEFINE_INSTRUCTION(NORK, RRF_a_3, 866, UNI_SINCE_Z15, "Nor (32)", logical)
DEFINE_INSTRUCTION(NR, RR_2, 547, UNI_ESA_XA_370_DOS_SINCE_ZOP, "And (32)", logical)
DEFINE_INSTRUCTION(NRK, RRF_a_3, 547, UNI_SINCE_Z11, "And (32)", logical)
DEFINE_INSTRUCTION(NTSTG, RXY_a_2, 866, UNI_SINCE_Z12, "Nontransactional Store (64)")
DEFINE_INSTRUCTION(NXGRK, RRF_a_3, 867, UNI_SINCE_Z15, "Not Exclusive Or (64)", logical)
DEFINE_INSTRUCTION(NXRK, RRF_a_3, 867, UNI_SINCE_Z15, "Not Exclusive Or (32)", logical)
DEFINE_INSTRUCTION(NY, RXY_a_2, 547, UNI_SINCE_YOP, "And (32)", logical)
DEFINE_INSTRUCTION(O, RX_a_2_ux, 867, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Or (32)", logical)
DEFINE_INSTRUCTION(OC, SS_a_2_u, 868, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Or (character)", logical)
DEFINE_INSTRUCTION(OCGRK, RRF_a_3, 869, UNI_SINCE_Z15, "Or With Complement (64)", logical)
DEFINE_INSTRUCTION(OCRK, RRF_a_3, 869, UNI_SINCE_Z15, "Or With Complement (32)", logical)
DEFINE_INSTRUCTION(OG, RXY_a_2, 867, UNI_SINCE_ZOP, "Or (64)", logical)
DEFINE_INSTRUCTION(OGR, RRE_2, 867, UNI_SINCE_ZOP, "Or (64)", logical)
DEFINE_INSTRUCTION(OGRK, RRF_a_3, 867, UNI_SINCE_Z11, "Or (64)", logical)
DEFINE_INSTRUCTION(OI, SI_2_u, 867, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Or Immediate", logical)
DEFINE_INSTRUCTION(OIHF, RIL_a_2, 868, UNI_SINCE_Z9, "Or Immediate (high)", logical)
DEFINE_INSTRUCTION(OIHH, RI_a_2_u, 868, UNI_SINCE_ZOP, "Or Immediate (high high)", logical)
DEFINE_INSTRUCTION(OIHL, RI_a_2_u, 868, UNI_SINCE_ZOP, "Or Immediate (high low)", logical)
DEFINE_INSTRUCTION(OILF, RIL_a_2, 868, UNI_SINCE_Z9, "Or Immediate (low)", logical)
DEFINE_INSTRUCTION(OILH, RI_a_2_u, 869, UNI_SINCE_ZOP, "Or Immediate (low high)", logical)
DEFINE_INSTRUCTION(OILL, RI_a_2_u, 869, UNI_SINCE_ZOP, "Or Immediate (low low)", logical)
DEFINE_INSTRUCTION(OIY, SIY_2_su, 867, UNI_SINCE_YOP, "Or Immediate", logical)
DEFINE_INSTRUCTION(OR, RR_2, 867, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Or (32)", logical)
DEFINE_INSTRUCTION(ORK, RRF_a_3, 867, UNI_SINCE_Z11, "Or (32)", logical)
DEFINE_INSTRUCTION(OY, RXY_a_2, 867, UNI_SINCE_YOP, "Or (32)", logical)
DEFINE_INSTRUCTION(PACK, SS_b_2, 869, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Pack")
DEFINE_INSTRUCTION(PALB, RRE_0, 1209, UNI_ESA_SINCE_ZOP, "Purge ALB", privileged)
DEFINE_INSTRUCTION(PC, S_1_u, 1183, UNI_ESA_XA_370_SINCE_ZOP, "Program Call", privileged_conditionally, branch_argument_unknown)
DEFINE_INSTRUCTION(PCC, RRE_0, 872, UNI_SINCE_Z11, "Perform Cryptographic Computation", pcc_special)
DEFINE_INSTRUCTION(PCKMO, RRE_0, 1162, UNI_SINCE_Z10, "Perform Crypto. Key Mgmt. Operations", privileged, has_parameter_list)
// DEFINE_INSTRUCTION(PFCR, RSY_a_3, 0, UNI_SINCE_Z17, "Perform functions with concurrent results") // removed before GA
DEFINE_INSTRUCTION(PFD, RXY_b_2, 938, UNI_SINCE_Z10, "Prefetch Data")
DEFINE_INSTRUCTION(PFDRL, RIL_c_2, 939, UNI_SINCE_Z10, "Prefetch Data Relative Long")
DEFINE_INSTRUCTION(PFMF, RRE_2, 1170, UNI_SINCE_Z10, "Perform Frame Management Function", privileged)
DEFINE_INSTRUCTION(PFPO, E_0, 1065, UNI_SINCE_Z9, "Perform Floating-Point Operation", pfpo_special, has_parameter_list)
DEFINE_INSTRUCTION(PGIN, RRE_2, 1160, UNI_ESA_SINCE_ZOP, "Page In", privileged, pagein_special)
DEFINE_INSTRUCTION(PGOUT, RRE_2, 1161, UNI_ESA_SINCE_ZOP, "Page Out", privileged, pageout_special)
DEFINE_INSTRUCTION(PKA, SS_f_2, 870, UNI_SINCE_ZOP, "Pack ASCII")
DEFINE_INSTRUCTION(PKU, SS_f_2, 871, UNI_SINCE_ZOP, "Pack Unicode")
DEFINE_INSTRUCTION(PLO, SS_e_4_br, 893, UNI_ESA_SINCE_ZOP, "Perform Locked Operation", plo_special, has_parameter_list)
DEFINE_INSTRUCTION(POPCNT, RRF_c_3_opt, 938, UNI_SINCE_Z11, "Population Count", logical)
DEFINE_INSTRUCTION(PPA, RRF_c_3, 922, UNI_SINCE_Z12, "Perform Processor Assist")
DEFINE_INSTRUCTION(PPNO, RRE_2_ee_11, 923, UNI_SINCE_Z12, "Perform Pseudorandom Number Operation", cipher_interruptible, has_parameter_list)
DEFINE_INSTRUCTION(PR, E_0, 1196, UNI_ESA_SINCE_ZOP, "Program Return", branch_argument_unknown)
DEFINE_INSTRUCTION(PRNO, RRE_2_ee_11, 923, UNI_SINCE_Z14, "Perform Random Number Operation", cipher_interruptible, has_parameter_list)
DEFINE_INSTRUCTION(PT, RRE_2, 1200, UNI_ESA_XA_370_SINCE_ZOP, "Program Transfer", privileged_conditionally, branch_argument_unknown)
DEFINE_INSTRUCTION(PTF, RRE_1, 1182, UNI_SINCE_Z10, "Perform Topology Function", ptf_special, privileged)
DEFINE_INSTRUCTION(PTFF, E_0, 1174, UNI_SINCE_Z9, "Perform Timing-Facility Function", ptff_special, privileged, has_parameter_list)
DEFINE_INSTRUCTION(PTI, RRE_2, 1200, UNI_SINCE_YOP, "Program Transfer with Instance", privileged_conditionally, branch_argument_unknown)
DEFINE_INSTRUCTION(PTLB, S_0, 1209, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Purge TLB", privileged)
DEFINE_INSTRUCTION(QADTR, RRF_b_4, 1643, UNI_SINCE_Z9, "Quantize (long DFP)")
DEFINE_INSTRUCTION(QAXTR, RRF_b_4, 1643, UNI_SINCE_Z9, "Quantize (extended DFP)")
DEFINE_INSTRUCTION(QCTRI, S_1_u, 0, UNI_SINCE_Z10, "Query Counter Information")
DEFINE_INSTRUCTION(QPACI, S_1_u, 1209, UNI_SINCE_Z16, "Query Processor Activity Counter Information", qpaci_special, privileged)
DEFINE_INSTRUCTION(QSI, S_1_u, 0, UNI_SINCE_Z10, "Query Sampling Information")
DEFINE_INSTRUCTION(RCHP, S_0, 1337, UNI_ESA_XA_SINCE_ZOP, "Reset Channel Path", rchp_special, privileged, has_parameter_list)
DEFINE_INSTRUCTION(RDD, SI_2_u, 0, UNI_370, "Read Direct", old_pop)
DEFINE_INSTRUCTION(RDP, RRF_b_4_opt, 1210, UNI_SINCE_Z16, "Reset DAT Protection", privileged)
DEFINE_INSTRUCTION(RIO, S_1_u, 0, UNI_370, "Resume I/O", old_pop)
DEFINE_INSTRUCTION(RISBG, RIE_f_5, 942, UNI_SINCE_Z10, "Rotate then Insert Selected Bits (64)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(RISBGN, RIE_f_5, 942, UNI_SINCE_Z12, "Rotate then Insert Selected Bits (64)")
DEFINE_INSTRUCTION(RISBHG, RIE_f_5, 944, UNI_SINCE_Z11, "Rotate then Insert Selected Bits High (32)")
DEFINE_INSTRUCTION(RISBLG, RIE_f_5, 944, UNI_SINCE_Z11, "Rotate then Insert Selected Bits Low (32)")
DEFINE_INSTRUCTION(RLL, RSY_a_3, 940, UNI_ESA_SINCE_ZOP, "Rotate Left Single Logical (32)")
DEFINE_INSTRUCTION(RLLG, RSY_a_3, 940, UNI_SINCE_ZOP, "Rotate Left Single Logical (64)")
DEFINE_INSTRUCTION(RNSBG, RIE_f_5, 941, UNI_SINCE_Z10, "Rotate then And Selected Bits (64)", logical)
DEFINE_INSTRUCTION(ROSBG, RIE_f_5, 941, UNI_SINCE_Z10, "Rotate then Or Selected Bits (64)", logical)
DEFINE_INSTRUCTION(RP, S_1_u, 1213, UNI_ESA_SINCE_ZOP, "Resume Program", load_psw, privileged_conditionally, branch_argument_unknown)
DEFINE_INSTRUCTION(RRB, S_1_u, 0, UNI_370_DOS, "Reset Reference Bit", old_pop)
DEFINE_INSTRUCTION(RRBE, RRE_2, 1212, UNI_ESA_XA_370_SINCE_ZOP, "Reset Reference Bit Extended", rrbe_special, privileged)
DEFINE_INSTRUCTION(RRBM, RRE_2, 1213, UNI_SINCE_Z11, "Reset Reference Bits Multiple", privileged)
DEFINE_INSTRUCTION(RRDTR, RRF_b_4, 1646, UNI_SINCE_Z9, "Reround (long DFP)")
DEFINE_INSTRUCTION(RRXTR, RRF_b_4, 1646, UNI_SINCE_Z9, "Reround (extended DFP)")
DEFINE_INSTRUCTION(RSCH, S_0, 1338, UNI_ESA_XA_SINCE_ZOP, "Resume Subchannel", rsch_special, privileged, has_parameter_list)
DEFINE_INSTRUCTION(RXSBG, RIE_f_5, 941, UNI_SINCE_Z10, "Rotate then Exclusive Or Selected Bits (64)", logical)
DEFINE_INSTRUCTION(S, RX_a_2_ux, 968, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract (32)", arithmetic)
DEFINE_INSTRUCTION(SAC, S_1_u, 1216, UNI_ESA_XA_370_SINCE_ZOP, "Set Address Space Control", privileged_conditionally)
DEFINE_INSTRUCTION(SACF, S_1_u, 1216, UNI_ESA_SINCE_ZOP, "Set Address Space Control Fast", privileged_conditionally)
DEFINE_INSTRUCTION(SAL, S_0, 1340, UNI_ESA_XA_SINCE_ZOP, "Set Address Limit", privileged, has_parameter_list)
DEFINE_INSTRUCTION(SAM24, E_0, 950, UNI_ESA_SINCE_ZOP, "Set Addressing Mode (24)")
DEFINE_INSTRUCTION(SAM31, E_0, 950, UNI_ESA_SINCE_ZOP, "Set Addressing Mode (31)")
DEFINE_INSTRUCTION(SAM64, E_0, 950, UNI_SINCE_ZOP, "Set Addressing Mode (64)")
DEFINE_INSTRUCTION(SAR, RRE_2, 950, UNI_ESA_SINCE_ZOP, "Set Access")
DEFINE_INSTRUCTION(SCCTR, RRE_2, 0, UNI_SINCE_Z10, "Set CPU Counter", counter)
DEFINE_INSTRUCTION(SCHM, S_0, 1341, UNI_ESA_XA_SINCE_ZOP, "Set Channel Monitor", privileged, has_parameter_list)
DEFINE_INSTRUCTION(SCK, S_1_u, 1217, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Set Clock", sck_special, privileged)
DEFINE_INSTRUCTION(SCKC, S_1_u, 1218, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Set Clock Comparator", privileged)
DEFINE_INSTRUCTION(SCKPF, E_0, 1219, UNI_ESA_SINCE_ZOP, "Set Clock Programmable Field", privileged, has_parameter_list)
DEFINE_INSTRUCTION(SD, RX_a_2_ux, 1550, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract Normalized (long HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(SDB, RXE_2, 1592, UNI_ESA_SINCE_ZOP, "Subtract (long BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(SDBR, RRE_2, 1592, UNI_ESA_SINCE_ZOP, "Subtract (long BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(SDR, RR_2, 1550, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract Normalized (long HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(SDTR, RRF_a_3, 1649, UNI_SINCE_Z9, "Subtract (long DFP)", fp_arithmetic)
DEFINE_INSTRUCTION(SDTRA, RRF_a_4, 1649, UNI_SINCE_Z11, "Subtract (long DFP)", fp_arithmetic)
DEFINE_INSTRUCTION(SE, RX_a_2_ux, 1550, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract Normalized (short HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(SEB, RXE_2, 1592, UNI_ESA_SINCE_ZOP, "Subtract (short BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(SEBR, RRE_2, 1592, UNI_ESA_SINCE_ZOP, "Subtract (short BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(SELFHR, RRF_a_4, 949, UNI_SINCE_Z15, "Select High (32)")
DEFINE_INSTRUCTION(SELGR, RRF_a_4, 949, UNI_SINCE_Z15, "Select (64)")
DEFINE_INSTRUCTION(SELR, RRF_a_4, 949, UNI_SINCE_Z15, "Select (32)")
DEFINE_INSTRUCTION(SER, RR_2, 1550, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract Normalized (short HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(SFASR, RRE_1, 1078, UNI_SINCE_Z9, "Set FPC and Signal")
DEFINE_INSTRUCTION(SFPC, RRE_1, 1077, UNI_ESA_SINCE_ZOP, "Set FPC")
DEFINE_INSTRUCTION(SG, RXY_a_2, 968, UNI_SINCE_ZOP, "Subtract (64)", arithmetic)
DEFINE_INSTRUCTION(SGF, RXY_a_2, 968, UNI_SINCE_ZOP, "Subtract (64<-32)", arithmetic)
DEFINE_INSTRUCTION(SGFR, RRE_2, 967, UNI_SINCE_ZOP, "Subtract (64<-32)", arithmetic)
DEFINE_INSTRUCTION(SGH, RXY_a_2, 968, UNI_SINCE_Z14, "Subtract Halfword (64<-16)", arithmetic)
DEFINE_INSTRUCTION(SGR, RRE_2, 967, UNI_SINCE_ZOP, "Subtract (64)", arithmetic)
DEFINE_INSTRUCTION(SGRK, RRF_a_3, 967, UNI_SINCE_Z11, "Subtract (64)", arithmetic)
DEFINE_INSTRUCTION(SH, RX_a_2_ux, 968, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract Halfword (32<-16)", arithmetic)
DEFINE_INSTRUCTION(SHHHR, RRF_a_3, 969, UNI_SINCE_Z11, "Subtract High (32)", arithmetic)
DEFINE_INSTRUCTION(SHHLR, RRF_a_3, 969, UNI_SINCE_Z11, "Subtract High (32)", arithmetic)
DEFINE_INSTRUCTION(SHY, RXY_a_2, 968, UNI_SINCE_YOP, "Subtract Halfword (32<-16)", arithmetic)
DEFINE_INSTRUCTION(SIE, S_1_u, 0, UNI_ESA_XA_SINCE_ZOP, "Start Interpretive Execution", not_documented)
DEFINE_INSTRUCTION(SIGP, RS_a_3, 1229, UNI_ESA_XA_370_SINCE_ZOP, "Signal Processor", signal_special, privileged)
DEFINE_INSTRUCTION(SIO, S_1_u, 0, UNI_370_DOS, "Start I/O", old_pop)
DEFINE_INSTRUCTION(SIOF, S_1_u, 0, UNI_370_DOS, "Start I/O Fast Release", old_pop)
DEFINE_INSTRUCTION(SL, RX_a_2_ux, 969, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract Logical (32)", subtract_logical)
DEFINE_INSTRUCTION(SLA, RS_a_2, 952, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Shift Left Single (32)", arithmetic)
DEFINE_INSTRUCTION(SLAG, RSY_a_3, 952, UNI_SINCE_ZOP, "Shift Left Single (64)", arithmetic)
DEFINE_INSTRUCTION(SLAK, RSY_a_3, 952, UNI_SINCE_Z11, "Shift Left Single (32)", arithmetic)
DEFINE_INSTRUCTION(SLB, RXY_a_2, 971, UNI_ESA_SINCE_ZOP, "Subtract Logical with Borrow (32)", subtract_logical_borrow)
DEFINE_INSTRUCTION(SLBG, RXY_a_2, 971, UNI_SINCE_ZOP, "Subtract Logical with Borrow (64)", subtract_logical_borrow)
DEFINE_INSTRUCTION(SLBGR, RRE_2, 971, UNI_SINCE_ZOP, "Subtract Logical with Borrow (64)", subtract_logical_borrow)
DEFINE_INSTRUCTION(SLBR, RRE_2, 971, UNI_ESA_SINCE_ZOP, "Subtract Logical with Borrow (32)", subtract_logical_borrow)
DEFINE_INSTRUCTION(SLDA, RS_a_2_e, 951, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Shift Left Double (64)", arithmetic)
DEFINE_INSTRUCTION(SLDL, RS_a_2_e, 952, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Shift Left Double Logical (64)")
DEFINE_INSTRUCTION(SLDT, RXF_3_x, 1648, UNI_SINCE_Z9, "Shift Significand Left (long DFP)")
DEFINE_INSTRUCTION(SLFI, RIL_a_2, 970, UNI_SINCE_Z9, "Subtract Logical Immediate (32)", subtract_logical)
DEFINE_INSTRUCTION(SLG, RXY_a_2, 970, UNI_SINCE_ZOP, "Subtract Logical (64)", subtract_logical)
DEFINE_INSTRUCTION(SLGF, RXY_a_2, 970, UNI_SINCE_ZOP, "Subtract Logical (64<-32)", subtract_logical)
DEFINE_INSTRUCTION(SLGFI, RIL_a_2, 970, UNI_SINCE_Z9, "Subtract Logical Immediate (64<-32)", subtract_logical)
DEFINE_INSTRUCTION(SLGFR, RRE_2, 969, UNI_SINCE_ZOP, "Subtract Logical (64<-32)", subtract_logical)
DEFINE_INSTRUCTION(SLGR, RRE_2, 969, UNI_SINCE_ZOP, "Subtract Logical (64)", subtract_logical)
DEFINE_INSTRUCTION(SLGRK, RRF_a_3, 969, UNI_SINCE_Z11, "Subtract Logical (64)", subtract_logical)
DEFINE_INSTRUCTION(SLHHHR, RRF_a_3, 970, UNI_SINCE_Z11, "Subtract Logical High (32)", subtract_logical)
DEFINE_INSTRUCTION(SLHHLR, RRF_a_3, 970, UNI_SINCE_Z11, "Subtract Logical High (32)", subtract_logical)
DEFINE_INSTRUCTION(SLL, RS_a_2, 953, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Shift Left Single Logical (32)")
DEFINE_INSTRUCTION(SLLG, RSY_a_3, 953, UNI_SINCE_ZOP, "Shift Left Single Logical (64)")
DEFINE_INSTRUCTION(SLLK, RSY_a_3, 953, UNI_SINCE_Z11, "Shift Left Single Logical (32)")
DEFINE_INSTRUCTION(SLR, RR_2, 969, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract Logical (32)", subtract_logical)
DEFINE_INSTRUCTION(SLRK, RRF_a_3, 969, UNI_SINCE_Z11, "Subtract Logical (32)", subtract_logical)
DEFINE_INSTRUCTION(SLXT, RXF_3_x, 1648, UNI_SINCE_Z9, "Shift Significand Left (extended DFP)")
DEFINE_INSTRUCTION(SLY, RXY_a_2, 969, UNI_SINCE_YOP, "Subtract Logical (32)", subtract_logical)
DEFINE_INSTRUCTION(SORTL, RRE_2_ee_11, 1939, UNI_SINCE_Z15, "Sort Lists", sortl_special, has_parameter_list)
DEFINE_INSTRUCTION(SP, SS_b_2, 1029, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract Decimal", arithmetic)
DEFINE_INSTRUCTION(SPCTR, RRE_2, 0, UNI_SINCE_Z10, "Set Peripheral Counter", counter)
DEFINE_INSTRUCTION(SPKA, S_1_u, 1220, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Set PSW Key from Address", privileged_conditionally)
DEFINE_INSTRUCTION(SPM, RR_1, 951, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Set Program Mask", spm_special)
DEFINE_INSTRUCTION(SPT, S_1_u, 1219, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Set CPU Timer", privileged)
DEFINE_INSTRUCTION(SPX, S_1_u, 1219, UNI_ESA_XA_370_SINCE_ZOP, "Set Prefix", privileged)
DEFINE_INSTRUCTION(SQD, RXE_2, 1549, UNI_ESA_SINCE_ZOP, "Square Root (long HFP)")
DEFINE_INSTRUCTION(SQDB, RXE_2, 1592, UNI_ESA_SINCE_ZOP, "Square Root (long BFP)")
DEFINE_INSTRUCTION(SQDBR, RRE_2, 1592, UNI_ESA_SINCE_ZOP, "Square Root (long BFP)")
DEFINE_INSTRUCTION(SQDR, RRE_2, 1549, UNI_ESA_XA_SINCE_ZOP, "Square Root (long HFP)")
DEFINE_INSTRUCTION(SQE, RXE_2, 1549, UNI_ESA_SINCE_ZOP, "Square Root (short HFP)")
DEFINE_INSTRUCTION(SQEB, RXE_2, 1592, UNI_ESA_SINCE_ZOP, "Square Root (short BFP)")
DEFINE_INSTRUCTION(SQEBR, RRE_2, 1592, UNI_ESA_SINCE_ZOP, "Square Root (short BFP)")
DEFINE_INSTRUCTION(SQER, RRE_2, 1549, UNI_ESA_XA_SINCE_ZOP, "Square Root (short HFP)")
DEFINE_INSTRUCTION(SQXBR, RRE_2, 1592, UNI_ESA_SINCE_ZOP, "Square Root (extended BFP)")
DEFINE_INSTRUCTION(SQXR, RRE_2, 1549, UNI_ESA_SINCE_ZOP, "Square Root (extended HFP)")
DEFINE_INSTRUCTION(SR, RR_2, 967, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract (32)", arithmetic)
DEFINE_INSTRUCTION(SRA, RS_a_2, 955, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Shift Right Single (32)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(SRAG, RSY_a_3, 955, UNI_SINCE_ZOP, "Shift Right Single (64)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(SRAK, RSY_a_3, 955, UNI_SINCE_Z11, "Shift Right Single (32)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(SRDA, RS_a_2_e, 954, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Shift Right Double (64)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(SRDL, RS_a_2_e, 955, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Shift Right Double Logical (64)")
DEFINE_INSTRUCTION(SRDT, RXF_3_x, 1648, UNI_SINCE_Z9, "Shift Significand Right (long DFP)")
DEFINE_INSTRUCTION(SRK, RRF_a_3, 967, UNI_SINCE_Z11, "Subtract (32)", arithmetic)
DEFINE_INSTRUCTION(SRL, RS_a_2, 956, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Shift Right Single Logical (32)")
DEFINE_INSTRUCTION(SRLG, RSY_a_3, 956, UNI_SINCE_ZOP, "Shift Right Single Logical (64)")
DEFINE_INSTRUCTION(SRLK, RSY_a_3, 956, UNI_SINCE_Z11, "Shift Right Single Logical (32)")
DEFINE_INSTRUCTION(SRNM, S_1_u, 1077, UNI_ESA_SINCE_ZOP, "Set BFP Rounding Mode (2 bit)")
DEFINE_INSTRUCTION(SRNMB, S_1_u, 1077, UNI_SINCE_Z11, "Set BFP Rounding Mode (3 bit)")
DEFINE_INSTRUCTION(SRNMT, S_1_u, 1077, UNI_SINCE_Z9, "Set DFP Rounding Mode")
DEFINE_INSTRUCTION(SRP, SS_c_3, 1028, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Shift and Round Decimal", arithmetic)
DEFINE_INSTRUCTION(SRST, RRE_2, 946, UNI_ESA_SINCE_ZOP, "Search String", string_search)
DEFINE_INSTRUCTION(SRSTU, RRE_2, 947, UNI_SINCE_YOP, "Search String Unicode", string_search)
DEFINE_INSTRUCTION(SRXT, RXF_3_x, 1648, UNI_SINCE_Z9, "Shift Significand Right (extended DFP)")
DEFINE_INSTRUCTION(SSAIR, RRE_1, 1221, UNI_SINCE_YOP, "Set Secondary ASN with Instance")
DEFINE_INSTRUCTION(SSAR, RRE_1, 1221, UNI_ESA_XA_370_SINCE_ZOP, "Set Secondary ASN")
DEFINE_INSTRUCTION(SSCH, S_1_u, 1343, UNI_ESA_XA_SINCE_ZOP, "Start Subchannel", channel_special, privileged, has_parameter_list)
DEFINE_INSTRUCTION(SSK, RR_2, 0, UNI_370_DOS, "Set Storage Key")
DEFINE_INSTRUCTION(SSKE, RRF_c_3_opt, 1226, UNI_ESA_XA_370_SINCE_ZOP, "Set Storage Key Extended", sske_special, privileged)
DEFINE_INSTRUCTION(SSM, SI_1, 1229, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Set System Mask", privileged)
DEFINE_INSTRUCTION(ST, RX_a_2_ux, 957, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Store (32)")
DEFINE_INSTRUCTION(STAM, RS_a_3, 957, UNI_ESA_SINCE_ZOP, "Store Access Multiple")
DEFINE_INSTRUCTION(STAMY, RSY_a_3, 957, UNI_SINCE_YOP, "Store Access Multiple")
DEFINE_INSTRUCTION(STAP, S_1_u, 1232, UNI_ESA_XA_370_SINCE_ZOP, "Store CPU Address", privileged)
DEFINE_INSTRUCTION(STBEAR, S_1_u, 1231, UNI_SINCE_Z16, "Store BEAR", privileged)
DEFINE_INSTRUCTION(STC, RX_a_2_ux, 958, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Store Character")
DEFINE_INSTRUCTION(STCCTM, RSY_b_3_us, 0, UNI_SINCE_Z15, "Store CPU Counter Multiple", stcctm_special)
DEFINE_INSTRUCTION(STCH, RXY_a_2, 958, UNI_SINCE_Z11, "Store Character High (8)")
DEFINE_INSTRUCTION(STCK, S_1_u, 959, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Store Clock", stck)
DEFINE_INSTRUCTION(STCKC, S_1_u, 1232, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Store Clock Comparator", privileged)
DEFINE_INSTRUCTION(STCKE, S_1_u, 960, UNI_ESA_SINCE_ZOP, "Store Clock Extended", stck)
DEFINE_INSTRUCTION(STCKF, S_1_u, 959, UNI_SINCE_Z9, "Store Clock Fast", stck)
DEFINE_INSTRUCTION(STCM, RS_b_3, 958, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Store Characters under Mask (low)")
DEFINE_INSTRUCTION(STCMH, RSY_b_3_us, 958, UNI_SINCE_ZOP, "Store Characters under Mask (high)")
DEFINE_INSTRUCTION(STCMY, RSY_b_3_us, 958, UNI_SINCE_YOP, "Store Characters under Mask (low)")
DEFINE_INSTRUCTION(STCPS, S_1_u, 1345, UNI_ESA_XA_SINCE_ZOP, "Store Channel Path Status", privileged, has_parameter_list)
DEFINE_INSTRUCTION(STCRW, S_1_u, 1345, UNI_ESA_XA_SINCE_ZOP, "Store Channel Report Word", stcrw_special, privileged, has_parameter_list)
DEFINE_INSTRUCTION(STCTG, RSY_a_3, 1232, UNI_SINCE_ZOP, "Store Control (64)", privileged)
DEFINE_INSTRUCTION(STCTL, RS_a_3, 1232, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Store Control (32)", privileged)
DEFINE_INSTRUCTION(STCY, RXY_a_2, 958, UNI_SINCE_YOP, "Store Character")
DEFINE_INSTRUCTION(STD, RX_a_2_ux, 1078, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Store (L)")
DEFINE_INSTRUCTION(STDY, RXY_a_2, 1079, UNI_SINCE_YOP, "Store (L)")
DEFINE_INSTRUCTION(STE, RX_a_2_ux, 1078, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Store (S)")
DEFINE_INSTRUCTION(STEY, RXY_a_2, 1079, UNI_SINCE_YOP, "Store (S)")
DEFINE_INSTRUCTION(STFH, RXY_a_2, 964, UNI_SINCE_Z11, "Store High (32)")
DEFINE_INSTRUCTION(STFL, S_1_u, 1235, UNI_ESA_SINCE_ZOP, "Store Facility List", privileged)
DEFINE_INSTRUCTION(STFLE, S_1_s, 962, UNI_SINCE_Z9, "Store Facility List Extended", stfle_special)
DEFINE_INSTRUCTION(STFPC, S_1_u, 1079, UNI_ESA_SINCE_ZOP, "Store FPC")
DEFINE_INSTRUCTION(STG, RXY_a_2, 957, UNI_SINCE_ZOP, "Store (64)")
DEFINE_INSTRUCTION(STGRL, RIL_b_2, 957, UNI_SINCE_Z10, "Store Relative Long (64)")
DEFINE_INSTRUCTION(STGSC, RXY_a_2, 963, UNI_SINCE_Z14, "Store Guarded Storage Controls")
DEFINE_INSTRUCTION(STH, RX_a_2_ux, 964, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Store Halfword (16)")
DEFINE_INSTRUCTION(STHH, RXY_a_2, 964, UNI_SINCE_Z11, "Store Halfword High (16)")
DEFINE_INSTRUCTION(STHRL, RIL_b_2, 964, UNI_SINCE_Z10, "Store Halfword Relative Long (16)")
DEFINE_INSTRUCTION(STHY, RXY_a_2, 964, UNI_SINCE_YOP, "Store Halfword (16)")
DEFINE_INSTRUCTION(STIDC, S_1_u, 0, UNI_370_DOS, "Store Channel ID", old_pop)
DEFINE_INSTRUCTION(STIDP, S_1_u, 1233, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Store CPU ID", privileged)
DEFINE_INSTRUCTION(STM, RS_a_3, 965, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Store Multiple (32)")
DEFINE_INSTRUCTION(STMG, RSY_a_3, 965, UNI_SINCE_ZOP, "Store Multiple (64)")
DEFINE_INSTRUCTION(STMH, RSY_a_3, 965, UNI_SINCE_ZOP, "Store Multiple High (32)")
DEFINE_INSTRUCTION(STMY, RSY_a_3, 965, UNI_SINCE_YOP, "Store Multiple (32)")
DEFINE_INSTRUCTION(STNSM, SI_2_u, 1262, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Store Then And System Mask", privileged)
DEFINE_INSTRUCTION(STOC, RSY_b_3_su, 965, UNI_SINCE_Z11, "Store on Condition (32)")
DEFINE_INSTRUCTION(STOCFH, RSY_b_3_su, 966, UNI_SINCE_Z13, "Store High on Condition (32)")
DEFINE_INSTRUCTION(STOCG, RSY_b_3_su, 965, UNI_SINCE_Z11, "Store on Condition (64)")
DEFINE_INSTRUCTION(STOSM, SI_2_u, 1262, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Store Then Or System Mask", privileged)
DEFINE_INSTRUCTION(STPQ, RXY_a_2_e, 966, UNI_SINCE_ZOP, "Store Pair to Quadword (64,64<-128)")
DEFINE_INSTRUCTION(STPT, S_1_u, 1235, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Store CPU Timer", privileged)
DEFINE_INSTRUCTION(STPX, S_1_u, 1235, UNI_ESA_XA_370_SINCE_ZOP, "Store Prefix", privileged)
DEFINE_INSTRUCTION(STRAG, SSE_2, 1236, UNI_SINCE_ZOP, "Store Real Address (64)", privileged)
DEFINE_INSTRUCTION(STRL, RIL_b_2, 957, UNI_SINCE_Z10, "Store Relative Long (32)")
DEFINE_INSTRUCTION(STRV, RXY_a_2, 967, UNI_ESA_SINCE_ZOP, "Store Reversed (32)")
DEFINE_INSTRUCTION(STRVG, RXY_a_2, 967, UNI_SINCE_ZOP, "Store Reversed (64)")
DEFINE_INSTRUCTION(STRVH, RXY_a_2, 967, UNI_ESA_SINCE_ZOP, "Store Reversed (16)")
DEFINE_INSTRUCTION(STSCH, S_1_u, 1346, UNI_ESA_XA_SINCE_ZOP, "Store Subchannel", stsch_special, privileged, has_parameter_list)
DEFINE_INSTRUCTION(STSI, S_1_u, 1237, UNI_ESA_SINCE_ZOP, "Store System Information", privileged, has_parameter_list)
DEFINE_INSTRUCTION(STURA, RRE_2, 1263, UNI_ESA_SINCE_ZOP, "Store Using Real Address (32)", privileged)
DEFINE_INSTRUCTION(STURG, RRE_2, 1263, UNI_SINCE_ZOP, "Store Using Real Address (64)", privileged)
DEFINE_INSTRUCTION(STY, RXY_a_2, 957, UNI_SINCE_YOP, "Store (32)")
DEFINE_INSTRUCTION(SU, RX_a_2_ux, 1551, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract Unnormalized (short HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(SUR, RR_2, 1551, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract Unnormalized (short HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(SVC, I_1, 971, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Supervisor Call", svc_special, branch_argument_unknown)
DEFINE_INSTRUCTION(SW, RX_a_2_ux, 1551, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract Unnormalized (long HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(SWR, RR_2, 1551, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract Unnormalized (long HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(SXBR, RRE_2, 1592, UNI_ESA_SINCE_ZOP, "Subtract (extended BFP)", fp_arithmetic)
DEFINE_INSTRUCTION(SXR, RR_2, 1550, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Subtract Normalized (extended HFP)", arithmetic_no_overflow)
DEFINE_INSTRUCTION(SXTR, RRF_a_3, 1649, UNI_SINCE_Z9, "Subtract (extended DFP)", fp_arithmetic)
DEFINE_INSTRUCTION(SXTRA, RRF_a_4, 1649, UNI_SINCE_Z11, "Subtract (extended DFP)", fp_arithmetic)
DEFINE_INSTRUCTION(SY, RXY_a_2, 968, UNI_SINCE_YOP, "Subtract (32)", arithmetic)
DEFINE_INSTRUCTION(TABORT, S_1_u, 974, UNI_SINCE_Z12, "Transaction Abort", tabort_special)
DEFINE_INSTRUCTION(TAM, E_0, 972, UNI_ESA_SINCE_ZOP, "Test Addressing Mode", tam_special)
DEFINE_INSTRUCTION(TAR, RRE_2, 1263, UNI_ESA_SINCE_ZOP, "Test Access", tar_special)
DEFINE_INSTRUCTION(TB, RRE_2, 1266, UNI_ESA_XA_370_SINCE_ZOP, "Test Block", test_block_special, privileged)
DEFINE_INSTRUCTION(TBDR, RRF_e_3, 1059, UNI_ESA_SINCE_ZOP, "Convert HFP to BFP (long BFP<-long HFP)", arithmetic)
DEFINE_INSTRUCTION(TBEDR, RRF_e_3, 1059, UNI_ESA_SINCE_ZOP, "Convert HFP to BFP (short BFP<-long HFP)", arithmetic)
DEFINE_INSTRUCTION(TBEGIN, SIL_2_s, 974, UNI_SINCE_Z12, "Transaction Begin (nonconstrained)", tbegin_special, has_parameter_list)
DEFINE_INSTRUCTION(TBEGINC, SIL_2_s, 979, UNI_SINCE_Z12, "Transaction Begin (constrained)", tbeginc_special)
DEFINE_INSTRUCTION(TCDB, RXE_2, 1593, UNI_ESA_SINCE_ZOP, "Test Data Class (long BFP)", test_data)
DEFINE_INSTRUCTION(TCEB, RXE_2, 1593, UNI_ESA_SINCE_ZOP, "Test Data Class (short BFP)", test_data)
DEFINE_INSTRUCTION(TCH, S_1_u, 0, UNI_370_DOS, "Test Channel", old_pop)
DEFINE_INSTRUCTION(TCXB, RXE_2, 1593, UNI_ESA_SINCE_ZOP, "Test Data Class (extended BFP)", test_data)
DEFINE_INSTRUCTION(TDCDT, RXE_2, 1650, UNI_SINCE_Z9, "Test Data Class (long DFP)", test_data)
DEFINE_INSTRUCTION(TDCET, RXE_2, 1650, UNI_SINCE_Z9, "Test Data Class (short DFP)", test_data)
DEFINE_INSTRUCTION(TDCXT, RXE_2, 1650, UNI_SINCE_Z9, "Test Data Class (extended DFP)", test_data)
DEFINE_INSTRUCTION(TDGDT, RXE_2, 1651, UNI_SINCE_Z9, "Test Data Group (long DFP)", test_data)
DEFINE_INSTRUCTION(TDGET, RXE_2, 1651, UNI_SINCE_Z9, "Test Data Group (short DFP)", test_data)
DEFINE_INSTRUCTION(TDGXT, RXE_2, 1651, UNI_SINCE_Z9, "Test Data Group (extended DFP)", test_data)
DEFINE_INSTRUCTION(TEND, S_0, 981, UNI_SINCE_Z12, "Transaction End", tend_special)
DEFINE_INSTRUCTION(THDER, RRE_2, 1057, UNI_ESA_SINCE_ZOP, "Convert BFP to HFP (long HFP<-short BFP)", fp_conversion)
DEFINE_INSTRUCTION(THDR, RRE_2, 1057, UNI_ESA_SINCE_ZOP, "Convert BFP to HFP (long HFP<-long BFP)", fp_conversion)
DEFINE_INSTRUCTION(TIO, S_1_u, 0, UNI_370_DOS, "Test I/O", old_pop)
DEFINE_INSTRUCTION(TM, SI_2_u, 973, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Test under Mask", tm_old_special)
DEFINE_INSTRUCTION(TMH, RI_a_2_u, 973, UNI_ESA_SINCE_ZOP, "Test under Mask High", tm_new_special)
DEFINE_INSTRUCTION(TMHH, RI_a_2_u, 973, UNI_SINCE_ZOP, "Test under Mask (high high)", tm_new_special)
DEFINE_INSTRUCTION(TMHL, RI_a_2_u, 973, UNI_SINCE_ZOP, "Test under Mask (high low)", tm_new_special)
DEFINE_INSTRUCTION(TML, RI_a_2_u, 973, UNI_ESA_SINCE_ZOP, "Test under Mask Low", tm_new_special)
DEFINE_INSTRUCTION(TMLH, RI_a_2_u, 973, UNI_ESA_SINCE_ZOP, "Test under Mask (low high)", tm_new_special)
DEFINE_INSTRUCTION(TMLL, RI_a_2_u, 973, UNI_ESA_SINCE_ZOP, "Test under Mask (low low)", tm_new_special)
DEFINE_INSTRUCTION(TMY, SIY_2_su, 973, UNI_SINCE_YOP, "Test under Mask", tm_old_special)
DEFINE_INSTRUCTION(TP, RSL_a_1, 1030, UNI_SINCE_ZOP, "Test Decimal", test_decimal_special)
DEFINE_INSTRUCTION(TPEI, RRE_2, 1268, UNI_SINCE_Z14, "Test Pending External Interruption", tpei_special, privileged)
DEFINE_INSTRUCTION(TPI, S_1_u, 1347, UNI_ESA_XA_SINCE_ZOP, "Test Pending Interruption", tpi_special, privileged)
DEFINE_INSTRUCTION(TPROT, SSE_2, 1268, UNI_ESA_XA_370_SINCE_ZOP, "Test Protection", tprot_special, privileged)
DEFINE_INSTRUCTION(TR, SS_a_2_u, 982, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Translate")
DEFINE_INSTRUCTION(TRACE, RS_a_3, 1271, UNI_ESA_XA_SINCE_ZOP, "Trace (32)", privileged)
DEFINE_INSTRUCTION(TRACG, RSY_a_3, 1271, UNI_SINCE_ZOP, "Trace (64)", privileged)
DEFINE_INSTRUCTION(TRAP2, E_0, 1273, UNI_ESA_SINCE_ZOP, "Trap")
DEFINE_INSTRUCTION(TRAP4, S_1_u, 1273, UNI_ESA_SINCE_ZOP, "Trap")
DEFINE_INSTRUCTION(TRE, RRE_2_e, 989, UNI_ESA_SINCE_ZOP, "Translate Extended", trt_like_interruptible, has_parameter_list)
DEFINE_INSTRUCTION(TROO, RRF_c_3_opt_e, 991, UNI_SINCE_ZOP, "Translate One to One", trxx_special, has_parameter_list)
DEFINE_INSTRUCTION(TROT, RRF_c_3_opt_e, 991, UNI_SINCE_ZOP, "Translate One to Two", trxx_special, has_parameter_list)
DEFINE_INSTRUCTION(TRT, SS_a_2_u, 983, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Translate and Test", trt_like)
DEFINE_INSTRUCTION(TRTE, RRF_c_3_opt_e, 984, UNI_SINCE_Z10, "Translate and Test Extended", trt_like_interruptible, has_parameter_list)
DEFINE_INSTRUCTION(TRTO, RRF_c_3_opt_e, 991, UNI_SINCE_ZOP, "Translate Two to One", trxx_special, has_parameter_list)
DEFINE_INSTRUCTION(TRTR, SS_a_2_u, 988, UNI_SINCE_YOP, "Translate and Test Reverse", trt_like)
DEFINE_INSTRUCTION(TRTRE, RRF_c_3_opt_e, 984, UNI_SINCE_Z10, "Translate and Test Reverse Extended", trt_like_interruptible, has_parameter_list)
DEFINE_INSTRUCTION(TRTT, RRF_c_3_opt_e, 992, UNI_SINCE_ZOP, "Translate Two to Two", trxx_special, has_parameter_list)
DEFINE_INSTRUCTION(TS, SI_1, 972, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Test and Set", ts_special)
DEFINE_INSTRUCTION(TSCH, S_1_u, 1349, UNI_ESA_XA_SINCE_ZOP, "Test Subchannel", tsch_special, privileged, has_parameter_list)
DEFINE_INSTRUCTION(UNPK, SS_b_2, 996, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Unpack")
DEFINE_INSTRUCTION(UNPKA, SS_a_2_u, 997, UNI_SINCE_ZOP, "Unpack ASCII", unpack_new)
DEFINE_INSTRUCTION(UNPKU, SS_a_2_u, 998, UNI_SINCE_ZOP, "Unpack Unicode", unpack_new)
DEFINE_INSTRUCTION(UPT, E_0, 999, UNI_ESA_XA_SINCE_ZOP, "Update Tree", update_tree_special)
DEFINE_INSTRUCTION(VA, VRR_c_4, 1688, UNI_ESA_XA_370_SINCE_Z13, "Vector Add")
DEFINE_INSTRUCTION(VAC, VRR_d_5, 1689, UNI_SINCE_Z13, "Vector Add With Carry")
DEFINE_INSTRUCTION(VACC, VRR_c_4, 1689, UNI_SINCE_Z13, "Vector Add Compute Carry")
DEFINE_INSTRUCTION(VACCC, VRR_d_5, 1690, UNI_SINCE_Z13, "Vector Add With Carry Compute Carry")
DEFINE_INSTRUCTION(VACD, RI_a_2_u, 0, ESA_XA_370, "Vector Accumulate (long HFP)", old_vector)
DEFINE_INSTRUCTION(VACE, RI_a_2_u, 0, ESA_XA_370, "Vector Accumulate (short HFP)", old_vector)
DEFINE_INSTRUCTION(VACRS, RRE_2, 0, ESA_XA_370, "Restore VAC", old_vector)
DEFINE_INSTRUCTION(VACSV, RRE_2, 0, ESA_XA_370, "Save VAC", old_vector)
DEFINE_INSTRUCTION(VAD, RI_a_2_u, 0, ESA_XA_370, "Vector Add (long HFP)", old_vector)
DEFINE_INSTRUCTION(VADS, RI_a_2_u, 0, ESA_XA_370, "Vector Add (long HFP)", old_vector)
DEFINE_INSTRUCTION(VAE, RI_a_2_u, 0, ESA_XA_370, "Vector Add (short HFP)", old_vector)
DEFINE_INSTRUCTION(VAES, RI_a_2_u, 0, ESA_XA_370, "Vector Add (short HFP)", old_vector)
DEFINE_INSTRUCTION(VAP, VRI_f_5, 1788, UNI_SINCE_Z14, "Vector Add Decimal", vector_decimal_arithmetic)
DEFINE_INSTRUCTION(VAS, RI_a_2_u, 0, ESA_XA_370, "Vector Add (32)", old_vector)
DEFINE_INSTRUCTION(VAVG, VRR_c_4, 1691, UNI_SINCE_Z13, "Vector Average")
DEFINE_INSTRUCTION(VAVGL, VRR_c_4, 1691, UNI_SINCE_Z13, "Vector Average Logical")
DEFINE_INSTRUCTION(VBLEND, VRR_d_5, 1659, UNI_SINCE_Z17, "Vector Blend")
DEFINE_INSTRUCTION(VBPERM, VRR_c_3, 1659, UNI_SINCE_Z14, "Vector Bit Permute")
DEFINE_INSTRUCTION(VC, RI_a_2_u, 0, ESA_XA_370, "Vector Compare (32)", old_vector)
DEFINE_INSTRUCTION(VCD, RI_a_2_u, 0, ESA_XA_370, "Vector Compare (long HFP)", old_vector)
DEFINE_INSTRUCTION(VCDS, RI_a_2_u, 0, ESA_XA_370, "Vector Compare (long HFP)", old_vector)
DEFINE_INSTRUCTION(VCE, RI_a_2_u, 0, ESA_XA_370, "Vector Compare (short HFP)", old_vector)
DEFINE_INSTRUCTION(VCEQ, VRR_b_5, 1693, UNI_ESA_XA_370_SINCE_Z13, "Vector Compare Equal", vector_equal)
DEFINE_INSTRUCTION(VCES, RI_a_2_u, 0, ESA_XA_370, "Vector Compare (short HFP)", old_vector)
DEFINE_INSTRUCTION(VCFN, VRR_a_4, 1966, UNI_SINCE_Z16, "Vector FP Convert From NNP")
DEFINE_INSTRUCTION(VCFPL, VRR_a_5, 1751, UNI_SINCE_Z15, "Vector FP Convert From Logical")
DEFINE_INSTRUCTION(VCFPS, VRR_a_5, 1749, UNI_SINCE_Z15, "Vector FP Convert From Fixed")
DEFINE_INSTRUCTION(VCH, VRR_b_5, 1693, UNI_SINCE_Z13, "Vector Compare High", vector_high)
DEFINE_INSTRUCTION(VCHL, VRR_b_5, 1694, UNI_SINCE_Z13, "Vector Compare High Logical", vector_high)
DEFINE_INSTRUCTION(VCKSM, VRR_c_3, 1691, UNI_SINCE_Z13, "Vector Checksum")
DEFINE_INSTRUCTION(VCLFNH, VRR_a_4, 1964, UNI_SINCE_Z16, "Vector FP Convert And Lengthen From NNP High")
DEFINE_INSTRUCTION(VCLFNL, VRR_a_4, 1965, UNI_SINCE_Z16, "Vector FP Convert And Lengthen From NNP Low")
DEFINE_INSTRUCTION(VCLFP, VRR_a_5, 1754, UNI_SINCE_Z15, "Vector FP Convert To Logical")
DEFINE_INSTRUCTION(VCLZ, VRR_a_3, 1695, UNI_SINCE_Z13, "Vector Count Leading Zeros")
DEFINE_INSTRUCTION(VCLZDP, VRR_k_3, 1795, UNI_SINCE_Z16, "Vector Count Leading Zero Digits", vclzdp_special)
DEFINE_INSTRUCTION(VCNF, VRR_a_4, 1967, UNI_SINCE_Z16, "Vector FP Convert To NNP")
DEFINE_INSTRUCTION(VCOVM, RRE_2, 0, ESA_XA_370, "Count Ones In VMR", old_vector)
DEFINE_INSTRUCTION(VCP, VRR_h_3, 1789, UNI_SINCE_Z14, "Vector Compare Decimal", comparison)
DEFINE_INSTRUCTION(VCRNF, VRR_c_5, 1966, UNI_SINCE_Z16, "Vector FP Convert And Round To NNP")
DEFINE_INSTRUCTION(VCS, RI_a_2_u, 0, ESA_XA_370, "Vector Compare (32)", old_vector)
DEFINE_INSTRUCTION(VCSFP, VRR_a_5, 1752, UNI_SINCE_Z15, "Vector FP Convert To Fixed")
DEFINE_INSTRUCTION(VCSPH, VRR_j_4, 1794, UNI_SINCE_Z16, "Vector Convert HFP To Scaled Decimal")
DEFINE_INSTRUCTION(VCTZ, VRR_a_3, 1696, UNI_SINCE_Z13, "Vector Count Trailing Zeros")
DEFINE_INSTRUCTION(VCVB, VRR_i_3, 1790, UNI_SINCE_Z14, "Vector Convert To Binary (32)", vector_convert)
DEFINE_INSTRUCTION(VCVBG, VRR_i_3, 1790, UNI_SINCE_Z14, "Vector Convert To Binary (64)", vector_convert)
DEFINE_INSTRUCTION(VCVBQ, VRR_k_3, 1790, UNI_SINCE_Z17, "Vector Convert To Binary (128)")
DEFINE_INSTRUCTION(VCVD, VRI_i_4, 1792, UNI_SINCE_Z14, "Vector Convert To Decimal (32)", vector_convert)
DEFINE_INSTRUCTION(VCVDG, VRI_i_4, 1793, UNI_SINCE_Z14, "Vector Convert To Decimal (64)", vector_convert)
DEFINE_INSTRUCTION(VCVDQ, VRI_j_4, 1793, UNI_SINCE_Z17, "Vector Convert To Decimal (128)", vector_convert)
DEFINE_INSTRUCTION(VCVM, RRE_2, 0, ESA_XA_370, "Complement VMR", old_vector)
DEFINE_INSTRUCTION(VCZVM, RRE_2, 0, ESA_XA_370, "Count Left Zeros In VMR", old_vector)
DEFINE_INSTRUCTION(VD, VRR_c_5, 1696, UNI_SINCE_Z17, "Vector Divide")
DEFINE_INSTRUCTION(VDD, RI_a_2_u, 0, ESA_XA_370, "Vector Divide (long HFP)", old_vector)
DEFINE_INSTRUCTION(VDDS, RI_a_2_u, 0, ESA_XA_370, "Vector Divide (long HFP)", old_vector)
DEFINE_INSTRUCTION(VDE, RI_a_2_u, 0, ESA_XA_370, "Vector Divide (short HFP)", old_vector)
DEFINE_INSTRUCTION(VDES, RI_a_2_u, 0, ESA_XA_370, "Vector Divide (short HFP)", old_vector)
DEFINE_INSTRUCTION(VDL, VRR_c_5, 1696, UNI_SINCE_Z17, "Vector Divide Logical")
DEFINE_INSTRUCTION(VDP, VRI_f_5, 1795, UNI_SINCE_Z14, "Vector Divide Decimal", vector_decimal_arithmetic)
DEFINE_INSTRUCTION(VEC, VRR_a_3, 1692, UNI_SINCE_Z13, "Vector Element Compare", comparison)
DEFINE_INSTRUCTION(VECL, VRR_a_3, 1692, UNI_SINCE_Z13, "Vector Element Compare Logical", comparison)
DEFINE_INSTRUCTION(VERIM, VRI_d_5, 1712, UNI_SINCE_Z13, "Vector Element Rotate and Insert Under Mask")
DEFINE_INSTRUCTION(VERLL, VRS_a_4, 1712, UNI_SINCE_Z13, "Vector Element Rotate Left Logical")
DEFINE_INSTRUCTION(VERLLV, VRR_c_4, 1711, UNI_SINCE_Z13, "Vector Element Rotate Left Logical")
DEFINE_INSTRUCTION(VESL, VRS_a_4, 1713, UNI_SINCE_Z13, "Vector Element Shift Left")
DEFINE_INSTRUCTION(VESLV, VRR_c_4, 1713, UNI_SINCE_Z13, "Vector Element Shift Left")
DEFINE_INSTRUCTION(VESRA, VRS_a_4, 1714, UNI_SINCE_Z13, "Vector Element Shift Right Arithmetic")
DEFINE_INSTRUCTION(VESRAV, VRR_c_4, 1714, UNI_SINCE_Z13, "Vector Element Shift Right Arithmetic")
DEFINE_INSTRUCTION(VESRL, VRS_a_4, 1714, UNI_SINCE_Z13, "Vector Element Shift Right Logical")
DEFINE_INSTRUCTION(VESRLV, VRR_c_4, 1714, UNI_SINCE_Z13, "Vector Element Shift Right Logical")
DEFINE_INSTRUCTION(VEVAL, VRI_k_5, 1697, UNI_SINCE_Z17, "Vector Evaluate")
DEFINE_INSTRUCTION(VFA, VRR_c_5, 1738, UNI_SINCE_Z13, "Vector FP Add")
DEFINE_INSTRUCTION(VFAE, VRR_b_5_opt, 1724, UNI_SINCE_Z13, "Vector Find Any Element Equal", vector_find)
DEFINE_INSTRUCTION(VFCE, VRR_c_6, 1743, UNI_SINCE_Z13, "Vector FP Compare Equal", vfce_special)
DEFINE_INSTRUCTION(VFCH, VRR_c_6, 1745, UNI_SINCE_Z13, "Vector FP Compare High", vfch_special)
DEFINE_INSTRUCTION(VFCHE, VRR_c_6, 1747, UNI_SINCE_Z13, "Vector FP Compare High or Equal", vfche_special)
DEFINE_INSTRUCTION(VFD, VRR_c_5, 1756, UNI_SINCE_Z13, "Vector FP Divide")
DEFINE_INSTRUCTION(VFEE, VRR_b_5_opt, 1725, UNI_SINCE_Z13, "Vector Find Element Equal", vector_find_equal)
DEFINE_INSTRUCTION(VFENE, VRR_b_5_opt, 1726, UNI_SINCE_Z13, "Vector Find Element Not Equal", vector_find_neq)
DEFINE_INSTRUCTION(VFI, VRR_a_5, 1758, UNI_SINCE_Z13, "Vector Load FP Integer")
DEFINE_INSTRUCTION(VFLL, VRR_a_4, 1760, UNI_SINCE_Z14, "Vector FP Load Lengthened")
DEFINE_INSTRUCTION(VFLR, VRR_a_5, 1761, UNI_SINCE_Z14, "Vector FP Load Rounded")
DEFINE_INSTRUCTION(VFM, VRR_c_5, 1774, UNI_SINCE_Z13, "Vector FP Multiply")
DEFINE_INSTRUCTION(VFMA, VRR_e_6, 1776, UNI_SINCE_Z13, "Vector FP Multiply and Add")
DEFINE_INSTRUCTION(VFMAX, VRR_c_6, 1762, UNI_SINCE_Z14, "Vector FP Maximum")
DEFINE_INSTRUCTION(VFMIN, VRR_c_6, 1768, UNI_SINCE_Z14, "Vector FP Minimum")
DEFINE_INSTRUCTION(VFMS, VRR_e_6, 1776, UNI_SINCE_Z13, "Vector FP Multiply and Subtract")
DEFINE_INSTRUCTION(VFNMA, VRR_e_6, 1776, UNI_SINCE_Z14, "Vector FP Negative Multiply And Add")
DEFINE_INSTRUCTION(VFNMS, VRR_e_6, 1776, UNI_SINCE_Z14, "Vector FP Negative Multiply And Subtract")
DEFINE_INSTRUCTION(VFPSO, VRR_a_5, 1778, UNI_SINCE_Z13, "Vector FP Perform Sign Operation")
DEFINE_INSTRUCTION(VFS, VRR_c_5, 1780, UNI_SINCE_Z13, "Vector FP Subtract")
DEFINE_INSTRUCTION(VFSQ, VRR_a_4, 1779, UNI_SINCE_Z13, "Vector FP Square Root")
DEFINE_INSTRUCTION(VFTCI, VRI_e_5, 1781, UNI_SINCE_Z13, "Vector FP Test Data Class Immediate", vector_test_data)
DEFINE_INSTRUCTION(VGBM, VRI_a_2, 1660, UNI_SINCE_Z13, "Vector Generate Byte Mask")
DEFINE_INSTRUCTION(VGEF, VRV_3, 1660, UNI_SINCE_Z13, "Vector Gather Element (32)")
DEFINE_INSTRUCTION(VGEG, VRV_3, 1660, UNI_SINCE_Z13, "Vector Gather Element (64)")
DEFINE_INSTRUCTION(VGEM, VRR_a_3, 1661, UNI_SINCE_Z17, "Vector Generate Element Mask")
DEFINE_INSTRUCTION(VGFM, VRR_c_4, 1700, UNI_SINCE_Z13, "Vector Galois Field Multiply Sum")
DEFINE_INSTRUCTION(VGFMA, VRR_d_5, 1700, UNI_SINCE_Z13, "Vector Galois Field Multiply Sum and Accumulate")
DEFINE_INSTRUCTION(VGM, VRI_b_4, 1661, UNI_SINCE_Z13, "Vector Generate Mask")
DEFINE_INSTRUCTION(VISTR, VRR_a_4_opt, 1727, UNI_SINCE_Z13, "Vector Isolate String", vistr_special)
DEFINE_INSTRUCTION(VL, VRX_3_opt, 1662, UNI_ESA_XA_370_SINCE_Z13, "Vector Load")
DEFINE_INSTRUCTION(VLBB, VRX_3, 1669, UNI_SINCE_Z13, "Vector Load to Block Boundary")
DEFINE_INSTRUCTION(VLBIX, RRE_2, 0, ESA_XA_370, "Vector Load Bit Index", old_vector)
DEFINE_INSTRUCTION(VLBR, VRX_3, 1665, UNI_SINCE_Z15, "Vector Load Byte Reversed Elements")
DEFINE_INSTRUCTION(VLBRREP, VRX_3, 1663, UNI_SINCE_Z15, "Vector Load Byte Reversed Element And Replicate")
DEFINE_INSTRUCTION(VLC, VRR_a_3, 1701, UNI_SINCE_Z13, "Vector Load Complement")
DEFINE_INSTRUCTION(VLCVM, RRE_2, 0, ESA_XA_370, "Load VMR Comlement", old_vector)
DEFINE_INSTRUCTION(VLD, RI_a_2_u, 0, ESA_XA_370, "Vector Load (long HFP)", old_vector)
DEFINE_INSTRUCTION(VLEB, VRX_3, 1665, UNI_SINCE_Z13, "Vector Load Element (8)")
DEFINE_INSTRUCTION(VLEBRF, VRX_3, 1663, UNI_SINCE_Z15, "Vector Load Byte Reversed Element (32)")
DEFINE_INSTRUCTION(VLEBRG, VRX_3, 1663, UNI_SINCE_Z15, "Vector Load Byte Reversed Element (64)")
DEFINE_INSTRUCTION(VLEBRH, VRX_3, 1663, UNI_SINCE_Z15, "Vector Load Byte Reversed Element (16)")
DEFINE_INSTRUCTION(VLEF, VRX_3, 1665, UNI_SINCE_Z13, "Vector Load Element (32)")
DEFINE_INSTRUCTION(VLEG, VRX_3, 1665, UNI_SINCE_Z13, "Vector Load Element (64)")
DEFINE_INSTRUCTION(VLEH, VRX_3, 1665, UNI_SINCE_Z13, "Vector Load Element (16)")
DEFINE_INSTRUCTION(VLEIB, VRI_a_3, 1666, UNI_SINCE_Z13, "Vector Load Element Immediate (8)")
DEFINE_INSTRUCTION(VLEIF, VRI_a_3, 1666, UNI_SINCE_Z13, "Vector Load Element Immediate (32)")
DEFINE_INSTRUCTION(VLEIG, VRI_a_3, 1666, UNI_SINCE_Z13, "Vector Load Element Immediate (64)")
DEFINE_INSTRUCTION(VLEIH, VRI_a_3, 1666, UNI_SINCE_Z13, "Vector Load Element Immediate (16)")
DEFINE_INSTRUCTION(VLELD, RRE_2, 0, ESA_XA_370, "Vector Load Element (long HFP)", old_vector)
DEFINE_INSTRUCTION(VLELE, RRE_2, 0, ESA_XA_370, "Vector Load Element (short HFP)", old_vector)
DEFINE_INSTRUCTION(VLER, VRX_3, 1666, UNI_ESA_XA_370_SINCE_Z15, "Vector Load Elements Reversed")
DEFINE_INSTRUCTION(VLGV, VRS_c_4, 1667, UNI_SINCE_Z13, "Vector Load GR from VR Element")
DEFINE_INSTRUCTION(VLH, RI_a_2_u, 0, ESA_XA_370, "Vector Load Halfword", old_vector)
DEFINE_INSTRUCTION(VLI, RRE_2, 0, ESA_XA_370, "Vector Load Indirect (32)", old_vector)
DEFINE_INSTRUCTION(VLID, RRE_2, 0, ESA_XA_370, "Vector Load Indirect (long HFP)", old_vector)
DEFINE_INSTRUCTION(VLINT, RI_a_2_u, 0, ESA_XA_370, "Vector Load Integer Vector", old_vector)
DEFINE_INSTRUCTION(VLIP, VRI_h_3, 1797, UNI_SINCE_Z14, "Vector Load Immediate Decimal")
DEFINE_INSTRUCTION(VLL, VRS_b_3, 1671, UNI_SINCE_Z13, "Vector Load With Length")
DEFINE_INSTRUCTION(VLLEBRZ, VRX_3, 1664, UNI_SINCE_Z15, "Vector Load Byte Reversed Element And Zero")
DEFINE_INSTRUCTION(VLLEZ, VRX_3, 1667, UNI_SINCE_Z13, "Vector Load Logical Element and Zero")
DEFINE_INSTRUCTION(VLM, VRS_a_4_opt, 1668, UNI_ESA_XA_370_SINCE_Z13, "Vector Load Multiple")
DEFINE_INSTRUCTION(VLMD, RI_a_2_u, 0, ESA_XA_370, "Vector Load Matched (long HFP)", old_vector)
DEFINE_INSTRUCTION(VLP, VRR_a_3, 1701, UNI_SINCE_Z13, "Vector Load Positive")
DEFINE_INSTRUCTION(VLR, VRR_a_2, 1662, UNI_ESA_XA_370_SINCE_Z13, "Vector Load")
DEFINE_INSTRUCTION(VLREP, VRX_3, 1662, UNI_SINCE_Z13, "Vector Load and Replicate")
DEFINE_INSTRUCTION(VLRL, VSI_3, 1669, UNI_SINCE_Z14, "Vector Load Rightmost With Length")
DEFINE_INSTRUCTION(VLRLR, VRS_d_3, 1669, UNI_SINCE_Z14, "Vector Load Rightmost With Length")
DEFINE_INSTRUCTION(VLVCA, RRE_2, 0, ESA_XA_370, "Load VCT From Address", old_vector)
DEFINE_INSTRUCTION(VLVCU, RRE_2, 0, ESA_XA_370, "Load VCT And Update", old_vector)
DEFINE_INSTRUCTION(VLVG, VRS_b_4, 1670, UNI_SINCE_Z13, "Vector Load VR Element from GR")
DEFINE_INSTRUCTION(VLVGP, VRR_f_3, 1670, UNI_SINCE_Z13, "Vector Load VR from GRs Disjoint")
DEFINE_INSTRUCTION(VLVM, RRE_2, 0, ESA_XA_370, "Load VMR Comlement", old_vector)
DEFINE_INSTRUCTION(VLY, RI_a_2_u, 0, ESA_XA_370, "Vector Load Expanded (32)", old_vector)
DEFINE_INSTRUCTION(VLYD, RI_a_2_u, 0, ESA_XA_370, "Vector Load Expanded (long HFP)", old_vector)
DEFINE_INSTRUCTION(VM, RI_a_2_u, 0, ESA_XA_370, "Vector Multiply (32)", old_vector)
DEFINE_INSTRUCTION(VMAD, RI_a_2_u, 0, ESA_XA_370, "Vector Multiply And Add (long HFP)", old_vector)
DEFINE_INSTRUCTION(VMADS, RI_a_2_u, 0, ESA_XA_370, "Vector Multiply And Add (long HFP)", old_vector)
DEFINE_INSTRUCTION(VMAE, VRR_d_5, 1704, UNI_ESA_XA_370_SINCE_Z13, "Vector Multiply and Add Even")
DEFINE_INSTRUCTION(VMAES, RI_a_2_u, 0, ESA_XA_370, "Vector Multiply And Add (short HFP)", old_vector)
DEFINE_INSTRUCTION(VMAH, VRR_d_5, 1703, UNI_SINCE_Z13, "Vector Multiply and Add High")
DEFINE_INSTRUCTION(VMAL, VRR_d_5, 1703, UNI_SINCE_Z13, "Vector Multiply and Add Low")
DEFINE_INSTRUCTION(VMALE, VRR_d_5, 1704, UNI_SINCE_Z13, "Vector Multiply and Add Logical Even")
DEFINE_INSTRUCTION(VMALH, VRR_d_5, 1703, UNI_SINCE_Z13, "Vector Multiply and Add Logical High")
DEFINE_INSTRUCTION(VMALO, VRR_d_5, 1705, UNI_SINCE_Z13, "Vector Multiply and Add Logical Odd")
DEFINE_INSTRUCTION(VMAO, VRR_d_5, 1705, UNI_SINCE_Z13, "Vector Multiply and Add Odd")
DEFINE_INSTRUCTION(VMCD, RI_a_2_u, 0, ESA_XA_370, "Vector Multiply And Accumulate (long HFP)", old_vector)
DEFINE_INSTRUCTION(VMCE, RI_a_2_u, 0, ESA_XA_370, "Vector Multiply And Accumulate (short HFP)", old_vector)
DEFINE_INSTRUCTION(VMD, RI_a_2_u, 0, ESA_XA_370, "Vector Multiply (long HFP)", old_vector)
DEFINE_INSTRUCTION(VMDS, RI_a_2_u, 0, ESA_XA_370, "Vector Multiply (long HFP)", old_vector)
DEFINE_INSTRUCTION(VME, VRR_c_4, 1707, UNI_ESA_XA_370_SINCE_Z13, "Vector Multiply Even")
DEFINE_INSTRUCTION(VMES, RI_a_2_u, 0, ESA_XA_370, "Vector Multiply (short HFP)", old_vector)
DEFINE_INSTRUCTION(VMH, VRR_c_4, 1705, UNI_SINCE_Z13, "Vector Multiply High")
DEFINE_INSTRUCTION(VML, VRR_c_4, 1706, UNI_SINCE_Z13, "Vector Multiply Low")
DEFINE_INSTRUCTION(VMLE, VRR_c_4, 1707, UNI_SINCE_Z13, "Vector Multiply Logical Even")
DEFINE_INSTRUCTION(VMLH, VRR_c_4, 1705, UNI_SINCE_Z13, "Vector Multiply Logical High")
DEFINE_INSTRUCTION(VMLO, VRR_c_4, 1707, UNI_SINCE_Z13, "Vector Multiply Logical Odd")
DEFINE_INSTRUCTION(VMN, VRR_c_4, 1702, UNI_SINCE_Z13, "Vector Minimum")
DEFINE_INSTRUCTION(VMNL, VRR_c_4, 1702, UNI_SINCE_Z13, "Vector Minimum Logical")
DEFINE_INSTRUCTION(VMNSD, RRE_2, 0, ESA_XA_370, "Vector Minimum Signed (long HFP)", old_vector)
DEFINE_INSTRUCTION(VMNSE, RRE_2, 0, ESA_XA_370, "Vector Minimum Signed (short HFP)", old_vector)
DEFINE_INSTRUCTION(VMO, VRR_c_4, 1707, UNI_SINCE_Z13, "Vector Multiply Odd")
DEFINE_INSTRUCTION(VMP, VRI_f_5, 1798, UNI_SINCE_Z14, "Vector Multiply Decimal", vector_decimal_arithmetic)
DEFINE_INSTRUCTION(VMRH, VRR_c_4, 1671, UNI_SINCE_Z13, "Vector Merge High")
DEFINE_INSTRUCTION(VMRL, VRR_c_4, 1671, UNI_SINCE_Z13, "Vector Merge Low")
DEFINE_INSTRUCTION(VMRRS, RRE_2, 0, ESA_XA_370, "Restore VMR", old_vector)
DEFINE_INSTRUCTION(VMRSV, RRE_2, 0, ESA_XA_370, "Save VMR", old_vector)
DEFINE_INSTRUCTION(VMS, RI_a_2_u, 0, ESA_XA_370, "Vector Multiply (32)", old_vector)
DEFINE_INSTRUCTION(VMSD, RI_a_2_u, 0, ESA_XA_370, "Vector Multiply And Subtract (long HFP)", old_vector)
DEFINE_INSTRUCTION(VMSDS, RI_a_2_u, 0, ESA_XA_370, "Vector Multiply And Subtract (long HFP)", old_vector)
DEFINE_INSTRUCTION(VMSE, RI_a_2_u, 0, ESA_XA_370, "Vector Multiply And Subtract (short HFP)", old_vector)
DEFINE_INSTRUCTION(VMSES, RI_a_2_u, 0, ESA_XA_370, "Vector Multiply And Subtract (short HFP)", old_vector)
DEFINE_INSTRUCTION(VMSL, VRR_d_6, 1708, UNI_SINCE_Z14, "Vector Multiply Sum Logical")
DEFINE_INSTRUCTION(VMSP, VRI_f_5, 1799, UNI_SINCE_Z14, "Vector Multiply And Shift Decimal", vector_decimal_arithmetic)
DEFINE_INSTRUCTION(VMX, VRR_c_4, 1702, UNI_SINCE_Z13, "Vector Maximum")
DEFINE_INSTRUCTION(VMXAD, RRE_2, 0, ESA_XA_370, "Vector Maximum Absolute (long HFP)", old_vector)
DEFINE_INSTRUCTION(VMXAE, RRE_2, 0, ESA_XA_370, "Vector Maximum Absolute (short HFP)", old_vector)
DEFINE_INSTRUCTION(VMXL, VRR_c_4, 1702, UNI_SINCE_Z13, "Vector Maximum Logical")
DEFINE_INSTRUCTION(VMXSE, RRE_2, 0, ESA_XA_370, "Vector Maximum Signed (short HFP)", old_vector)
DEFINE_INSTRUCTION(VN, VRR_c_3, 1690, UNI_ESA_XA_370_SINCE_Z13, "Vector AND")
DEFINE_INSTRUCTION(VNC, VRR_c_3, 1690, UNI_SINCE_Z13, "Vector And with Complement")
DEFINE_INSTRUCTION(VNN, VRR_c_3, 1709, UNI_SINCE_Z14, "Vector Nand")
DEFINE_INSTRUCTION(VNO, VRR_c_3, 1709, UNI_SINCE_Z13, "Vector NOR")
DEFINE_INSTRUCTION(VNS, RI_a_2_u, 0, ESA_XA_370, "Vector And", old_vector)
DEFINE_INSTRUCTION(VNVM, RRE_2, 0, ESA_XA_370, "And to VMR", old_vector)
DEFINE_INSTRUCTION(VNX, VRR_c_3, 1709, UNI_SINCE_Z14, "Vector Not Exclusive Or")
DEFINE_INSTRUCTION(VO, VRR_c_3, 1710, UNI_ESA_XA_370_SINCE_Z13, "Vector OR")
DEFINE_INSTRUCTION(VOC, VRR_c_3, 1710, UNI_SINCE_Z14, "Vector Or With Complement")
DEFINE_INSTRUCTION(VOS, RI_a_2_u, 0, ESA_XA_370, "Vector Or", old_vector)
DEFINE_INSTRUCTION(VOVM, RRE_2, 0, ESA_XA_370, "Or To VMR", old_vector)
DEFINE_INSTRUCTION(VPDI, VRR_c_4, 1674, UNI_SINCE_Z13, "Vector Permute Doubleword Immediate")
DEFINE_INSTRUCTION(VPERM, VRR_e_4, 1674, UNI_SINCE_Z13, "Vector Permute")
DEFINE_INSTRUCTION(VPK, VRR_c_4, 1672, UNI_SINCE_Z13, "Vector Pack")
DEFINE_INSTRUCTION(VPKLS, VRR_b_5, 1673, UNI_SINCE_Z13, "Vector Pack Logical Saturate", vector_saturate)
DEFINE_INSTRUCTION(VPKS, VRR_b_5, 1672, UNI_SINCE_Z13, "Vector Pack Saturate", vector_saturate)
DEFINE_INSTRUCTION(VPKZ, VSI_3, 1800, UNI_SINCE_Z14, "Vector Pack Zoned")
DEFINE_INSTRUCTION(VPKZR, VRI_f_5, 1801, UNI_SINCE_Z16, "Vector Pack Zoned Register", vpkzr_special)
DEFINE_INSTRUCTION(VPOPCT, VRR_a_3, 1710, UNI_SINCE_Z13, "Vector Population Count")
DEFINE_INSTRUCTION(VPSOP, VRI_g_5_u, 1802, UNI_SINCE_Z14, "Vector Perform Sign Operation Decimal", vpsop_special)
DEFINE_INSTRUCTION(VR, VRR_c_5, 1711, UNI_SINCE_Z17, "Vector Remainder")
DEFINE_INSTRUCTION(VRCL, RRE_2, 0, ESA_XA_370, "Clear VR", old_vector)
DEFINE_INSTRUCTION(VREP, VRI_c_4, 1675, UNI_SINCE_Z13, "Vector Replicate")
DEFINE_INSTRUCTION(VREPI, VRI_a_3, 1675, UNI_SINCE_Z13, "Vector Replicate Immediate")
DEFINE_INSTRUCTION(VRL, VRR_c_5, 1711, UNI_SINCE_Z17, "Vector Remainder Logical")
DEFINE_INSTRUCTION(VRP, VRI_f_5, 1805, UNI_SINCE_Z14, "Vector Remainder Decimal", vector_decimal_arithmetic)
DEFINE_INSTRUCTION(VRRS, RRE_2, 0, ESA_XA_370, "Restore VR", old_vector)
DEFINE_INSTRUCTION(VRSV, RRE_2, 0, ESA_XA_370, "Save VR", old_vector)
DEFINE_INSTRUCTION(VRSVC, RRE_2, 0, ESA_XA_370, "Save Changed VR", old_vector)
DEFINE_INSTRUCTION(VS, VRR_c_4, 1717, UNI_ESA_XA_370_SINCE_Z13, "Vector Subtract")
DEFINE_INSTRUCTION(VSBCBI, VRR_d_5, 1719, UNI_SINCE_Z13, "Vector Subtract With Borrow Compute Borrow Indication")
DEFINE_INSTRUCTION(VSBI, VRR_d_5, 1719, UNI_SINCE_Z13, "Vector Subtract With Borrow Indication")
DEFINE_INSTRUCTION(VSCBI, VRR_c_4, 1718, UNI_SINCE_Z13, "Vector Subtract Compute Borrow Indication")
DEFINE_INSTRUCTION(VSCEF, VRV_3, 1676, UNI_SINCE_Z13, "Vector Scatter Element (32)")
DEFINE_INSTRUCTION(VSCEG, VRV_3, 1676, UNI_SINCE_Z13, "Vector Scatter Element (64)")
DEFINE_INSTRUCTION(VSCHP, VRR_b_5, 1787, UNI_SINCE_Z16, "Decimal Scale And Convert To HFP")
DEFINE_INSTRUCTION(VSCSHP, VRR_b_3, 1786, UNI_SINCE_Z16, "Decimal Scale And Convert And Split To HFP")
DEFINE_INSTRUCTION(VSD, RI_a_2_u, 0, ESA_XA_370, "Vector Subtract (long HFP)", old_vector)
DEFINE_INSTRUCTION(VSDP, VRI_f_5, 1806, UNI_SINCE_Z14, "Vector Shift And Divide Decimal", vector_decimal_arithmetic)
DEFINE_INSTRUCTION(VSDS, RI_a_2_u, 0, ESA_XA_370, "Vector Subtract (long HFP)", old_vector)
DEFINE_INSTRUCTION(VSE, RI_a_2_u, 0, ESA_XA_370, "Vector Subtract (short HFP)", old_vector)
DEFINE_INSTRUCTION(VSEG, VRR_a_3, 1676, UNI_SINCE_Z13, "Vector Sign Extend to Doubleword")
DEFINE_INSTRUCTION(VSEL, VRR_e_4, 1676, UNI_SINCE_Z13, "Vector Select")
DEFINE_INSTRUCTION(VSES, RI_a_2_u, 0, ESA_XA_370, "Vector Subtract (short HFP)", old_vector)
DEFINE_INSTRUCTION(VSL, VRR_c_3, 1715, UNI_SINCE_Z13, "Vector Shift Left")
DEFINE_INSTRUCTION(VSLB, VRR_c_3, 1715, UNI_SINCE_Z13, "Vector Shift Left By Byte")
DEFINE_INSTRUCTION(VSLD, VRI_d_4, 1715, UNI_SINCE_Z15, "Vector Shift Left Double By Bit")
DEFINE_INSTRUCTION(VSLDB, VRI_d_4, 1716, UNI_SINCE_Z13, "Vector Shift Left Double By Byte")
DEFINE_INSTRUCTION(VSLL, RRE_2, 0, ESA_XA_370, "Vector Shift Left Single Logical", old_vector)
DEFINE_INSTRUCTION(VSP, VRI_f_5, 1811, UNI_SINCE_Z14, "Vector Subtract Decimal", vector_decimal_arithmetic)
DEFINE_INSTRUCTION(VSPSD, RRE_2, 0, ESA_XA_370, "Vector Sum Partial Sums", old_vector)
DEFINE_INSTRUCTION(VSRA, VRR_c_3, 1716, UNI_SINCE_Z13, "Vector Shift Right Arithmetic")
DEFINE_INSTRUCTION(VSRAB, VRR_c_3, 1716, UNI_SINCE_Z13, "Vector Shift Right Arithmetic By Byte")
DEFINE_INSTRUCTION(VSRD, VRI_d_4, 1717, UNI_SINCE_Z15, "Vector Shift Right Double By Bit")
DEFINE_INSTRUCTION(VSRL, VRR_c_3, 1717, UNI_ESA_XA_370_SINCE_Z13, "Vector Shift Right Logical")
DEFINE_INSTRUCTION(VSRLB, VRR_c_3, 1717, UNI_SINCE_Z13, "Vector Shift Right Logical By Byte")
DEFINE_INSTRUCTION(VSRP, VRI_g_5_s, 1808, UNI_SINCE_Z14, "Vector Shift And Round Decimal", vector_decimal_arithmetic)
DEFINE_INSTRUCTION(VSRPR, VRI_f_5, 1810, UNI_SINCE_Z16, "Vector Shift And Round Decimal Register", vector_decimal_arithmetic)
DEFINE_INSTRUCTION(VSRRS, RRE_2, 0, ESA_XA_370, "Restore VSR", old_vector)
DEFINE_INSTRUCTION(VSRSV, RRE_2, 0, ESA_XA_370, "Save VSR", old_vector)
DEFINE_INSTRUCTION(VSS, RI_a_2_u, 0, ESA_XA_370, "Vector Subtract (32)", old_vector)
DEFINE_INSTRUCTION(VST, VRX_3_opt, 1677, UNI_ESA_XA_370_SINCE_Z13, "Vector Store")
DEFINE_INSTRUCTION(VSTBR, VRX_3, 1678, UNI_SINCE_Z15, "Vector Store Byte Reversed Elements")
DEFINE_INSTRUCTION(VSTD, RI_a_2_u, 0, ESA_XA_370, "Vector Store (long HFP)", old_vector)
DEFINE_INSTRUCTION(VSTEB, VRX_3, 1679, UNI_SINCE_Z13, "Vector Store Element (8)")
DEFINE_INSTRUCTION(VSTEBRF, VRX_3, 1677, UNI_SINCE_Z15, "Vector Store Byte Reversed Element (32)")
DEFINE_INSTRUCTION(VSTEBRG, VRX_3, 1677, UNI_SINCE_Z15, "Vector Store Byte Reversed Element (64)")
DEFINE_INSTRUCTION(VSTEBRH, VRX_3, 1677, UNI_SINCE_Z15, "Vector Store Byte Reversed Element (16)")
DEFINE_INSTRUCTION(VSTEF, VRX_3, 1679, UNI_SINCE_Z13, "Vector Store Element (32)")
DEFINE_INSTRUCTION(VSTEG, VRX_3, 1679, UNI_SINCE_Z13, "Vector Store Element (64)")
DEFINE_INSTRUCTION(VSTEH, VRX_3, 1679, UNI_SINCE_Z13, "Vector Store Element (16)")
DEFINE_INSTRUCTION(VSTER, VRX_3, 1679, UNI_SINCE_Z15, "Vector Store Elements Reversed")
DEFINE_INSTRUCTION(VSTH, RI_a_2_u, 0, ESA_XA_370, "Vector Store Halfword", old_vector)
DEFINE_INSTRUCTION(VSTI, RRE_2, 0, ESA_XA_370, "Vector Store Indirect (32)", old_vector)
DEFINE_INSTRUCTION(VSTID, RRE_2, 0, ESA_XA_370, "Vector Store Indirect (long HFP)", old_vector)
DEFINE_INSTRUCTION(VSTK, RI_a_2_u, 0, ESA_XA_370, "Vector Store Compressed (32)", old_vector)
DEFINE_INSTRUCTION(VSTKD, RI_a_2_u, 0, ESA_XA_370, "Vector Store Compressed (long HFP)", old_vector)
DEFINE_INSTRUCTION(VSTL, VRS_b_3, 1681, UNI_SINCE_Z13, "Vector Store With Length")
DEFINE_INSTRUCTION(VSTM, VRS_a_4_opt, 1680, UNI_ESA_XA_370_SINCE_Z13, "Vector Store Multiple")
DEFINE_INSTRUCTION(VSTMD, RI_a_2_u, 0, ESA_XA_370, "Vector Store Matched (long HFP)", old_vector)
DEFINE_INSTRUCTION(VSTRC, VRR_d_6_opt, 1728, UNI_SINCE_Z13, "Vector String Range Compare", vstrc_special)
DEFINE_INSTRUCTION(VSTRL, VSI_3, 1681, UNI_SINCE_Z14, "Vector Store Rightmost With Length")
DEFINE_INSTRUCTION(VSTRLR, VRS_d_3, 1680, UNI_SINCE_Z14, "Vector Store Rightmost With Length")
DEFINE_INSTRUCTION(VSTRS, VRR_d_6_opt, 1730, UNI_SINCE_Z15, "Vector String Search", vector_string_search_special)
DEFINE_INSTRUCTION(VSTVM, RRE_2, 0, ESA_XA_370, "Store VMR", old_vector)
DEFINE_INSTRUCTION(VSTVP, RRE_2, 0, ESA_XA_370, "Store Vector Parameters", old_vector)
DEFINE_INSTRUCTION(VSUM, VRR_c_4, 1720, UNI_SINCE_Z13, "Vector Sum Across Word")
DEFINE_INSTRUCTION(VSUMG, VRR_c_4, 1720, UNI_SINCE_Z13, "Vector Sum Across Doubleword")
DEFINE_INSTRUCTION(VSUMQ, VRR_c_4, 1720, UNI_SINCE_Z13, "Vector Sum Across Quadword")
DEFINE_INSTRUCTION(VSVMM, RRE_2, 0, ESA_XA_370, "Set Vector Mask Mode", old_vector)
DEFINE_INSTRUCTION(VTM, VRR_a_2, 1721, UNI_SINCE_Z13, "Vector Test Under Mask", tm_old_special)
DEFINE_INSTRUCTION(VTP, VRR_g_2_opt, 1813, UNI_SINCE_Z17, "Vector Test Decimal", test_decimal_special)
DEFINE_INSTRUCTION(VTP, VRR_g_1, 1813, SINCE_Z14_TILL_Z17, "Vector Test Decimal", test_decimal_special)
DEFINE_INSTRUCTION(VTVM, RRE_2, 0, ESA_XA_370, "Test VMR", old_vector)
DEFINE_INSTRUCTION(VTZ, VRI_l_3, 1814, UNI_SINCE_Z17, "Vector Test Zoned", test_decimal_special)
DEFINE_INSTRUCTION(VUPH, VRR_a_3, 1681, UNI_SINCE_Z13, "Vector Unpack High")
DEFINE_INSTRUCTION(VUPKZ, VSI_3, 1817, UNI_SINCE_Z14, "Vector Unpack Zoned")
DEFINE_INSTRUCTION(VUPKZH, VRR_k_3, 1818, UNI_SINCE_Z16, "Vector Unpack Zoned High")
DEFINE_INSTRUCTION(VUPKZL, VRR_k_3, 1819, UNI_SINCE_Z16, "Vector Unpack Zoned Low")
DEFINE_INSTRUCTION(VUPL, VRR_a_3, 1682, UNI_SINCE_Z13, "Vector Unpack Low")
DEFINE_INSTRUCTION(VUPLH, VRR_a_3, 1682, UNI_SINCE_Z13, "Vector Unpack Logical High")
DEFINE_INSTRUCTION(VUPLL, VRR_a_3, 1683, UNI_SINCE_Z13, "Vector Unpack Logical Low")
DEFINE_INSTRUCTION(VX, VRR_c_3, 1699, UNI_ESA_XA_370_SINCE_Z13, "Vector Exclusive OR")
DEFINE_INSTRUCTION(VXELD, RRE_2, 0, ESA_XA_370, "Vector Extract Element (long HFP)", old_vector)
DEFINE_INSTRUCTION(VXELE, RRE_2, 0, ESA_XA_370, "Vector Extract Element (short HFP)", old_vector)
DEFINE_INSTRUCTION(VXS, RI_a_2_u, 0, ESA_XA_370, "Vector Exclusive Or", old_vector)
DEFINE_INSTRUCTION(VXVC, RRE_2, 0, ESA_XA_370, "Extract VCT", old_vector)
DEFINE_INSTRUCTION(VXVM, RRE_2, 0, ESA_XA_370, "Exclusive Or To VMR", old_vector)
DEFINE_INSTRUCTION(VXVMM, RRE_2, 0, ESA_XA_370, "Extract Vector Mask Mode", old_vector)
DEFINE_INSTRUCTION(VZPSD, RRE_2, 0, ESA_XA_370, "Vector Zero Partial Sums", old_vector)
DEFINE_INSTRUCTION(WFC, VRR_a_4, 1741, UNI_SINCE_Z13, "Vector FP Compare Scalar", fp_compare)
DEFINE_INSTRUCTION(WFK, VRR_a_4, 1742, UNI_SINCE_Z13, "Vector FP Compare and Signal Scalar", fp_compare)
DEFINE_INSTRUCTION(WRD, SI_2_u, 0, UNI_370, "Write Direct")
DEFINE_INSTRUCTION(X, RX_a_2_ux, 806, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Exclusive Or (32)", logical)
DEFINE_INSTRUCTION(XC, SS_a_2_s, 806, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Exclusive Or (character)", logical)
DEFINE_INSTRUCTION(XG, RXY_a_2, 806, UNI_SINCE_ZOP, "Exclusive Or (64)", logical)
DEFINE_INSTRUCTION(XGR, RRE_2, 806, UNI_SINCE_ZOP, "Exclusive Or (64)", logical)
DEFINE_INSTRUCTION(XGRK, RRF_a_3, 806, UNI_SINCE_Z11, "Exclusive Or (64)", logical)
DEFINE_INSTRUCTION(XI, SI_2_u, 806, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Exclusive Or Immediate", logical)
DEFINE_INSTRUCTION(XIHF, RIL_a_2, 807, UNI_SINCE_Z9, "Exclusive Or Immediate (high)", logical)
DEFINE_INSTRUCTION(XILF, RIL_a_2, 807, UNI_SINCE_Z9, "Exclusive Or Immediate (low)", logical)
DEFINE_INSTRUCTION(XIY, SIY_2_su, 806, UNI_SINCE_YOP, "Exclusive Or Immediate", logical)
DEFINE_INSTRUCTION(XR, RR_2, 806, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Exclusive Or (32)", logical)
DEFINE_INSTRUCTION(XRK, RRF_a_3, 806, UNI_SINCE_Z11, "Exclusive Or (32)", logical)
DEFINE_INSTRUCTION(XSCH, S_0, 1331, UNI_ESA_SINCE_ZOP, "Cancel Subchannel", cancel_special, privileged, has_parameter_list)
DEFINE_INSTRUCTION(XY, RXY_a_2, 806, UNI_SINCE_YOP, "Exclusive Or (32)", logical)
DEFINE_INSTRUCTION(ZAP, SS_b_2, 1030, UNI_ESA_XA_370_DOS_SINCE_ZOP, "Zero and Add", arithmetic)

DEFINE_MNEMONIC(B, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 15 } })
DEFINE_MNEMONIC(BE, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 8 } })
DEFINE_MNEMONIC(BER, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 8 } })
DEFINE_MNEMONIC(BH, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 2 } })
DEFINE_MNEMONIC(BHR, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 2 } })
DEFINE_MNEMONIC(BI, BIC, UNI_SINCE_Z14, { { 15 } })
DEFINE_MNEMONIC(BIE, BIC, UNI_SINCE_Z14, { { 8 } })
DEFINE_MNEMONIC(BIH, BIC, UNI_SINCE_Z14, { { 2 } })
DEFINE_MNEMONIC(BIL, BIC, UNI_SINCE_Z14, { { 4 } })
DEFINE_MNEMONIC(BIM, BIC, UNI_SINCE_Z14, { { 4 } })
DEFINE_MNEMONIC(BINE, BIC, UNI_SINCE_Z14, { { 7 } })
DEFINE_MNEMONIC(BINH, BIC, UNI_SINCE_Z14, { { 13 } })
DEFINE_MNEMONIC(BINL, BIC, UNI_SINCE_Z14, { { 11 } })
DEFINE_MNEMONIC(BINM, BIC, UNI_SINCE_Z14, { { 11 } })
DEFINE_MNEMONIC(BINO, BIC, UNI_SINCE_Z14, { { 14 } })
DEFINE_MNEMONIC(BINP, BIC, UNI_SINCE_Z14, { { 13 } })
DEFINE_MNEMONIC(BINZ, BIC, UNI_SINCE_Z14, { { 7 } })
DEFINE_MNEMONIC(BIO, BIC, UNI_SINCE_Z14, { { 1 } })
DEFINE_MNEMONIC(BIP, BIC, UNI_SINCE_Z14, { { 2 } })
DEFINE_MNEMONIC(BIZ, BIC, UNI_SINCE_Z14, { { 8 } })
DEFINE_MNEMONIC(BL, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 4 } })
DEFINE_MNEMONIC(BLR, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 4 } })
DEFINE_MNEMONIC(BM, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 4 } })
DEFINE_MNEMONIC(BMR, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 4 } })
DEFINE_MNEMONIC(BNE, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 7 } })
DEFINE_MNEMONIC(BNER, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 7 } })
DEFINE_MNEMONIC(BNH, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 13 } })
DEFINE_MNEMONIC(BNHR, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 13 } })
DEFINE_MNEMONIC(BNL, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 11 } })
DEFINE_MNEMONIC(BNLR, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 11 } })
DEFINE_MNEMONIC(BNM, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 11 } })
DEFINE_MNEMONIC(BNMR, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 11 } })
DEFINE_MNEMONIC(BNO, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 14 } })
DEFINE_MNEMONIC(BNOR, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 14 } })
DEFINE_MNEMONIC(BNP, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 13 } })
DEFINE_MNEMONIC(BNPR, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 13 } })
DEFINE_MNEMONIC(BNZ, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 7 } })
DEFINE_MNEMONIC(BNZR, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 7 } })
DEFINE_MNEMONIC(BO, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 1 } })
DEFINE_MNEMONIC(BOR, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 1 } })
DEFINE_MNEMONIC(BP, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 2 } })
DEFINE_MNEMONIC(BPR, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 2 } })
DEFINE_MNEMONIC(BR, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 15 } })
DEFINE_MNEMONIC(BRE, BRC, UNI_ESA_SINCE_ZOP, { { 8 } })
DEFINE_MNEMONIC(BREL, BRCL, UNI_SINCE_ZOP, { { 8 } })
DEFINE_MNEMONIC(BRH, BRC, UNI_ESA_SINCE_ZOP, { { 2 } })
DEFINE_MNEMONIC(BRHL, BRCL, UNI_SINCE_ZOP, { { 2 } })
DEFINE_MNEMONIC(BRL, BRC, UNI_ESA_SINCE_ZOP, { { 4 } })
DEFINE_MNEMONIC(BRLL, BRCL, UNI_SINCE_ZOP, { { 4 } })
DEFINE_MNEMONIC(BRM, BRC, UNI_ESA_SINCE_ZOP, { { 4 } })
DEFINE_MNEMONIC(BRML, BRCL, UNI_SINCE_ZOP, { { 4 } })
DEFINE_MNEMONIC(BRNE, BRC, UNI_ESA_SINCE_ZOP, { { 7 } })
DEFINE_MNEMONIC(BRNEL, BRCL, UNI_SINCE_ZOP, { { 7 } })
DEFINE_MNEMONIC(BRNH, BRC, UNI_ESA_SINCE_ZOP, { { 13 } })
DEFINE_MNEMONIC(BRNHL, BRCL, UNI_SINCE_ZOP, { { 13 } })
DEFINE_MNEMONIC(BRNL, BRC, UNI_ESA_SINCE_ZOP, { { 11 } })
DEFINE_MNEMONIC(BRNLL, BRCL, UNI_SINCE_ZOP, { { 11 } })
DEFINE_MNEMONIC(BRNM, BRC, UNI_ESA_SINCE_ZOP, { { 11 } })
DEFINE_MNEMONIC(BRNML, BRCL, UNI_SINCE_ZOP, { { 11 } })
DEFINE_MNEMONIC(BRNO, BRC, UNI_ESA_SINCE_ZOP, { { 14 } })
DEFINE_MNEMONIC(BRNOL, BRCL, UNI_SINCE_ZOP, { { 14 } })
DEFINE_MNEMONIC(BRNP, BRC, UNI_ESA_SINCE_ZOP, { { 13 } })
DEFINE_MNEMONIC(BRNPL, BRCL, UNI_SINCE_ZOP, { { 13 } })
DEFINE_MNEMONIC(BRNZ, BRC, UNI_ESA_SINCE_ZOP, { { 7 } })
DEFINE_MNEMONIC(BRNZL, BRCL, UNI_SINCE_ZOP, { { 7 } })
DEFINE_MNEMONIC(BRO, BRC, UNI_ESA_SINCE_ZOP, { { 1 } })
DEFINE_MNEMONIC(BROL, BRCL, UNI_SINCE_ZOP, { { 1 } })
DEFINE_MNEMONIC(BRP, BRC, UNI_ESA_SINCE_ZOP, { { 2 } })
DEFINE_MNEMONIC(BRPL, BRCL, UNI_SINCE_ZOP, { { 2 } })
DEFINE_MNEMONIC(BRU, BRC, UNI_ESA_SINCE_ZOP, { { 15 } })
DEFINE_MNEMONIC(BRUL, BRCL, UNI_SINCE_ZOP, { { 15 } })
DEFINE_MNEMONIC(BRZ, BRC, UNI_ESA_SINCE_ZOP, { { 8 } })
DEFINE_MNEMONIC(BRZL, BRCL, UNI_SINCE_ZOP, { { 8 } })
DEFINE_MNEMONIC(BZ, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 8 } })
DEFINE_MNEMONIC(BZR, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 8 } })
DEFINE_MNEMONIC(CGIBE, CGIB, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CGIBH, CGIB, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CGIBL, CGIB, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CGIBNE, CGIB, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CGIBNH, CGIB, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CGIBNL, CGIB, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CGIJE, CGIJ, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CGIJH, CGIJ, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CGIJL, CGIJ, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CGIJNE, CGIJ, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CGIJNH, CGIJ, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CGIJNL, CGIJ, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CGITE, CGIT, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CGITH, CGIT, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CGITL, CGIT, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CGITNE, CGIT, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CGITNH, CGIT, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CGITNL, CGIT, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CGRBE, CGRB, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CGRBH, CGRB, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CGRBL, CGRB, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CGRBNE, CGRB, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CGRBNH, CGRB, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CGRBNL, CGRB, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CGRJE, CGRJ, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CGRJH, CGRJ, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CGRJL, CGRJ, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CGRJNE, CGRJ, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CGRJNH, CGRJ, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CGRJNL, CGRJ, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CGRTE, CGRT, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CGRTH, CGRT, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CGRTL, CGRT, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CGRTNE, CGRT, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CGRTNH, CGRT, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CGRTNL, CGRT, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CIBE, CIB, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CIBH, CIB, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CIBL, CIB, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CIBNE, CIB, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CIBNH, CIB, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CIBNL, CIB, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CIJE, CIJ, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CIJH, CIJ, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CIJL, CIJ, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CIJNE, CIJ, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CIJNH, CIJ, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CIJNL, CIJ, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CITE, CIT, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CITH, CIT, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CITL, CIT, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CITNE, CIT, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CITNH, CIT, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CITNL, CIT, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CLFITE, CLFIT, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CLFITH, CLFIT, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CLFITL, CLFIT, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CLFITNE, CLFIT, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CLFITNH, CLFIT, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CLFITNL, CLFIT, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CLGIBE, CLGIB, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CLGIBH, CLGIB, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CLGIBL, CLGIB, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CLGIBNE, CLGIB, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CLGIBNH, CLGIB, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CLGIBNL, CLGIB, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CLGIJE, CLGIJ, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CLGIJH, CLGIJ, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CLGIJL, CLGIJ, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CLGIJNE, CLGIJ, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CLGIJNH, CLGIJ, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CLGIJNL, CLGIJ, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CLGITE, CLGIT, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CLGITH, CLGIT, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CLGITL, CLGIT, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CLGITNE, CLGIT, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CLGITNH, CLGIT, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CLGITNL, CLGIT, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CLGRBE, CLGRB, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CLGRBH, CLGRB, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CLGRBL, CLGRB, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CLGRBNE, CLGRB, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CLGRBNH, CLGRB, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CLGRBNL, CLGRB, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CLGRJE, CLGRJ, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CLGRJH, CLGRJ, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CLGRJL, CLGRJ, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CLGRJNE, CLGRJ, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CLGRJNH, CLGRJ, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CLGRJNL, CLGRJ, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CLGRTE, CLGRT, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CLGRTH, CLGRT, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CLGRTL, CLGRT, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CLGRTNE, CLGRT, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CLGRTNH, CLGRT, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CLGRTNL, CLGRT, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CLGTE, CLGT, UNI_SINCE_Z12, { { 1, 8 } })
DEFINE_MNEMONIC(CLGTH, CLGT, UNI_SINCE_Z12, { { 1, 2 } })
DEFINE_MNEMONIC(CLGTL, CLGT, UNI_SINCE_Z12, { { 1, 4 } })
DEFINE_MNEMONIC(CLGTNE, CLGT, UNI_SINCE_Z12, { { 1, 6 } })
DEFINE_MNEMONIC(CLGTNH, CLGT, UNI_SINCE_Z12, { { 1, 12 } })
DEFINE_MNEMONIC(CLGTNL, CLGT, UNI_SINCE_Z12, { { 1, 10 } })
DEFINE_MNEMONIC(CLIBE, CLIB, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CLIBH, CLIB, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CLIBL, CLIB, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CLIBNE, CLIB, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CLIBNH, CLIB, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CLIBNL, CLIB, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CLIJE, CLIJ, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CLIJH, CLIJ, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CLIJL, CLIJ, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CLIJNE, CLIJ, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CLIJNH, CLIJ, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CLIJNL, CLIJ, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CLRBE, CLRB, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CLRBH, CLRB, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CLRBL, CLRB, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CLRBNE, CLRB, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CLRBNH, CLRB, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CLRBNL, CLRB, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CLRJE, CLRJ, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CLRJH, CLRJ, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CLRJL, CLRJ, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CLRJNE, CLRJ, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CLRJNH, CLRJ, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CLRJNL, CLRJ, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CLRTE, CLRT, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CLRTH, CLRT, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CLRTL, CLRT, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CLRTNE, CLRT, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CLRTNH, CLRT, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CLRTNL, CLRT, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CLTE, CLT, UNI_SINCE_Z12, { { 1, 8 } })
DEFINE_MNEMONIC(CLTH, CLT, UNI_SINCE_Z12, { { 1, 2 } })
DEFINE_MNEMONIC(CLTL, CLT, UNI_SINCE_Z12, { { 1, 4 } })
DEFINE_MNEMONIC(CLTNE, CLT, UNI_SINCE_Z12, { { 1, 6 } })
DEFINE_MNEMONIC(CLTNH, CLT, UNI_SINCE_Z12, { { 1, 12 } })
DEFINE_MNEMONIC(CLTNL, CLT, UNI_SINCE_Z12, { { 1, 10 } })
DEFINE_MNEMONIC(CRBE, CRB, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CRBH, CRB, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CRBL, CRB, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CRBNE, CRB, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CRBNH, CRB, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CRBNL, CRB, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CRJE, CRJ, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CRJH, CRJ, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CRJL, CRJ, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CRJNE, CRJ, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CRJNH, CRJ, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CRJNL, CRJ, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(CRTE, CRT, UNI_SINCE_Z10, { { 2, 8 } })
DEFINE_MNEMONIC(CRTH, CRT, UNI_SINCE_Z10, { { 2, 2 } })
DEFINE_MNEMONIC(CRTL, CRT, UNI_SINCE_Z10, { { 2, 4 } })
DEFINE_MNEMONIC(CRTNE, CRT, UNI_SINCE_Z10, { { 2, 6 } })
DEFINE_MNEMONIC(CRTNH, CRT, UNI_SINCE_Z10, { { 2, 12 } })
DEFINE_MNEMONIC(CRTNL, CRT, UNI_SINCE_Z10, { { 2, 10 } })
DEFINE_MNEMONIC(J, BRC, UNI_ESA_SINCE_ZOP, { { 15 } })
DEFINE_MNEMONIC(JAS, BRAS, UNI_ESA_SINCE_ZOP, {})
DEFINE_MNEMONIC(JASL, BRASL, UNI_ESA_SINCE_ZOP, {})
DEFINE_MNEMONIC(JC, BRC, UNI_ESA_SINCE_ZOP, {})
DEFINE_MNEMONIC(JCT, BRCT, UNI_ESA_SINCE_ZOP, {})
DEFINE_MNEMONIC(JCTG, BRCTG, UNI_SINCE_ZOP, {})
DEFINE_MNEMONIC(JCTH, BRCTH, UNI_SINCE_Z11, {})
DEFINE_MNEMONIC(JE, BRC, UNI_ESA_SINCE_ZOP, { { 8 } })
DEFINE_MNEMONIC(JH, BRC, UNI_ESA_SINCE_ZOP, { { 2 } })
DEFINE_MNEMONIC(JL, BRC, UNI_ESA_SINCE_ZOP, { { 4 } })
DEFINE_MNEMONIC(JLC, BRCL, UNI_SINCE_ZOP, {})
DEFINE_MNEMONIC(JLE, BRCL, UNI_SINCE_ZOP, { { 8 } })
DEFINE_MNEMONIC(JLH, BRCL, UNI_SINCE_ZOP, { { 2 } })
DEFINE_MNEMONIC(JLL, BRCL, UNI_SINCE_ZOP, { { 4 } })
DEFINE_MNEMONIC(JLM, BRCL, UNI_SINCE_ZOP, { { 4 } })
DEFINE_MNEMONIC(JLNE, BRCL, UNI_SINCE_ZOP, { { 7 } })
DEFINE_MNEMONIC(JLNH, BRCL, UNI_SINCE_ZOP, { { 13 } })
DEFINE_MNEMONIC(JLNL, BRCL, UNI_SINCE_ZOP, { { 11 } })
DEFINE_MNEMONIC(JLNM, BRCL, UNI_SINCE_ZOP, { { 11 } })
DEFINE_MNEMONIC(JLNO, BRCL, UNI_SINCE_ZOP, { { 14 } })
DEFINE_MNEMONIC(JLNOP, BRCL, UNI_ESA_SINCE_ZOP, { { 0 } })
DEFINE_MNEMONIC(JLNP, BRCL, UNI_SINCE_ZOP, { { 13 } })
DEFINE_MNEMONIC(JLNZ, BRCL, UNI_SINCE_ZOP, { { 7 } })
DEFINE_MNEMONIC(JLO, BRCL, UNI_SINCE_ZOP, { { 1 } })
DEFINE_MNEMONIC(JLP, BRCL, UNI_SINCE_ZOP, { { 2 } })
DEFINE_MNEMONIC(JLU, BRCL, UNI_SINCE_ZOP, { { 15 } })
DEFINE_MNEMONIC(JLZ, BRCL, UNI_SINCE_ZOP, { { 8 } })
DEFINE_MNEMONIC(JM, BRC, UNI_ESA_SINCE_ZOP, { { 4 } })
DEFINE_MNEMONIC(JNE, BRC, UNI_ESA_SINCE_ZOP, { { 7 } })
DEFINE_MNEMONIC(JNH, BRC, UNI_ESA_SINCE_ZOP, { { 13 } })
DEFINE_MNEMONIC(JNL, BRC, UNI_ESA_SINCE_ZOP, { { 11 } })
DEFINE_MNEMONIC(JNM, BRC, UNI_ESA_SINCE_ZOP, { { 11 } })
DEFINE_MNEMONIC(JNO, BRC, UNI_ESA_SINCE_ZOP, { { 14 } })
DEFINE_MNEMONIC(JNOP, BRC, UNI_ESA_SINCE_ZOP, { { 0 } })
DEFINE_MNEMONIC(JNP, BRC, UNI_ESA_SINCE_ZOP, { { 13 } })
DEFINE_MNEMONIC(JNZ, BRC, UNI_ESA_SINCE_ZOP, { { 7 } })
DEFINE_MNEMONIC(JO, BRC, UNI_ESA_SINCE_ZOP, { { 1 } })
DEFINE_MNEMONIC(JP, BRC, UNI_ESA_SINCE_ZOP, { { 2 } })
DEFINE_MNEMONIC(JXH, BRXH, UNI_ESA_SINCE_ZOP, {})
DEFINE_MNEMONIC(JXHG, BRXHG, UNI_SINCE_ZOP, {})
DEFINE_MNEMONIC(JXLE, BRXLE, UNI_ESA_SINCE_ZOP, {})
DEFINE_MNEMONIC(JXLEG, BRXLG, UNI_SINCE_ZOP, {})
DEFINE_MNEMONIC(JZ, BRC, UNI_ESA_SINCE_ZOP, { { 8 } })
DEFINE_MNEMONIC(LDRV, VLLEBRZ, UNI_SINCE_Z15, { { 2, 3 } })
DEFINE_MNEMONIC(LERV, VLLEBRZ, UNI_SINCE_Z15, { { 2, 6 } })
DEFINE_MNEMONIC(LFI, IILF, UNI_SINCE_Z16, {})
DEFINE_MNEMONIC(LHHR, RISBHG, UNI_SINCE_Z11, { { 2, 0 }, { 31 } })
DEFINE_MNEMONIC(LHLR, RISBHG, UNI_SINCE_Z11, { { 2, 0 }, { 31 }, { 32 } })
DEFINE_MNEMONIC(LLCHHR, RISBHG, UNI_SINCE_Z11, { { 2, 24 }, { 0, 0x80 + 31 } })
DEFINE_MNEMONIC(LLCHLR, RISBHG, UNI_SINCE_Z11, { { 2, 24 }, { 0, 0x80 + 31 }, { 32 } })
DEFINE_MNEMONIC(LLCLHR, RISBLG, UNI_SINCE_Z11, { { 2, 24 }, { 0, 0x80 + 31 }, { 32 } })
DEFINE_MNEMONIC(LLGFI, LLILF, UNI_SINCE_Z16, {})
DEFINE_MNEMONIC(LLGHI, LLILL, UNI_SINCE_Z17, {})
DEFINE_MNEMONIC(LLHFR, RISBLG, UNI_SINCE_Z11, { { 2, 0 }, { 31 }, { 32 } })
DEFINE_MNEMONIC(LLHHHR, RISBHG, UNI_SINCE_Z11, { { 2, 16 }, { 0, 0x80 + 31 } })
DEFINE_MNEMONIC(LLHHLR, RISBHG, UNI_SINCE_Z11, { { 2, 16 }, { 0, 0x80 + 31 }, { 32 } })
DEFINE_MNEMONIC(LLHLHR, RISBLG, UNI_SINCE_Z11, { { 2, 16 }, { 0, 0x80 + 31 }, { 32 } })
DEFINE_MNEMONIC(LOCE, LOC, UNI_SINCE_Z11, { { 2, 8 } })
DEFINE_MNEMONIC(LOCFHE, LOCFH, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(LOCFHH, LOCFH, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(LOCFHL, LOCFH, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(LOCFHM, LOCFH, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(LOCFHNE, LOCFH, UNI_SINCE_Z13, { { 2, 7 } })
DEFINE_MNEMONIC(LOCFHNH, LOCFH, UNI_SINCE_Z13, { { 2, 13 } })
DEFINE_MNEMONIC(LOCFHNL, LOCFH, UNI_SINCE_Z13, { { 2, 11 } })
DEFINE_MNEMONIC(LOCFHNM, LOCFH, UNI_SINCE_Z13, { { 2, 11 } })
DEFINE_MNEMONIC(LOCFHNO, LOCFH, UNI_SINCE_Z13, { { 2, 14 } })
DEFINE_MNEMONIC(LOCFHNP, LOCFH, UNI_SINCE_Z13, { { 2, 13 } })
DEFINE_MNEMONIC(LOCFHNZ, LOCFH, UNI_SINCE_Z13, { { 2, 7 } })
DEFINE_MNEMONIC(LOCFHO, LOCFH, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(LOCFHP, LOCFH, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(LOCFHRE, LOCFHR, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(LOCFHRH, LOCFHR, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(LOCFHRL, LOCFHR, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(LOCFHRM, LOCFHR, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(LOCFHRNE, LOCFHR, UNI_SINCE_Z13, { { 2, 7 } })
DEFINE_MNEMONIC(LOCFHRNH, LOCFHR, UNI_SINCE_Z13, { { 2, 13 } })
DEFINE_MNEMONIC(LOCFHRNL, LOCFHR, UNI_SINCE_Z13, { { 2, 11 } })
DEFINE_MNEMONIC(LOCFHRNM, LOCFHR, UNI_SINCE_Z13, { { 2, 11 } })
DEFINE_MNEMONIC(LOCFHRNO, LOCFHR, UNI_SINCE_Z13, { { 2, 14 } })
DEFINE_MNEMONIC(LOCFHRNP, LOCFHR, UNI_SINCE_Z13, { { 2, 13 } })
DEFINE_MNEMONIC(LOCFHRNZ, LOCFHR, UNI_SINCE_Z13, { { 2, 7 } })
DEFINE_MNEMONIC(LOCFHRO, LOCFHR, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(LOCFHRP, LOCFHR, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(LOCFHRZ, LOCFHR, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(LOCFHZ, LOCFH, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(LOCGE, LOCG, UNI_SINCE_Z11, { { 2, 8 } })
DEFINE_MNEMONIC(LOCGH, LOCG, UNI_SINCE_Z11, { { 2, 2 } })
DEFINE_MNEMONIC(LOCGHIE, LOCGHI, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(LOCGHIH, LOCGHI, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(LOCGHIL, LOCGHI, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(LOCGHIM, LOCGHI, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(LOCGHINE, LOCGHI, UNI_SINCE_Z13, { { 2, 7 } })
DEFINE_MNEMONIC(LOCGHINH, LOCGHI, UNI_SINCE_Z13, { { 2, 13 } })
DEFINE_MNEMONIC(LOCGHINL, LOCGHI, UNI_SINCE_Z13, { { 2, 11 } })
DEFINE_MNEMONIC(LOCGHINM, LOCGHI, UNI_SINCE_Z13, { { 2, 11 } })
DEFINE_MNEMONIC(LOCGHINO, LOCGHI, UNI_SINCE_Z13, { { 2, 14 } })
DEFINE_MNEMONIC(LOCGHINP, LOCGHI, UNI_SINCE_Z13, { { 2, 13 } })
DEFINE_MNEMONIC(LOCGHINZ, LOCGHI, UNI_SINCE_Z13, { { 2, 7 } })
DEFINE_MNEMONIC(LOCGHIO, LOCGHI, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(LOCGHIP, LOCGHI, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(LOCGHIZ, LOCGHI, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(LOCGL, LOCG, UNI_SINCE_Z11, { { 2, 4 } })
DEFINE_MNEMONIC(LOCGM, LOCG, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(LOCGNE, LOCG, UNI_SINCE_Z11, { { 2, 6 } })
DEFINE_MNEMONIC(LOCGNH, LOCG, UNI_SINCE_Z11, { { 2, 12 } })
DEFINE_MNEMONIC(LOCGNL, LOCG, UNI_SINCE_Z11, { { 2, 10 } })
DEFINE_MNEMONIC(LOCGNM, LOCG, UNI_SINCE_Z13, { { 2, 10 } })
DEFINE_MNEMONIC(LOCGNO, LOCG, UNI_SINCE_Z13, { { 2, 14 } })
DEFINE_MNEMONIC(LOCGNP, LOCG, UNI_SINCE_Z13, { { 2, 12 } })
DEFINE_MNEMONIC(LOCGNZ, LOCG, UNI_SINCE_Z13, { { 2, 6 } })
DEFINE_MNEMONIC(LOCGO, LOCG, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(LOCGP, LOCG, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(LOCGRE, LOCGR, UNI_SINCE_Z11, { { 2, 8 } })
DEFINE_MNEMONIC(LOCGRH, LOCGR, UNI_SINCE_Z11, { { 2, 2 } })
DEFINE_MNEMONIC(LOCGRL, LOCGR, UNI_SINCE_Z11, { { 2, 4 } })
DEFINE_MNEMONIC(LOCGRM, LOCGR, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(LOCGRNE, LOCGR, UNI_SINCE_Z11, { { 2, 6 } })
DEFINE_MNEMONIC(LOCGRNH, LOCGR, UNI_SINCE_Z11, { { 2, 12 } })
DEFINE_MNEMONIC(LOCGRNL, LOCGR, UNI_SINCE_Z11, { { 2, 10 } })
DEFINE_MNEMONIC(LOCGRNM, LOCGR, UNI_SINCE_Z13, { { 2, 10 } })
DEFINE_MNEMONIC(LOCGRNO, LOCGR, UNI_SINCE_Z13, { { 2, 14 } })
DEFINE_MNEMONIC(LOCGRNP, LOCGR, UNI_SINCE_Z13, { { 2, 12 } })
DEFINE_MNEMONIC(LOCGRNZ, LOCGR, UNI_SINCE_Z13, { { 2, 6 } })
DEFINE_MNEMONIC(LOCGRO, LOCGR, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(LOCGRP, LOCGR, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(LOCGRZ, LOCGR, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(LOCGZ, LOCG, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(LOCH, LOC, UNI_SINCE_Z11, { { 2, 2 } })
DEFINE_MNEMONIC(LOCHHIE, LOCHHI, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(LOCHHIH, LOCHHI, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(LOCHHIL, LOCHHI, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(LOCHHIM, LOCHHI, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(LOCHHINE, LOCHHI, UNI_SINCE_Z13, { { 2, 7 } })
DEFINE_MNEMONIC(LOCHHINH, LOCHHI, UNI_SINCE_Z13, { { 2, 13 } })
DEFINE_MNEMONIC(LOCHHINL, LOCHHI, UNI_SINCE_Z13, { { 2, 11 } })
DEFINE_MNEMONIC(LOCHHINM, LOCHHI, UNI_SINCE_Z13, { { 2, 11 } })
DEFINE_MNEMONIC(LOCHHINO, LOCHHI, UNI_SINCE_Z13, { { 2, 14 } })
DEFINE_MNEMONIC(LOCHHINP, LOCHHI, UNI_SINCE_Z13, { { 2, 13 } })
DEFINE_MNEMONIC(LOCHHINZ, LOCHHI, UNI_SINCE_Z13, { { 2, 7 } })
DEFINE_MNEMONIC(LOCHHIO, LOCHHI, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(LOCHHIP, LOCHHI, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(LOCHHIZ, LOCHHI, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(LOCHIE, LOCHI, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(LOCHIH, LOCHI, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(LOCHIL, LOCHI, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(LOCHIM, LOCHI, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(LOCHINE, LOCHI, UNI_SINCE_Z13, { { 2, 7 } })
DEFINE_MNEMONIC(LOCHINH, LOCHI, UNI_SINCE_Z13, { { 2, 13 } })
DEFINE_MNEMONIC(LOCHINL, LOCHI, UNI_SINCE_Z13, { { 2, 11 } })
DEFINE_MNEMONIC(LOCHINM, LOCHI, UNI_SINCE_Z13, { { 2, 11 } })
DEFINE_MNEMONIC(LOCHINO, LOCHI, UNI_SINCE_Z13, { { 2, 14 } })
DEFINE_MNEMONIC(LOCHINP, LOCHI, UNI_SINCE_Z13, { { 2, 13 } })
DEFINE_MNEMONIC(LOCHINZ, LOCHI, UNI_SINCE_Z13, { { 2, 7 } })
DEFINE_MNEMONIC(LOCHIO, LOCHI, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(LOCHIP, LOCHI, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(LOCHIZ, LOCHI, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(LOCL, LOC, UNI_SINCE_Z11, { { 2, 4 } })
DEFINE_MNEMONIC(LOCM, LOC, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(LOCNE, LOC, UNI_SINCE_Z11, { { 2, 6 } })
DEFINE_MNEMONIC(LOCNH, LOC, UNI_SINCE_Z11, { { 2, 12 } })
DEFINE_MNEMONIC(LOCNL, LOC, UNI_SINCE_Z11, { { 2, 10 } })
DEFINE_MNEMONIC(LOCNM, LOC, UNI_SINCE_Z13, { { 2, 10 } })
DEFINE_MNEMONIC(LOCNO, LOC, UNI_SINCE_Z13, { { 2, 14 } })
DEFINE_MNEMONIC(LOCNP, LOC, UNI_SINCE_Z13, { { 2, 12 } })
DEFINE_MNEMONIC(LOCNZ, LOC, UNI_SINCE_Z13, { { 2, 6 } })
DEFINE_MNEMONIC(LOCO, LOC, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(LOCP, LOC, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(LOCRE, LOCR, UNI_SINCE_Z11, { { 2, 8 } })
DEFINE_MNEMONIC(LOCRH, LOCR, UNI_SINCE_Z11, { { 2, 2 } })
DEFINE_MNEMONIC(LOCRL, LOCR, UNI_SINCE_Z11, { { 2, 4 } })
DEFINE_MNEMONIC(LOCRM, LOCR, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(LOCRNE, LOCR, UNI_SINCE_Z11, { { 2, 6 } })
DEFINE_MNEMONIC(LOCRNH, LOCR, UNI_SINCE_Z11, { { 2, 12 } })
DEFINE_MNEMONIC(LOCRNL, LOCR, UNI_SINCE_Z11, { { 2, 10 } })
DEFINE_MNEMONIC(LOCRNM, LOCR, UNI_SINCE_Z13, { { 2, 10 } })
DEFINE_MNEMONIC(LOCRNO, LOCR, UNI_SINCE_Z13, { { 2, 14 } })
DEFINE_MNEMONIC(LOCRNP, LOCR, UNI_SINCE_Z13, { { 2, 12 } })
DEFINE_MNEMONIC(LOCRNZ, LOCR, UNI_SINCE_Z13, { { 2, 6 } })
DEFINE_MNEMONIC(LOCRO, LOCR, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(LOCRP, LOCR, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(LOCRZ, LOCR, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(LOCZ, LOC, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(NHHR, RNSBG, UNI_SINCE_Z11, { { 2, 0 }, { 31 } })
DEFINE_MNEMONIC(NHLR, RNSBG, UNI_SINCE_Z11, { { 2, 0 }, { 31 }, { 32 } })
DEFINE_MNEMONIC(NLHR, RNSBG, UNI_SINCE_Z11, { { 2, 32 }, { 63 }, { 32 } })
DEFINE_MNEMONIC(NOP, BC, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 0 } })
DEFINE_MNEMONIC(NOPR, BCR, UNI_ESA_XA_370_DOS_SINCE_ZOP, { { 0 } })
DEFINE_MNEMONIC(NOTGR, NOGRK, UNI_SINCE_Z15, { mnemonic_transformation(2, mnemonic_transformation_kind::copy, 1) })
DEFINE_MNEMONIC(NOTR, NORK, UNI_SINCE_Z15, { mnemonic_transformation(2, mnemonic_transformation_kind::copy, 1) })
DEFINE_MNEMONIC(OHHR, ROSBG, UNI_SINCE_Z11, { { 2, 0 }, { 31 } })
DEFINE_MNEMONIC(OHLR, ROSBG, UNI_SINCE_Z11, { { 2, 0 }, { 31 }, { 32 } })
DEFINE_MNEMONIC(OLHR, ROSBG, UNI_SINCE_Z11, { { 2, 32 }, { 63 }, { 32 } })
DEFINE_MNEMONIC(RISBGNZ, RISBGN, UNI_SINCE_Z12, { mnemonic_transformation(3, 0x80, mnemonic_transformation_kind::or_with, 3, false) })
DEFINE_MNEMONIC(RISBGZ, RISBG, UNI_SINCE_Z10, { mnemonic_transformation(3, 0x80, mnemonic_transformation_kind::or_with, 3, false) })
DEFINE_MNEMONIC(RISBHGZ, RISBHG, UNI_SINCE_Z11, { mnemonic_transformation(3, 0x80, mnemonic_transformation_kind::or_with, 3, false) })
DEFINE_MNEMONIC(RISBLGZ, RISBLG, UNI_SINCE_Z11, { mnemonic_transformation(3, 0x80, mnemonic_transformation_kind::or_with, 3, false) })
DEFINE_MNEMONIC(RNSBGT, RNSBG, UNI_SINCE_Z10, { mnemonic_transformation(2, 0x80, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(ROSBGT, ROSBG, UNI_SINCE_Z10, { mnemonic_transformation(2, 0x80, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(RXSBGT, RXSBG, UNI_SINCE_Z10, { mnemonic_transformation(2, 0x80, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(SELFHRE, SELFHR, UNI_SINCE_Z15, { { 3, 8 } })
DEFINE_MNEMONIC(SELFHRH, SELFHR, UNI_SINCE_Z15, { { 3, 2 } })
DEFINE_MNEMONIC(SELFHRL, SELFHR, UNI_SINCE_Z15, { { 3, 4 } })
DEFINE_MNEMONIC(SELFHRM, SELFHR, UNI_SINCE_Z15, { { 3, 4 } })
DEFINE_MNEMONIC(SELFHRNE, SELFHR, UNI_SINCE_Z15, { { 3, 7 } })
DEFINE_MNEMONIC(SELFHRNH, SELFHR, UNI_SINCE_Z15, { { 3, 13 } })
DEFINE_MNEMONIC(SELFHRNL, SELFHR, UNI_SINCE_Z15, { { 3, 11 } })
DEFINE_MNEMONIC(SELFHRNM, SELFHR, UNI_SINCE_Z15, { { 3, 11 } })
DEFINE_MNEMONIC(SELFHRNO, SELFHR, UNI_SINCE_Z15, { { 3, 14 } })
DEFINE_MNEMONIC(SELFHRNP, SELFHR, UNI_SINCE_Z15, { { 3, 13 } })
DEFINE_MNEMONIC(SELFHRNZ, SELFHR, UNI_SINCE_Z15, { { 3, 7 } })
DEFINE_MNEMONIC(SELFHRO, SELFHR, UNI_SINCE_Z15, { { 3, 1 } })
DEFINE_MNEMONIC(SELFHRP, SELFHR, UNI_SINCE_Z15, { { 3, 2 } })
DEFINE_MNEMONIC(SELFHRZ, SELFHR, UNI_SINCE_Z15, { { 3, 8 } })
DEFINE_MNEMONIC(SELGRE, SELGR, UNI_SINCE_Z15, { { 3, 8 } })
DEFINE_MNEMONIC(SELGRH, SELGR, UNI_SINCE_Z15, { { 3, 2 } })
DEFINE_MNEMONIC(SELGRL, SELGR, UNI_SINCE_Z15, { { 3, 4 } })
DEFINE_MNEMONIC(SELGRM, SELGR, UNI_SINCE_Z15, { { 3, 4 } })
DEFINE_MNEMONIC(SELGRNE, SELGR, UNI_SINCE_Z15, { { 3, 7 } })
DEFINE_MNEMONIC(SELGRNH, SELGR, UNI_SINCE_Z15, { { 3, 13 } })
DEFINE_MNEMONIC(SELGRNL, SELGR, UNI_SINCE_Z15, { { 3, 11 } })
DEFINE_MNEMONIC(SELGRNM, SELGR, UNI_SINCE_Z15, { { 3, 11 } })
DEFINE_MNEMONIC(SELGRNO, SELGR, UNI_SINCE_Z15, { { 3, 14 } })
DEFINE_MNEMONIC(SELGRNP, SELGR, UNI_SINCE_Z15, { { 3, 13 } })
DEFINE_MNEMONIC(SELGRNZ, SELGR, UNI_SINCE_Z15, { { 3, 7 } })
DEFINE_MNEMONIC(SELGRO, SELGR, UNI_SINCE_Z15, { { 3, 1 } })
DEFINE_MNEMONIC(SELGRP, SELGR, UNI_SINCE_Z15, { { 3, 2 } })
DEFINE_MNEMONIC(SELGRZ, SELGR, UNI_SINCE_Z15, { { 3, 8 } })
DEFINE_MNEMONIC(SELRE, SELR, UNI_SINCE_Z15, { { 3, 8 } })
DEFINE_MNEMONIC(SELRH, SELR, UNI_SINCE_Z15, { { 3, 2 } })
DEFINE_MNEMONIC(SELRL, SELR, UNI_SINCE_Z15, { { 3, 4 } })
DEFINE_MNEMONIC(SELRM, SELR, UNI_SINCE_Z15, { { 3, 4 } })
DEFINE_MNEMONIC(SELRNE, SELR, UNI_SINCE_Z15, { { 3, 7 } })
DEFINE_MNEMONIC(SELRNH, SELR, UNI_SINCE_Z15, { { 3, 13 } })
DEFINE_MNEMONIC(SELRNL, SELR, UNI_SINCE_Z15, { { 3, 11 } })
DEFINE_MNEMONIC(SELRNM, SELR, UNI_SINCE_Z15, { { 3, 11 } })
DEFINE_MNEMONIC(SELRNO, SELR, UNI_SINCE_Z15, { { 3, 14 } })
DEFINE_MNEMONIC(SELRNP, SELR, UNI_SINCE_Z15, { { 3, 13 } })
DEFINE_MNEMONIC(SELRNZ, SELR, UNI_SINCE_Z15, { { 3, 7 } })
DEFINE_MNEMONIC(SELRO, SELR, UNI_SINCE_Z15, { { 3, 1 } })
DEFINE_MNEMONIC(SELRP, SELR, UNI_SINCE_Z15, { { 3, 2 } })
DEFINE_MNEMONIC(SELRZ, SELR, UNI_SINCE_Z15, { { 3, 8 } })
DEFINE_MNEMONIC(SLLHH, RISBHG, UNI_SINCE_Z16, { mnemonic_transformation(2, 0, false), mnemonic_transformation(0, 0x80 + 31, mnemonic_transformation_kind::subtract_from, 2), mnemonic_transformation(0, mnemonic_transformation_kind::copy, 2), })
DEFINE_MNEMONIC(SLLHL, RISBHG, UNI_SINCE_Z16, { mnemonic_transformation(2, 0, false), mnemonic_transformation(0, 0x80 + 31, mnemonic_transformation_kind::subtract_from, 2), mnemonic_transformation(0, 32, mnemonic_transformation_kind::add_to, 2), })
DEFINE_MNEMONIC(SLLLH, RISBLG, UNI_SINCE_Z16, { mnemonic_transformation(2, 0, false), mnemonic_transformation(0, 0x80 + 31, mnemonic_transformation_kind::subtract_from, 2), mnemonic_transformation(0, 32, mnemonic_transformation_kind::add_to, 2), })
DEFINE_MNEMONIC(SRLHH, RISBHG, UNI_SINCE_Z16, { mnemonic_transformation(3, 0x80 + 31), mnemonic_transformation(0, 6, mnemonic_transformation_kind::complement, 2), })
DEFINE_MNEMONIC(SRLHL, RISBHG, UNI_SINCE_Z16, { mnemonic_transformation(3, 0x80 + 31), mnemonic_transformation(0, 32, mnemonic_transformation_kind::subtract_from, 2), })
DEFINE_MNEMONIC(SRLLH, RISBLG, UNI_SINCE_Z16, { mnemonic_transformation(3, 0x80 + 31), mnemonic_transformation(0, 32, mnemonic_transformation_kind::subtract_from, 2), })
DEFINE_MNEMONIC(STDRV, VSTEBRG, UNI_SINCE_Z15, { { 2, 0 } })
DEFINE_MNEMONIC(STERV, VSTEBRF, UNI_SINCE_Z15, { { 2, 0 } })
DEFINE_MNEMONIC(STOCE, STOC, UNI_SINCE_Z11, { { 2, 8 } })
DEFINE_MNEMONIC(STOCFHE, STOCFH, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(STOCFHH, STOCFH, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(STOCFHL, STOCFH, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(STOCFHM, STOCFH, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(STOCFHNE, STOCFH, UNI_SINCE_Z13, { { 2, 7 } })
DEFINE_MNEMONIC(STOCFHNH, STOCFH, UNI_SINCE_Z13, { { 2, 13 } })
DEFINE_MNEMONIC(STOCFHNL, STOCFH, UNI_SINCE_Z13, { { 2, 11 } })
DEFINE_MNEMONIC(STOCFHNM, STOCFH, UNI_SINCE_Z13, { { 2, 11 } })
DEFINE_MNEMONIC(STOCFHNO, STOCFH, UNI_SINCE_Z13, { { 2, 14 } })
DEFINE_MNEMONIC(STOCFHNP, STOCFH, UNI_SINCE_Z13, { { 2, 13 } })
DEFINE_MNEMONIC(STOCFHNZ, STOCFH, UNI_SINCE_Z13, { { 2, 7 } })
DEFINE_MNEMONIC(STOCFHO, STOCFH, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(STOCFHP, STOCFH, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(STOCFHZ, STOCFH, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(STOCGE, STOCG, UNI_SINCE_Z11, { { 2, 8 } })
DEFINE_MNEMONIC(STOCGH, STOCG, UNI_SINCE_Z11, { { 2, 2 } })
DEFINE_MNEMONIC(STOCGL, STOCG, UNI_SINCE_Z11, { { 2, 4 } })
DEFINE_MNEMONIC(STOCGM, STOCG, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(STOCGNE, STOCG, UNI_SINCE_Z11, { { 2, 6 } })
DEFINE_MNEMONIC(STOCGNH, STOCG, UNI_SINCE_Z11, { { 2, 12 } })
DEFINE_MNEMONIC(STOCGNL, STOCG, UNI_SINCE_Z11, { { 2, 10 } })
DEFINE_MNEMONIC(STOCGNM, STOCG, UNI_SINCE_Z13, { { 2, 10 } })
DEFINE_MNEMONIC(STOCGNO, STOCG, UNI_SINCE_Z13, { { 2, 14 } })
DEFINE_MNEMONIC(STOCGNP, STOCG, UNI_SINCE_Z13, { { 2, 12 } })
DEFINE_MNEMONIC(STOCGNZ, STOCG, UNI_SINCE_Z13, { { 2, 6 } })
DEFINE_MNEMONIC(STOCGO, STOCG, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(STOCGP, STOCG, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(STOCGZ, STOCG, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(STOCH, STOC, UNI_SINCE_Z11, { { 2, 2 } })
DEFINE_MNEMONIC(STOCL, STOC, UNI_SINCE_Z11, { { 2, 4 } })
DEFINE_MNEMONIC(STOCM, STOC, UNI_SINCE_Z13, { { 2, 4 } })
DEFINE_MNEMONIC(STOCNE, STOC, UNI_SINCE_Z11, { { 2, 6 } })
DEFINE_MNEMONIC(STOCNH, STOC, UNI_SINCE_Z11, { { 2, 12 } })
DEFINE_MNEMONIC(STOCNL, STOC, UNI_SINCE_Z11, { { 2, 10 } })
DEFINE_MNEMONIC(STOCNM, STOC, UNI_SINCE_Z13, { { 2, 10 } })
DEFINE_MNEMONIC(STOCNO, STOC, UNI_SINCE_Z13, { { 2, 14 } })
DEFINE_MNEMONIC(STOCNP, STOC, UNI_SINCE_Z13, { { 2, 12 } })
DEFINE_MNEMONIC(STOCNZ, STOC, UNI_SINCE_Z13, { { 2, 6 } })
DEFINE_MNEMONIC(STOCO, STOC, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(STOCP, STOC, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(STOCZ, STOC, UNI_SINCE_Z13, { { 2, 8 } })
DEFINE_MNEMONIC(VAB, VA, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VACCB, VACC, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VACCCQ, VACCC, UNI_SINCE_Z13, { { 3, 4 } })
DEFINE_MNEMONIC(VACCF, VACC, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VACCG, VACC, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VACCH, VACC, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VACCQ, VACC, UNI_SINCE_Z13, { { 3, 4 } })
DEFINE_MNEMONIC(VACQ, VAC, UNI_SINCE_Z13, { { 3, 4 } })
DEFINE_MNEMONIC(VAF, VA, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VAG, VA, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VAH, VA, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VAQ, VA, UNI_ESA_XA_370_SINCE_Z13, { { 3, 4 } })
DEFINE_MNEMONIC(VAVGB, VAVG, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VAVGF, VAVG, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VAVGG, VAVG, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VAVGH, VAVG, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VAVGLB, VAVGL, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VAVGLF, VAVGL, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VAVGLG, VAVGL, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VAVGLH, VAVGL, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VAVGLQ, VAVGL, UNI_SINCE_Z17, { { 3, 4 } })
DEFINE_MNEMONIC(VAVGQ, VAVG, UNI_SINCE_Z17, { { 3, 4 } })
DEFINE_MNEMONIC(VBLENDB, VBLEND, UNI_SINCE_Z17, { { 4, 0 } })
DEFINE_MNEMONIC(VBLENDF, VBLEND, UNI_SINCE_Z17, { { 4, 2 } })
DEFINE_MNEMONIC(VBLENDG, VBLEND, UNI_SINCE_Z17, { { 4, 3 } })
DEFINE_MNEMONIC(VBLENDH, VBLEND, UNI_SINCE_Z17, { { 4, 1 } })
DEFINE_MNEMONIC(VBLENDQ, VBLEND, UNI_SINCE_Z17, { { 4, 4 } })
DEFINE_MNEMONIC(VCDG, VCFPS, UNI_SINCE_Z13, {})
DEFINE_MNEMONIC(VCDGB, VCFPS, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VCDLG, VCFPL, UNI_SINCE_Z13, {})
DEFINE_MNEMONIC(VCDLGB, VCFPL, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VCEFB, VCFPS, UNI_SINCE_Z15, { { 2, 0 } })
DEFINE_MNEMONIC(VCELFB, VCFPL, UNI_SINCE_Z15, { { 2, 0 } })
DEFINE_MNEMONIC(VCEQB, VCEQ, UNI_SINCE_Z13, { { 3, 0 }, { 0 } })
DEFINE_MNEMONIC(VCEQBS, VCEQ, UNI_SINCE_Z13, { { 3, 0 }, { 1 } })
DEFINE_MNEMONIC(VCEQF, VCEQ, UNI_SINCE_Z13, { { 3, 2 }, { 0 } })
DEFINE_MNEMONIC(VCEQFS, VCEQ, UNI_SINCE_Z13, { { 3, 2 }, { 1 } })
DEFINE_MNEMONIC(VCEQG, VCEQ, UNI_SINCE_Z13, { { 3, 3 }, { 0 } })
DEFINE_MNEMONIC(VCEQGS, VCEQ, UNI_SINCE_Z13, { { 3, 3 }, { 1 } })
DEFINE_MNEMONIC(VCEQH, VCEQ, UNI_SINCE_Z13, { { 3, 1 }, { 0 } })
DEFINE_MNEMONIC(VCEQHS, VCEQ, UNI_SINCE_Z13, { { 3, 1 }, { 1 } })
DEFINE_MNEMONIC(VCEQQ, VCEQ, UNI_SINCE_Z17, { { 3, 4 }, { 0 } })
DEFINE_MNEMONIC(VCEQQS, VCEQ, UNI_SINCE_Z17, { { 3, 4 }, { 1 } })
DEFINE_MNEMONIC(VCFEB, VCSFP, UNI_SINCE_Z15, { { 2, 2 } })
DEFINE_MNEMONIC(VCGD, VCSFP, UNI_SINCE_Z13, {})
DEFINE_MNEMONIC(VCGDB, VCSFP, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VCHB, VCH, UNI_SINCE_Z13, { { 3, 0 }, { 0 } })
DEFINE_MNEMONIC(VCHBS, VCH, UNI_SINCE_Z13, { { 3, 0 }, { 1 } })
DEFINE_MNEMONIC(VCHF, VCH, UNI_SINCE_Z13, { { 3, 2 }, { 0 } })
DEFINE_MNEMONIC(VCHFS, VCH, UNI_SINCE_Z13, { { 3, 2 }, { 1 } })
DEFINE_MNEMONIC(VCHG, VCH, UNI_SINCE_Z13, { { 3, 3 }, { 0 } })
DEFINE_MNEMONIC(VCHGS, VCH, UNI_SINCE_Z13, { { 3, 3 }, { 1 } })
DEFINE_MNEMONIC(VCHH, VCH, UNI_SINCE_Z13, { { 3, 1 }, { 0 } })
DEFINE_MNEMONIC(VCHHS, VCH, UNI_SINCE_Z13, { { 3, 1 }, { 1 } })
DEFINE_MNEMONIC(VCHLB, VCHL, UNI_SINCE_Z13, { { 3, 0 }, { 0 } })
DEFINE_MNEMONIC(VCHLBS, VCHL, UNI_SINCE_Z13, { { 3, 0 }, { 1 } })
DEFINE_MNEMONIC(VCHLF, VCHL, UNI_SINCE_Z13, { { 3, 2 }, { 0 } })
DEFINE_MNEMONIC(VCHLFS, VCHL, UNI_SINCE_Z13, { { 3, 2 }, { 1 } })
DEFINE_MNEMONIC(VCHLG, VCHL, UNI_SINCE_Z13, { { 3, 3 }, { 0 } })
DEFINE_MNEMONIC(VCHLGS, VCHL, UNI_SINCE_Z13, { { 3, 3 }, { 1 } })
DEFINE_MNEMONIC(VCHLH, VCHL, UNI_SINCE_Z13, { { 3, 1 }, { 0 } })
DEFINE_MNEMONIC(VCHLHS, VCHL, UNI_SINCE_Z13, { { 3, 1 }, { 1 } })
DEFINE_MNEMONIC(VCHLQ, VCHL, UNI_SINCE_Z17, { { 3, 4 }, { 0 } })
DEFINE_MNEMONIC(VCHLQS, VCHL, UNI_SINCE_Z17, { { 3, 4 }, { 1 } })
DEFINE_MNEMONIC(VCHQ, VCH, UNI_SINCE_Z17, { { 3, 4 }, { 0 } })
DEFINE_MNEMONIC(VCHQS, VCH, UNI_SINCE_Z17, { { 3, 4 }, { 1 } })
DEFINE_MNEMONIC(VCLFEB, VCLFP, UNI_SINCE_Z15, { { 2, 0 } })
DEFINE_MNEMONIC(VCLGD, VCLFP, UNI_SINCE_Z13, {})
DEFINE_MNEMONIC(VCLGDB, VCLFP, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VCLZB, VCLZ, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VCLZF, VCLZ, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VCLZG, VCLZ, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VCLZH, VCLZ, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VCLZQ, VCLZ, UNI_SINCE_Z17, { { 2, 4 } })
DEFINE_MNEMONIC(VCTZB, VCTZ, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VCTZF, VCTZ, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VCTZG, VCTZ, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VCTZH, VCTZ, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VCTZQ, VCTZ, UNI_SINCE_Z17, { { 2, 4 } })
DEFINE_MNEMONIC(VDF, VD, UNI_SINCE_Z17, { { 3, 2 } })
DEFINE_MNEMONIC(VDG, VD, UNI_SINCE_Z17, { { 3, 3 } })
DEFINE_MNEMONIC(VDLF, VDL, UNI_SINCE_Z17, { { 3, 2 } })
DEFINE_MNEMONIC(VDLG, VDL, UNI_SINCE_Z17, { { 3, 3 } })
DEFINE_MNEMONIC(VDLQ, VDL, UNI_SINCE_Z17, { { 3, 4 } })
DEFINE_MNEMONIC(VDQ, VD, UNI_SINCE_Z17, { { 3, 4 } })
DEFINE_MNEMONIC(VECB, VEC, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VECF, VEC, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VECG, VEC, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VECH, VEC, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VECLB, VECL, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VECLF, VECL, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VECLG, VECL, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VECLH, VECL, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VECLQ, VECL, UNI_SINCE_Z17, { { 2, 4 } })
DEFINE_MNEMONIC(VECQ, VEC, UNI_SINCE_Z17, { { 2, 4 } })
DEFINE_MNEMONIC(VERIMB, VERIM, UNI_SINCE_Z13, { { 4, 0 } })
DEFINE_MNEMONIC(VERIMF, VERIM, UNI_SINCE_Z13, { { 4, 2 } })
DEFINE_MNEMONIC(VERIMG, VERIM, UNI_SINCE_Z13, { { 4, 3 } })
DEFINE_MNEMONIC(VERIMH, VERIM, UNI_SINCE_Z13, { { 4, 1 } })
DEFINE_MNEMONIC(VERLLB, VERLL, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VERLLF, VERLL, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VERLLG, VERLL, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VERLLH, VERLL, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VERLLVB, VERLLV, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VERLLVF, VERLLV, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VERLLVG, VERLLV, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VERLLVH, VERLLV, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VESLB, VESL, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VESLF, VESL, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VESLG, VESL, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VESLH, VESL, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VESLVB, VESLV, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VESLVF, VESLV, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VESLVG, VESLV, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VESLVH, VESLV, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VESRAB, VESRA, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VESRAF, VESRA, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VESRAG, VESRA, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VESRAH, VESRA, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VESRAVB, VESRAV, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VESRAVF, VESRAV, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VESRAVG, VESRAV, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VESRAVH, VESRAV, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VESRLB, VESRL, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VESRLF, VESRL, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VESRLG, VESRL, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VESRLH, VESRL, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VESRLVB, VESRLV, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VESRLVF, VESRLV, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VESRLVG, VESRLV, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VESRLVH, VESRLV, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VFADB, VFA, UNI_SINCE_Z13, { { 3, 3 }, { 0 } })
DEFINE_MNEMONIC(VFAEB, VFAE, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VFAEBS, VFAE, UNI_SINCE_Z13, { { 3, 0 }, mnemonic_transformation(0, 1, mnemonic_transformation_kind::or_with, 3, false) })
DEFINE_MNEMONIC(VFAEF, VFAE, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VFAEFS, VFAE, UNI_SINCE_Z13, { { 3, 2 }, mnemonic_transformation(0, 1, mnemonic_transformation_kind::or_with, 3, false) })
DEFINE_MNEMONIC(VFAEH, VFAE, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VFAEHS, VFAE, UNI_SINCE_Z13, { { 3, 1 }, mnemonic_transformation(0, 1, mnemonic_transformation_kind::or_with, 3, false) })
DEFINE_MNEMONIC(VFAEZB, VFAE, UNI_SINCE_Z13, { { 3, 0 }, mnemonic_transformation(0, 2, mnemonic_transformation_kind::or_with, 3, false) })
DEFINE_MNEMONIC(VFAEZBS, VFAE, UNI_SINCE_Z13, { { 3, 0 }, mnemonic_transformation(0, 3, mnemonic_transformation_kind::or_with, 3, false) })
DEFINE_MNEMONIC(VFAEZF, VFAE, UNI_SINCE_Z13, { { 3, 2 }, mnemonic_transformation(0, 2, mnemonic_transformation_kind::or_with, 3, false) })
DEFINE_MNEMONIC(VFAEZFS, VFAE, UNI_SINCE_Z13, { { 3, 2 }, mnemonic_transformation(0, 3, mnemonic_transformation_kind::or_with, 3, false) })
DEFINE_MNEMONIC(VFAEZH, VFAE, UNI_SINCE_Z13, { { 3, 1 }, mnemonic_transformation(0, 2, mnemonic_transformation_kind::or_with, 3, false) })
DEFINE_MNEMONIC(VFAEZHS, VFAE, UNI_SINCE_Z13, { { 3, 1 }, mnemonic_transformation(0, 3, mnemonic_transformation_kind::or_with, 3, false) })
DEFINE_MNEMONIC(VFASB, VFA, UNI_SINCE_Z14, { { 3, 2 }, { 0 } })
DEFINE_MNEMONIC(VFCEDB, VFCE, UNI_SINCE_Z13, { { 3, 3 }, { 0 }, { 0 } })
DEFINE_MNEMONIC(VFCEDBS, VFCE, UNI_SINCE_Z13, { { 3, 3 }, { 0 }, { 1 } })
DEFINE_MNEMONIC(VFCESB, VFCE, UNI_SINCE_Z14, { { 3, 2 }, { 0 }, { 0 } })
DEFINE_MNEMONIC(VFCESBS, VFCE, UNI_SINCE_Z14, { { 3, 2 }, { 0 }, { 1 } })
DEFINE_MNEMONIC(VFCHDB, VFCH, UNI_SINCE_Z13, { { 3, 3 }, { 0 }, { 0 } })
DEFINE_MNEMONIC(VFCHDBS, VFCH, UNI_SINCE_Z13, { { 3, 3 }, { 0 }, { 1 } })
DEFINE_MNEMONIC(VFCHEDB, VFCHE, UNI_SINCE_Z13, { { 3, 3 }, { 0 }, { 0 } })
DEFINE_MNEMONIC(VFCHEDBS, VFCHE, UNI_SINCE_Z13, { { 3, 3 }, { 0 }, { 1 } })
DEFINE_MNEMONIC(VFCHESB, VFCHE, UNI_SINCE_Z14, { { 3, 2 }, { 0 }, { 0 } })
DEFINE_MNEMONIC(VFCHESBS, VFCHE, UNI_SINCE_Z14, { { 3, 2 }, { 0 }, { 1 } })
DEFINE_MNEMONIC(VFCHSB, VFCH, UNI_SINCE_Z14, { { 3, 2 }, { 0 }, { 0 } })
DEFINE_MNEMONIC(VFCHSBS, VFCH, UNI_SINCE_Z14, { { 3, 2 }, { 0 }, { 1 } })
DEFINE_MNEMONIC(VFDDB, VFD, UNI_SINCE_Z13, { { 3, 3 }, { 0 } })
DEFINE_MNEMONIC(VFDSB, VFD, UNI_SINCE_Z14, { { 3, 2 }, { 0 } })
DEFINE_MNEMONIC(VFEEB, VFEE, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VFEEBS, VFEE, UNI_SINCE_Z13, { { 3, 0 }, { 1 } })
DEFINE_MNEMONIC(VFEEF, VFEE, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VFEEFS, VFEE, UNI_SINCE_Z13, { { 3, 2 }, { 1 } })
DEFINE_MNEMONIC(VFEEH, VFEE, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VFEEHS, VFEE, UNI_SINCE_Z13, { { 3, 1 }, { 1 } })
DEFINE_MNEMONIC(VFEEZB, VFEE, UNI_SINCE_Z13, { { 3, 0 }, { 2 } })
DEFINE_MNEMONIC(VFEEZBS, VFEE, UNI_SINCE_Z13, { { 3, 0 }, { 3 } })
DEFINE_MNEMONIC(VFEEZF, VFEE, UNI_SINCE_Z13, { { 3, 2 }, { 2 } })
DEFINE_MNEMONIC(VFEEZFS, VFEE, UNI_SINCE_Z13, { { 3, 2 }, { 3 } })
DEFINE_MNEMONIC(VFEEZH, VFEE, UNI_SINCE_Z13, { { 3, 1 }, { 2 } })
DEFINE_MNEMONIC(VFEEZHS, VFEE, UNI_SINCE_Z13, { { 3, 1 }, { 3 } })
DEFINE_MNEMONIC(VFENEB, VFENE, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VFENEBS, VFENE, UNI_SINCE_Z13, { { 3, 0 }, { 1 } })
DEFINE_MNEMONIC(VFENEF, VFENE, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VFENEFS, VFENE, UNI_SINCE_Z13, { { 3, 2 }, { 1 } })
DEFINE_MNEMONIC(VFENEH, VFENE, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VFENEHS, VFENE, UNI_SINCE_Z13, { { 3, 1 }, { 1 } })
DEFINE_MNEMONIC(VFENEZB, VFENE, UNI_SINCE_Z13, { { 3, 0 }, { 2 } })
DEFINE_MNEMONIC(VFENEZBS, VFENE, UNI_SINCE_Z13, { { 3, 0 }, { 3 } })
DEFINE_MNEMONIC(VFENEZF, VFENE, UNI_SINCE_Z13, { { 3, 2 }, { 2 } })
DEFINE_MNEMONIC(VFENEZFS, VFENE, UNI_SINCE_Z13, { { 3, 2 }, { 3 } })
DEFINE_MNEMONIC(VFENEZH, VFENE, UNI_SINCE_Z13, { { 3, 1 }, { 2 } })
DEFINE_MNEMONIC(VFENEZHS, VFENE, UNI_SINCE_Z13, { { 3, 1 }, { 3 } })
DEFINE_MNEMONIC(VFIDB, VFI, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VFISB, VFI, UNI_SINCE_Z14, { { 2, 2 } })
DEFINE_MNEMONIC(VFKEDB, VFCE, UNI_SINCE_Z14, { { 3, 3 }, { 4 }, { 0 } })
DEFINE_MNEMONIC(VFKEDBS, VFCE, UNI_SINCE_Z14, { { 3, 3 }, { 4 }, { 1 } })
DEFINE_MNEMONIC(VFKESB, VFCE, UNI_SINCE_Z14, { { 3, 2 }, { 4 }, { 0 } })
DEFINE_MNEMONIC(VFKESBS, VFCE, UNI_SINCE_Z14, { { 3, 2 }, { 4 }, { 1 } })
DEFINE_MNEMONIC(VFKHDB, VFCH, UNI_SINCE_Z14, { { 3, 3 }, { 4 }, { 0 } })
DEFINE_MNEMONIC(VFKHDBS, VFCH, UNI_SINCE_Z14, { { 3, 3 }, { 4 }, { 1 } })
DEFINE_MNEMONIC(VFKHEDB, VFCHE, UNI_SINCE_Z14, { { 3, 3 }, { 4 }, { 0 } })
DEFINE_MNEMONIC(VFKHEDBS, VFCHE, UNI_SINCE_Z14, { { 3, 3 }, { 4 }, { 1 } })
DEFINE_MNEMONIC(VFKHESB, VFCHE, UNI_SINCE_Z14, { { 3, 2 }, { 4 }, { 0 } })
DEFINE_MNEMONIC(VFKHESBS, VFCHE, UNI_SINCE_Z14, { { 3, 2 }, { 4 }, { 1 } })
DEFINE_MNEMONIC(VFKHSB, VFCH, UNI_SINCE_Z14, { { 3, 2 }, { 4 }, { 0 } })
DEFINE_MNEMONIC(VFKHSBS, VFCH, UNI_SINCE_Z14, { { 3, 2 }, { 4 }, { 1 } })
DEFINE_MNEMONIC(VFLCDB, VFPSO, UNI_SINCE_Z13, { { 2, 3 }, { 0 }, { 0 } })
DEFINE_MNEMONIC(VFLCSB, VFPSO, UNI_SINCE_Z14, { { 2, 2 }, { 0 }, { 0 } })
DEFINE_MNEMONIC(VFLLS, VFLL, UNI_SINCE_Z14, { { 2, 2 }, { 0 } })
DEFINE_MNEMONIC(VFLNDB, VFPSO, UNI_SINCE_Z13, { { 2, 3 }, { 0 }, { 1 } })
DEFINE_MNEMONIC(VFLNSB, VFPSO, UNI_SINCE_Z14, { { 2, 2 }, { 0 }, { 1 } })
DEFINE_MNEMONIC(VFLPDB, VFPSO, UNI_SINCE_Z13, { { 2, 3 }, { 0 }, { 2 } })
DEFINE_MNEMONIC(VFLPSB, VFPSO, UNI_SINCE_Z14, { { 2, 2 }, { 0 }, { 2 } })
DEFINE_MNEMONIC(VFLRD, VFLR, UNI_SINCE_Z14, { { 2, 3 } })
DEFINE_MNEMONIC(VFMADB, VFMA, UNI_SINCE_Z13, { { 4, 0 }, { 3 } })
DEFINE_MNEMONIC(VFMASB, VFMA, UNI_SINCE_Z14, { { 4, 0 }, { 2 } })
DEFINE_MNEMONIC(VFMAXDB, VFMAX, UNI_SINCE_Z14, { { 3, 3 }, { 0 } })
DEFINE_MNEMONIC(VFMAXSB, VFMAX, UNI_SINCE_Z14, { { 3, 2 }, { 0 } })
DEFINE_MNEMONIC(VFMDB, VFM, UNI_SINCE_Z13, { { 3, 3 }, { 0 } })
DEFINE_MNEMONIC(VFMINDB, VFMIN, UNI_SINCE_Z14, { { 3, 3 }, { 0 } })
DEFINE_MNEMONIC(VFMINSB, VFMIN, UNI_SINCE_Z14, { { 3, 2 }, { 0 } })
DEFINE_MNEMONIC(VFMSB, VFM, UNI_SINCE_Z14, { { 3, 2 }, { 0 } })
DEFINE_MNEMONIC(VFMSDB, VFMS, UNI_SINCE_Z13, { { 4, 0 }, { 3 } })
DEFINE_MNEMONIC(VFMSSB, VFMS, UNI_SINCE_Z14, { { 4, 0 }, { 2 } })
DEFINE_MNEMONIC(VFNMADB, VFNMA, UNI_SINCE_Z14, { { 4, 0 }, { 3 } })
DEFINE_MNEMONIC(VFNMASB, VFNMA, UNI_SINCE_Z14, { { 4, 0 }, { 2 } })
DEFINE_MNEMONIC(VFNMSDB, VFNMS, UNI_SINCE_Z14, { { 4, 0 }, { 3 } })
DEFINE_MNEMONIC(VFNMSSB, VFNMS, UNI_SINCE_Z14, { { 4, 0 }, { 2 } })
DEFINE_MNEMONIC(VFPSODB, VFPSO, UNI_SINCE_Z13, { { 2, 3 }, { 0 } })
DEFINE_MNEMONIC(VFPSOSB, VFPSO, UNI_SINCE_Z14, { { 2, 2 }, { 0 } })
DEFINE_MNEMONIC(VFSDB, VFS, UNI_SINCE_Z13, { { 2, 3 }, { 0 } })
DEFINE_MNEMONIC(VFSQDB, VFSQ, UNI_SINCE_Z13, { { 2, 3 }, { 0 } })
DEFINE_MNEMONIC(VFSQSB, VFSQ, UNI_SINCE_Z14, { { 2, 2 }, { 0 } })
DEFINE_MNEMONIC(VFSSB, VFS, UNI_SINCE_Z14, { { 2, 2 }, { 0 } })
DEFINE_MNEMONIC(VFTCIDB, VFTCI, UNI_SINCE_Z13, { { 3, 3 }, { 0 } })
DEFINE_MNEMONIC(VFTCISB, VFTCI, UNI_SINCE_Z14, { { 3, 2 }, { 0 } })
DEFINE_MNEMONIC(VGEMB, VGEM, UNI_SINCE_Z17, { { 2, 0 } })
DEFINE_MNEMONIC(VGEMF, VGEM, UNI_SINCE_Z17, { { 2, 2 } })
DEFINE_MNEMONIC(VGEMG, VGEM, UNI_SINCE_Z17, { { 2, 3 } })
DEFINE_MNEMONIC(VGEMH, VGEM, UNI_SINCE_Z17, { { 2, 1 } })
DEFINE_MNEMONIC(VGEMQ, VGEM, UNI_SINCE_Z17, { { 2, 4 } })
DEFINE_MNEMONIC(VGFMAB, VGFMA, UNI_SINCE_Z13, { { 4, 0 } })
DEFINE_MNEMONIC(VGFMAF, VGFMA, UNI_SINCE_Z13, { { 4, 2 } })
DEFINE_MNEMONIC(VGFMAG, VGFMA, UNI_SINCE_Z13, { { 4, 3 } })
DEFINE_MNEMONIC(VGFMAH, VGFMA, UNI_SINCE_Z13, { { 4, 1 } })
DEFINE_MNEMONIC(VGFMB, VGFM, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VGFMF, VGFM, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VGFMG, VGFM, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VGFMH, VGFM, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VGMB, VGM, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VGMF, VGM, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VGMG, VGM, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VGMH, VGM, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VISTRB, VISTR, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VISTRBS, VISTR, UNI_SINCE_Z13, { { 2, 0 }, { 1 } })
DEFINE_MNEMONIC(VISTRF, VISTR, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VISTRFS, VISTR, UNI_SINCE_Z13, { { 2, 2 }, { 1 } })
DEFINE_MNEMONIC(VISTRH, VISTR, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VISTRHS, VISTR, UNI_SINCE_Z13, { { 2, 1 }, { 1 } })
DEFINE_MNEMONIC(VLBRF, VLBR, UNI_SINCE_Z15, { { 2, 2 } })
DEFINE_MNEMONIC(VLBRG, VLBR, UNI_SINCE_Z15, { { 2, 3 } })
DEFINE_MNEMONIC(VLBRH, VLBR, UNI_SINCE_Z15, { { 2, 1 } })
DEFINE_MNEMONIC(VLBRQ, VLBR, UNI_SINCE_Z15, { { 2, 4 } })
DEFINE_MNEMONIC(VLBRREPF, VLBRREP, UNI_SINCE_Z15, { { 2, 2 } })
DEFINE_MNEMONIC(VLBRREPG, VLBRREP, UNI_SINCE_Z15, { { 2, 3 } })
DEFINE_MNEMONIC(VLBRREPH, VLBRREP, UNI_SINCE_Z15, { { 2, 1 } })
DEFINE_MNEMONIC(VLCB, VLC, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VLCF, VLC, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VLCG, VLC, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VLCH, VLC, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VLCQ, VLC, UNI_SINCE_Z17, { { 2, 4 } })
DEFINE_MNEMONIC(VLDE, VFLL, UNI_SINCE_Z13, {})
DEFINE_MNEMONIC(VLDEB, VFLL, UNI_SINCE_Z13, { { 2, 2 }, { 0 } })
DEFINE_MNEMONIC(VLED, VFLR, UNI_SINCE_Z13, {})
DEFINE_MNEMONIC(VLEDB, VFLR, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VLERF, VLER, UNI_SINCE_Z15, { { 2, 2 } })
DEFINE_MNEMONIC(VLERG, VLER, UNI_SINCE_Z15, { { 2, 3 } })
DEFINE_MNEMONIC(VLERH, VLER, UNI_SINCE_Z15, { { 2, 1 } })
DEFINE_MNEMONIC(VLGVB, VLGV, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VLGVF, VLGV, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VLGVG, VLGV, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VLGVH, VLGV, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VLLEBRZE, VLLEBRZ, UNI_SINCE_Z15, { { 2, 6 } })
DEFINE_MNEMONIC(VLLEBRZF, VLLEBRZ, UNI_SINCE_Z15, { { 2, 2 } })
DEFINE_MNEMONIC(VLLEBRZG, VLLEBRZ, UNI_SINCE_Z15, { { 2, 3 } })
DEFINE_MNEMONIC(VLLEBRZH, VLLEBRZ, UNI_SINCE_Z15, { { 2, 1 } })
DEFINE_MNEMONIC(VLLEZB, VLLEZ, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VLLEZF, VLLEZ, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VLLEZG, VLLEZ, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VLLEZH, VLLEZ, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VLLEZLF, VLLEZ, UNI_SINCE_Z14, { { 2, 6 } })
DEFINE_MNEMONIC(VLPB, VLP, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VLPF, VLP, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VLPG, VLP, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VLPH, VLP, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VLPQ, VLP, UNI_SINCE_Z17, { { 2, 4 } })
DEFINE_MNEMONIC(VLREPB, VLREP, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VLREPF, VLREP, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VLREPG, VLREP, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VLREPH, VLREP, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VLVGB, VLVG, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VLVGF, VLVG, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VLVGG, VLVG, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VLVGH, VLVG, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VMAEB, VMAE, UNI_SINCE_Z13, { { 4, 0 } })
DEFINE_MNEMONIC(VMAEF, VMAE, UNI_SINCE_Z13, { { 4, 2 } })
DEFINE_MNEMONIC(VMAEG, VMAE, UNI_SINCE_Z17, { { 4, 3 } })
DEFINE_MNEMONIC(VMAEH, VMAE, UNI_SINCE_Z13, { { 4, 1 } })
DEFINE_MNEMONIC(VMAHB, VMAH, UNI_SINCE_Z13, { { 4, 0 } })
DEFINE_MNEMONIC(VMAHF, VMAH, UNI_SINCE_Z13, { { 4, 2 } })
DEFINE_MNEMONIC(VMAHG, VMAH, UNI_SINCE_Z17, { { 4, 3 } })
DEFINE_MNEMONIC(VMAHH, VMAH, UNI_SINCE_Z13, { { 4, 1 } })
DEFINE_MNEMONIC(VMAHQ, VMAH, UNI_SINCE_Z17, { { 4, 4 } })
DEFINE_MNEMONIC(VMALB, VMAL, UNI_SINCE_Z13, { { 4, 0 } })
DEFINE_MNEMONIC(VMALEB, VMALE, UNI_SINCE_Z13, { { 4, 0 } })
DEFINE_MNEMONIC(VMALEF, VMALE, UNI_SINCE_Z13, { { 4, 2 } })
DEFINE_MNEMONIC(VMALEG, VMALE, UNI_SINCE_Z17, { { 4, 3 } })
DEFINE_MNEMONIC(VMALEH, VMALE, UNI_SINCE_Z13, { { 4, 1 } })
DEFINE_MNEMONIC(VMALF, VMAL, UNI_SINCE_Z13, { { 4, 2 } })
DEFINE_MNEMONIC(VMALG, VMAL, UNI_SINCE_Z17, { { 4, 3 } })
DEFINE_MNEMONIC(VMALHB, VMALH, UNI_SINCE_Z13, { { 4, 0 } })
DEFINE_MNEMONIC(VMALHF, VMALH, UNI_SINCE_Z13, { { 4, 2 } })
DEFINE_MNEMONIC(VMALHG, VMALH, UNI_SINCE_Z17, { { 4, 3 } })
DEFINE_MNEMONIC(VMALHH, VMALH, UNI_SINCE_Z13, { { 4, 1 } })
DEFINE_MNEMONIC(VMALHQ, VMALH, UNI_SINCE_Z17, { { 4, 4 } })
DEFINE_MNEMONIC(VMALHW, VMAL, UNI_SINCE_Z13, { { 4, 1 } })
DEFINE_MNEMONIC(VMALOB, VMALO, UNI_SINCE_Z13, { { 4, 0 } })
DEFINE_MNEMONIC(VMALOF, VMALO, UNI_SINCE_Z13, { { 4, 2 } })
DEFINE_MNEMONIC(VMALOG, VMALO, UNI_SINCE_Z17, { { 4, 3 } })
DEFINE_MNEMONIC(VMALOH, VMALO, UNI_SINCE_Z13, { { 4, 1 } })
DEFINE_MNEMONIC(VMALQ, VMAL, UNI_SINCE_Z17, { { 4, 4 } })
DEFINE_MNEMONIC(VMAOB, VMAO, UNI_SINCE_Z13, { { 4, 0 } })
DEFINE_MNEMONIC(VMAOF, VMAO, UNI_SINCE_Z13, { { 4, 2 } })
DEFINE_MNEMONIC(VMAOG, VMAO, UNI_SINCE_Z17, { { 4, 3 } })
DEFINE_MNEMONIC(VMAOH, VMAO, UNI_SINCE_Z13, { { 4, 1 } })
DEFINE_MNEMONIC(VMEB, VME, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VMEF, VME, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VMEG, VME, UNI_SINCE_Z17, { { 3, 3 } })
DEFINE_MNEMONIC(VMEH, VME, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VMHB, VMH, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VMHF, VMH, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VMHG, VMH, UNI_SINCE_Z17, { { 3, 3 } })
DEFINE_MNEMONIC(VMHH, VMH, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VMHQ, VMH, UNI_SINCE_Z17, { { 3, 4 } })
DEFINE_MNEMONIC(VMLB, VML, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VMLEB, VMLE, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VMLEF, VMLE, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VMLEG, VMLE, UNI_SINCE_Z17, { { 3, 3 } })
DEFINE_MNEMONIC(VMLEH, VMLE, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VMLF, VML, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VMLG, VML, UNI_SINCE_Z17, { { 3, 3 } })
DEFINE_MNEMONIC(VMLHB, VMLH, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VMLHF, VMLH, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VMLHG, VMLH, UNI_SINCE_Z17, { { 3, 3 } })
DEFINE_MNEMONIC(VMLHH, VMLH, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VMLHQ, VMLH, UNI_SINCE_Z17, { { 3, 4 } })
DEFINE_MNEMONIC(VMLHW, VML, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VMLOB, VMLO, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VMLOF, VMLO, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VMLOG, VMLO, UNI_SINCE_Z17, { { 3, 3 } })
DEFINE_MNEMONIC(VMLOH, VMLO, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VMLQ, VML, UNI_SINCE_Z17, { { 3, 4 } })
DEFINE_MNEMONIC(VMNB, VMN, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VMNF, VMN, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VMNG, VMN, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VMNH, VMN, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VMNLB, VMNL, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VMNLF, VMNL, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VMNLG, VMNL, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VMNLH, VMNL, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VMNLQ, VMNL, UNI_SINCE_Z17, { { 3, 4 } })
DEFINE_MNEMONIC(VMNQ, VMN, UNI_SINCE_Z17, { { 3, 4 } })
DEFINE_MNEMONIC(VMOB, VMO, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VMOF, VMO, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VMOG, VMO, UNI_SINCE_Z17, { { 3, 3 } })
DEFINE_MNEMONIC(VMOH, VMO, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VMRHB, VMRH, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VMRHF, VMRH, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VMRHG, VMRH, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VMRHH, VMRH, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VMRLB, VMRL, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VMRLF, VMRL, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VMRLG, VMRL, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VMRLH, VMRL, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VMSLG, VMSL, UNI_SINCE_Z14, { { 4, 3 } })
DEFINE_MNEMONIC(VMXB, VMX, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VMXF, VMX, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VMXG, VMX, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VMXH, VMX, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VMXLB, VMXL, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VMXLF, VMXL, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VMXLG, VMXL, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VMXLH, VMXL, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VMXLQ, VMXL, UNI_SINCE_Z17, { { 3, 4 } })
DEFINE_MNEMONIC(VMXQ, VMX, UNI_SINCE_Z17, { { 3, 4 } })
DEFINE_MNEMONIC(VNOT, VNO, UNI_SINCE_Z13, { mnemonic_transformation(2, mnemonic_transformation_kind::copy, 1) })
DEFINE_MNEMONIC(VONE, VGBM, UNI_SINCE_Z13, { { 1, 65535 } })
DEFINE_MNEMONIC(VPKF, VPK, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VPKG, VPK, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VPKH, VPK, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VPKLSF, VPKLS, UNI_SINCE_Z13, { { 3, 2 }, { 0 } })
DEFINE_MNEMONIC(VPKLSFS, VPKLS, UNI_SINCE_Z13, { { 3, 2 }, { 1 } })
DEFINE_MNEMONIC(VPKLSG, VPKLS, UNI_SINCE_Z13, { { 3, 3 }, { 0 } })
DEFINE_MNEMONIC(VPKLSGS, VPKLS, UNI_SINCE_Z13, { { 3, 3 }, { 1 } })
DEFINE_MNEMONIC(VPKLSH, VPKLS, UNI_SINCE_Z13, { { 3, 1 }, { 0 } })
DEFINE_MNEMONIC(VPKLSHS, VPKLS, UNI_SINCE_Z13, { { 3, 1 }, { 1 } })
DEFINE_MNEMONIC(VPKSF, VPKS, UNI_SINCE_Z13, { { 3, 2 }, { 0 } })
DEFINE_MNEMONIC(VPKSFS, VPKS, UNI_SINCE_Z13, { { 3, 2 }, { 1 } })
DEFINE_MNEMONIC(VPKSG, VPKS, UNI_SINCE_Z13, { { 3, 3 }, { 0 } })
DEFINE_MNEMONIC(VPKSGS, VPKS, UNI_SINCE_Z13, { { 3, 3 }, { 1 } })
DEFINE_MNEMONIC(VPKSH, VPKS, UNI_SINCE_Z13, { { 3, 1 }, { 0 } })
DEFINE_MNEMONIC(VPKSHS, VPKS, UNI_SINCE_Z13, { { 3, 1 }, { 1 } })
DEFINE_MNEMONIC(VPOPCTB, VPOPCT, UNI_SINCE_Z14, { { 2, 0 } })
DEFINE_MNEMONIC(VPOPCTF, VPOPCT, UNI_SINCE_Z14, { { 2, 2 } })
DEFINE_MNEMONIC(VPOPCTG, VPOPCT, UNI_SINCE_Z14, { { 2, 3 } })
DEFINE_MNEMONIC(VPOPCTH, VPOPCT, UNI_SINCE_Z14, { { 2, 1 } })
DEFINE_MNEMONIC(VREPB, VREP, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VREPF, VREP, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VREPG, VREP, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VREPH, VREP, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VREPIB, VREPI, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VREPIF, VREPI, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VREPIG, VREPI, UNI_SINCE_Z13, { { 2, 3 } })
DEFINE_MNEMONIC(VREPIH, VREPI, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VRF, VR, UNI_SINCE_Z17, { { 3, 2 } })
DEFINE_MNEMONIC(VRG, VR, UNI_SINCE_Z17, { { 3, 3 } })
DEFINE_MNEMONIC(VRLF, VRL, UNI_SINCE_Z17, { { 3, 2 } })
DEFINE_MNEMONIC(VRLG, VRL, UNI_SINCE_Z17, { { 3, 3 } })
DEFINE_MNEMONIC(VRLQ, VRL, UNI_SINCE_Z17, { { 3, 4 } })
DEFINE_MNEMONIC(VRQ, VR, UNI_SINCE_Z17, { { 3, 4 } })
DEFINE_MNEMONIC(VSB, VS, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VSBCBIQ, VSBCBI, UNI_SINCE_Z13, { { 4, 4 } })
DEFINE_MNEMONIC(VSBIQ, VSBI, UNI_SINCE_Z13, { { 4, 4 } })
DEFINE_MNEMONIC(VSCBIB, VSCBI, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VSCBIF, VSCBI, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VSCBIG, VSCBI, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VSCBIH, VSCBI, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VSCBIQ, VSCBI, UNI_SINCE_Z13, { { 3, 4 } })
DEFINE_MNEMONIC(VSCHDP, VSCHP, UNI_SINCE_Z16, { { 3, 3 } })
DEFINE_MNEMONIC(VSCHSP, VSCHP, UNI_SINCE_Z16, { { 3, 2 } })
DEFINE_MNEMONIC(VSCHXP, VSCHP, UNI_SINCE_Z16, { { 3, 4 } })
DEFINE_MNEMONIC(VSEGB, VSEG, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VSEGF, VSEG, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VSEGH, VSEG, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VSF, VS, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VSG, VS, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VSH, VS, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VSQ, VS, UNI_ESA_XA_370_SINCE_Z13, { { 3, 4 } })
DEFINE_MNEMONIC(VSTBRF, VSTBR, UNI_SINCE_Z15, { { 2, 2 } })
DEFINE_MNEMONIC(VSTBRG, VSTBR, UNI_SINCE_Z15, { { 2, 3 } })
DEFINE_MNEMONIC(VSTBRH, VSTBR, UNI_SINCE_Z15, { { 2, 1 } })
DEFINE_MNEMONIC(VSTBRQ, VSTBR, UNI_SINCE_Z15, { { 2, 4 } })
DEFINE_MNEMONIC(VSTERF, VSTER, UNI_SINCE_Z15, { { 2, 2 } })
DEFINE_MNEMONIC(VSTERG, VSTER, UNI_SINCE_Z15, { { 2, 3 } })
DEFINE_MNEMONIC(VSTERH, VSTER, UNI_SINCE_Z15, { { 2, 1 } })
DEFINE_MNEMONIC(VSTRCB, VSTRC, UNI_SINCE_Z13, { { 4, 0 } })
DEFINE_MNEMONIC(VSTRCBS, VSTRC, UNI_SINCE_Z13, { { 4, 0 }, mnemonic_transformation(0, 1, mnemonic_transformation_kind::or_with, 4, false) })
DEFINE_MNEMONIC(VSTRCF, VSTRC, UNI_SINCE_Z13, { { 4, 2 } })
DEFINE_MNEMONIC(VSTRCFS, VSTRC, UNI_SINCE_Z13, { { 4, 2 }, mnemonic_transformation(0, 1, mnemonic_transformation_kind::or_with, 4, false) })
DEFINE_MNEMONIC(VSTRCH, VSTRC, UNI_SINCE_Z13, { { 4, 1 } })
DEFINE_MNEMONIC(VSTRCHS, VSTRC, UNI_SINCE_Z13, { { 4, 1 }, mnemonic_transformation(0, 1, mnemonic_transformation_kind::or_with, 4, false) })
DEFINE_MNEMONIC(VSTRCZB, VSTRC, UNI_SINCE_Z13, { { 4, 0 }, mnemonic_transformation(0, 2, mnemonic_transformation_kind::or_with, 4, false) })
DEFINE_MNEMONIC(VSTRCZBS, VSTRC, UNI_SINCE_Z13, { { 4, 0 }, mnemonic_transformation(0, 3, mnemonic_transformation_kind::or_with, 4, false) })
DEFINE_MNEMONIC(VSTRCZF, VSTRC, UNI_SINCE_Z13, { { 4, 2 }, mnemonic_transformation(0, 2, mnemonic_transformation_kind::or_with, 4, false) })
DEFINE_MNEMONIC(VSTRCZFS, VSTRC, UNI_SINCE_Z13, { { 4, 2 }, mnemonic_transformation(0, 3, mnemonic_transformation_kind::or_with, 4, false) })
DEFINE_MNEMONIC(VSTRCZH, VSTRC, UNI_SINCE_Z13, { { 4, 1 }, mnemonic_transformation(0, 2, mnemonic_transformation_kind::or_with, 4, false) })
DEFINE_MNEMONIC(VSTRCZHS, VSTRC, UNI_SINCE_Z13, { { 4, 1 }, mnemonic_transformation(0, 3, mnemonic_transformation_kind::or_with, 4, false) })
DEFINE_MNEMONIC(VSTRSB, VSTRS, UNI_SINCE_Z15, { { 4, 0 } })
DEFINE_MNEMONIC(VSTRSF, VSTRS, UNI_SINCE_Z15, { { 4, 2 } })
DEFINE_MNEMONIC(VSTRSH, VSTRS, UNI_SINCE_Z15, { { 4, 1 } })
DEFINE_MNEMONIC(VSTRSZB, VSTRS, UNI_SINCE_Z15, { { 4, 0 }, { 2 } })
DEFINE_MNEMONIC(VSTRSZF, VSTRS, UNI_SINCE_Z15, { { 4, 2 }, { 2 } })
DEFINE_MNEMONIC(VSTRSZH, VSTRS, UNI_SINCE_Z15, { { 4, 1 }, { 2 } })
DEFINE_MNEMONIC(VSUMB, VSUM, UNI_SINCE_Z13, { { 3, 0 } })
DEFINE_MNEMONIC(VSUMGF, VSUMG, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VSUMGH, VSUMG, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VSUMH, VSUM, UNI_SINCE_Z13, { { 3, 1 } })
DEFINE_MNEMONIC(VSUMQF, VSUMQ, UNI_SINCE_Z13, { { 3, 2 } })
DEFINE_MNEMONIC(VSUMQG, VSUMQ, UNI_SINCE_Z13, { { 3, 3 } })
DEFINE_MNEMONIC(VUPHB, VUPH, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VUPHF, VUPH, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VUPHG, VUPH, UNI_SINCE_Z17, { { 2, 3 } })
DEFINE_MNEMONIC(VUPHH, VUPH, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VUPLB, VUPL, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VUPLF, VUPL, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VUPLG, VUPL, UNI_SINCE_Z17, { { 2, 3 } })
DEFINE_MNEMONIC(VUPLHB, VUPLH, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VUPLHF, VUPLH, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VUPLHG, VUPLH, UNI_SINCE_Z17, { { 2, 3 } })
DEFINE_MNEMONIC(VUPLHH, VUPLH, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VUPLHW, VUPL, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VUPLLB, VUPLL, UNI_SINCE_Z13, { { 2, 0 } })
DEFINE_MNEMONIC(VUPLLF, VUPLL, UNI_SINCE_Z13, { { 2, 2 } })
DEFINE_MNEMONIC(VUPLLG, VUPLL, UNI_SINCE_Z17, { { 2, 3 } })
DEFINE_MNEMONIC(VUPLLH, VUPLL, UNI_SINCE_Z13, { { 2, 1 } })
DEFINE_MNEMONIC(VZERO, VGBM, UNI_SINCE_Z13, { { 1 } })
DEFINE_MNEMONIC(WCDGB, VCFPS, UNI_SINCE_Z13, { { 2, 3 }, mnemonic_transformation(0, 8, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(WCDLGB, VCFPL, UNI_SINCE_Z13, { { 2, 3 }, mnemonic_transformation(0, 8, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(WCEFB, VCFPS, UNI_SINCE_Z15, { { 2, 2 }, mnemonic_transformation(0, 8, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(WCELFB, VCFPL, UNI_SINCE_Z15, { { 2, 2 }, mnemonic_transformation(0, 8, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(WCFEB, VCSFP, UNI_SINCE_Z15, { { 2, 2 }, mnemonic_transformation(0, 8, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(WCGDB, VCSFP, UNI_SINCE_Z13, { { 2, 3 }, mnemonic_transformation(0, 8, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(WCLFEB, VCLFP, UNI_SINCE_Z15, { { 2, 2 }, mnemonic_transformation(0, 8, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(WCLGDB, VCLFP, UNI_SINCE_Z13, { { 2, 3 }, mnemonic_transformation(0, 8, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(WFADB, VFA, UNI_SINCE_Z13, { { 3, 3 }, { 8 } })
DEFINE_MNEMONIC(WFASB, VFA, UNI_SINCE_Z14, { { 3, 2 }, { 8 } })
DEFINE_MNEMONIC(WFAXB, VFA, UNI_SINCE_Z14, { { 3, 4 }, { 8 } })
DEFINE_MNEMONIC(WFCDB, WFC, UNI_SINCE_Z13, { { 2, 3 }, { 0 } })
DEFINE_MNEMONIC(WFCEDB, VFCE, UNI_SINCE_Z13, { { 3, 3 }, { 8 }, { 0 } })
DEFINE_MNEMONIC(WFCEDBS, VFCE, UNI_SINCE_Z13, { { 3, 3 }, { 8 }, { 1 } })
DEFINE_MNEMONIC(WFCESB, VFCE, UNI_SINCE_Z14, { { 3, 2 }, { 8 }, { 0 } })
DEFINE_MNEMONIC(WFCESBS, VFCE, UNI_SINCE_Z14, { { 3, 2 }, { 8 }, { 1 } })
DEFINE_MNEMONIC(WFCEXB, VFCE, UNI_SINCE_Z14, { { 3, 4 }, { 8 }, { 0 } })
DEFINE_MNEMONIC(WFCEXBS, VFCE, UNI_SINCE_Z14, { { 3, 4 }, { 8 }, { 1 } })
DEFINE_MNEMONIC(WFCHDB, VFCH, UNI_SINCE_Z13, { { 3, 3 }, { 8 }, { 0 } })
DEFINE_MNEMONIC(WFCHDBS, VFCH, UNI_SINCE_Z13, { { 3, 3 }, { 8 }, { 1 } })
DEFINE_MNEMONIC(WFCHEDB, VFCHE, UNI_SINCE_Z13, { { 3, 3 }, { 8 }, { 0 } })
DEFINE_MNEMONIC(WFCHEDBS, VFCHE, UNI_SINCE_Z13, { { 3, 3 }, { 8 }, { 1 } })
DEFINE_MNEMONIC(WFCHESB, VFCHE, UNI_SINCE_Z14, { { 3, 2 }, { 8 }, { 0 } })
DEFINE_MNEMONIC(WFCHESBS, VFCHE, UNI_SINCE_Z14, { { 3, 2 }, { 8 }, { 1 } })
DEFINE_MNEMONIC(WFCHEXB, VFCHE, UNI_SINCE_Z14, { { 3, 4 }, { 8 }, { 0 } })
DEFINE_MNEMONIC(WFCHEXBS, VFCHE, UNI_SINCE_Z14, { { 3, 4 }, { 8 }, { 1 } })
DEFINE_MNEMONIC(WFCHSB, VFCH, UNI_SINCE_Z14, { { 3, 2 }, { 8 }, { 0 } })
DEFINE_MNEMONIC(WFCHSBS, VFCH, UNI_SINCE_Z14, { { 3, 2 }, { 8 }, { 1 } })
DEFINE_MNEMONIC(WFCHXB, VFCH, UNI_SINCE_Z14, { { 3, 4 }, { 8 }, { 0 } })
DEFINE_MNEMONIC(WFCHXBS, VFCH, UNI_SINCE_Z14, { { 3, 4 }, { 8 }, { 1 } })
DEFINE_MNEMONIC(WFCSB, WFC, UNI_SINCE_Z14, { { 2, 2 }, { 0 } })
DEFINE_MNEMONIC(WFCXB, WFC, UNI_SINCE_Z14, { { 2, 4 }, { 0 } })
DEFINE_MNEMONIC(WFDDB, VFD, UNI_SINCE_Z13, { { 3, 3 }, { 8 } })
DEFINE_MNEMONIC(WFDSB, VFD, UNI_SINCE_Z14, { { 3, 2 }, { 8 } })
DEFINE_MNEMONIC(WFDXB, VFD, UNI_SINCE_Z14, { { 3, 4 }, { 8 } })
DEFINE_MNEMONIC(WFIDB, VFI, UNI_SINCE_Z13, { { 2, 3 }, mnemonic_transformation(0, 8, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(WFISB, VFI, UNI_SINCE_Z14, { { 2, 2 }, mnemonic_transformation(0, 8, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(WFIXB, VFI, UNI_SINCE_Z14, { { 2, 4 }, mnemonic_transformation(0, 8, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(WFKDB, WFK, UNI_SINCE_Z13, { { 2, 3 }, { 0 } })
DEFINE_MNEMONIC(WFKEDB, VFCE, UNI_SINCE_Z14, { { 3, 3 }, { 12 }, { 0 } })
DEFINE_MNEMONIC(WFKEDBS, VFCE, UNI_SINCE_Z14, { { 3, 3 }, { 12 }, { 1 } })
DEFINE_MNEMONIC(WFKESB, VFCE, UNI_SINCE_Z14, { { 3, 2 }, { 12 }, { 0 } })
DEFINE_MNEMONIC(WFKESBS, VFCE, UNI_SINCE_Z14, { { 3, 2 }, { 12 }, { 1 } })
DEFINE_MNEMONIC(WFKEXB, VFCE, UNI_SINCE_Z14, { { 3, 4 }, { 12 }, { 0 } })
DEFINE_MNEMONIC(WFKEXBS, VFCE, UNI_SINCE_Z14, { { 3, 4 }, { 12 }, { 1 } })
DEFINE_MNEMONIC(WFKHDB, VFCH, UNI_SINCE_Z14, { { 3, 3 }, { 12 }, { 0 } })
DEFINE_MNEMONIC(WFKHDBS, VFCH, UNI_SINCE_Z14, { { 3, 3 }, { 12 }, { 1 } })
DEFINE_MNEMONIC(WFKHEDB, VFCHE, UNI_SINCE_Z14, { { 3, 3 }, { 12 }, { 0 } })
DEFINE_MNEMONIC(WFKHEDBS, VFCHE, UNI_SINCE_Z14, { { 3, 3 }, { 12 }, { 1 } })
DEFINE_MNEMONIC(WFKHESB, VFCHE, UNI_SINCE_Z14, { { 3, 2 }, { 12 }, { 0 } })
DEFINE_MNEMONIC(WFKHESBS, VFCHE, UNI_SINCE_Z14, { { 3, 2 }, { 12 }, { 1 } })
DEFINE_MNEMONIC(WFKHEXB, VFCHE, UNI_SINCE_Z14, { { 3, 4 }, { 12 }, { 0 } })
DEFINE_MNEMONIC(WFKHEXBS, VFCHE, UNI_SINCE_Z14, { { 3, 4 }, { 12 }, { 1 } })
DEFINE_MNEMONIC(WFKHSB, VFCH, UNI_SINCE_Z14, { { 3, 2 }, { 12 }, { 0 } })
DEFINE_MNEMONIC(WFKHSBS, VFCH, UNI_SINCE_Z14, { { 3, 2 }, { 12 }, { 1 } })
DEFINE_MNEMONIC(WFKHXB, VFCH, UNI_SINCE_Z14, { { 3, 4 }, { 12 }, { 0 } })
DEFINE_MNEMONIC(WFKHXBS, VFCH, UNI_SINCE_Z14, { { 3, 4 }, { 12 }, { 1 } })
DEFINE_MNEMONIC(WFKSB, WFK, UNI_SINCE_Z14, { { 2, 2 }, { 0 } })
DEFINE_MNEMONIC(WFKXB, WFK, UNI_SINCE_Z14, { { 2, 4 }, { 0 } })
DEFINE_MNEMONIC(WFLCDB, VFPSO, UNI_SINCE_Z13, { { 2, 3 }, { 8 }, { 0 } })
DEFINE_MNEMONIC(WFLCSB, VFPSO, UNI_SINCE_Z14, { { 2, 2 }, { 8 }, { 0 } })
DEFINE_MNEMONIC(WFLCXB, VFPSO, UNI_SINCE_Z14, { { 2, 4 }, { 8 }, { 0 } })
DEFINE_MNEMONIC(WFLLD, VFLL, UNI_SINCE_Z14, { { 2, 3 }, { 8 } })
DEFINE_MNEMONIC(WFLLS, VFLL, UNI_SINCE_Z14, { { 2, 2 }, { 8 } })
DEFINE_MNEMONIC(WFLNDB, VFPSO, UNI_SINCE_Z13, { { 2, 3 }, { 8 }, { 1 } })
DEFINE_MNEMONIC(WFLNSB, VFPSO, UNI_SINCE_Z14, { { 2, 2 }, { 8 }, { 1 } })
DEFINE_MNEMONIC(WFLNXB, VFPSO, UNI_SINCE_Z14, { { 2, 4 }, { 8 }, { 1 } })
DEFINE_MNEMONIC(WFLPDB, VFPSO, UNI_SINCE_Z13, { { 2, 3 }, { 8 }, { 2 } })
DEFINE_MNEMONIC(WFLPSB, VFPSO, UNI_SINCE_Z14, { { 2, 2 }, { 8 }, { 2 } })
DEFINE_MNEMONIC(WFLPXB, VFPSO, UNI_SINCE_Z14, { { 2, 4 }, { 8 }, { 2 } })
DEFINE_MNEMONIC(WFLRD, VFLR, UNI_SINCE_Z14, { { 2, 3 }, mnemonic_transformation(0, 8, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(WFLRX, VFLR, UNI_SINCE_Z14, { { 2, 4 }, mnemonic_transformation(0, 8, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(WFMADB, VFMA, UNI_SINCE_Z13, { { 4, 8 }, { 3 } })
DEFINE_MNEMONIC(WFMASB, VFMA, UNI_SINCE_Z14, { { 4, 8 }, { 2 } })
DEFINE_MNEMONIC(WFMAXB, VFMA, UNI_SINCE_Z14, { { 4, 8 }, { 4 } })
DEFINE_MNEMONIC(WFMAXDB, VFMAX, UNI_SINCE_Z14, { { 3, 3 }, { 8 } })
DEFINE_MNEMONIC(WFMAXSB, VFMAX, UNI_SINCE_Z14, { { 3, 2 }, { 8 } })
DEFINE_MNEMONIC(WFMAXXB, VFMAX, UNI_SINCE_Z14, { { 3, 4 }, { 8 } })
DEFINE_MNEMONIC(WFMDB, VFM, UNI_SINCE_Z13, { { 3, 3 }, { 8 } })
DEFINE_MNEMONIC(WFMINDB, VFMIN, UNI_SINCE_Z14, { { 3, 3 }, { 8 } })
DEFINE_MNEMONIC(WFMINSB, VFMIN, UNI_SINCE_Z14, { { 3, 2 }, { 8 } })
DEFINE_MNEMONIC(WFMINXB, VFMIN, UNI_SINCE_Z14, { { 3, 4 }, { 8 } })
DEFINE_MNEMONIC(WFMSB, VFM, UNI_SINCE_Z14, { { 3, 2 }, { 8 } })
DEFINE_MNEMONIC(WFMSDB, VFMS, UNI_SINCE_Z13, { { 4, 8 }, { 3 } })
DEFINE_MNEMONIC(WFMSSB, VFMS, UNI_SINCE_Z14, { { 4, 8 }, { 2 } })
DEFINE_MNEMONIC(WFMSXB, VFMS, UNI_SINCE_Z14, { { 4, 8 }, { 4 } })
DEFINE_MNEMONIC(WFMXB, VFM, UNI_SINCE_Z14, { { 3, 4 }, { 8 } })
DEFINE_MNEMONIC(WFNMADB, VFNMA, UNI_SINCE_Z14, { { 4, 8 }, { 3 } })
DEFINE_MNEMONIC(WFNMASB, VFNMA, UNI_SINCE_Z14, { { 4, 8 }, { 2 } })
DEFINE_MNEMONIC(WFNMAXB, VFNMA, UNI_SINCE_Z14, { { 4, 8 }, { 4 } })
DEFINE_MNEMONIC(WFNMSDB, VFNMS, UNI_SINCE_Z14, { { 4, 8 }, { 3 } })
DEFINE_MNEMONIC(WFNMSSB, VFNMS, UNI_SINCE_Z14, { { 4, 8 }, { 2 } })
DEFINE_MNEMONIC(WFNMSXB, VFNMS, UNI_SINCE_Z14, { { 4, 8 }, { 4 } })
DEFINE_MNEMONIC(WFPSODB, VFPSO, UNI_SINCE_Z13, { { 2, 3 }, { 8 } })
DEFINE_MNEMONIC(WFPSOSB, VFPSO, UNI_SINCE_Z14, { { 2, 2 }, { 8 } })
DEFINE_MNEMONIC(WFPSOXB, VFPSO, UNI_SINCE_Z14, { { 2, 4 }, { 8 } })
DEFINE_MNEMONIC(WFSDB, VFS, UNI_SINCE_Z13, { { 2, 3 }, { 8 } })
DEFINE_MNEMONIC(WFSQDB, VFSQ, UNI_SINCE_Z13, { { 2, 3 }, { 8 } })
DEFINE_MNEMONIC(WFSQSB, VFSQ, UNI_SINCE_Z14, { { 2, 2 }, { 8 } })
DEFINE_MNEMONIC(WFSQXB, VFSQ, UNI_SINCE_Z14, { { 2, 4 }, { 8 } })
DEFINE_MNEMONIC(WFSSB, VFS, UNI_SINCE_Z14, { { 2, 2 }, { 8 } })
DEFINE_MNEMONIC(WFSXB, VFS, UNI_SINCE_Z14, { { 2, 4 }, { 8 } })
DEFINE_MNEMONIC(WFTCIDB, VFTCI, UNI_SINCE_Z13, { { 3, 3 }, { 8 } })
DEFINE_MNEMONIC(WFTCISB, VFTCI, UNI_SINCE_Z14, { { 3, 2 }, { 8 } })
DEFINE_MNEMONIC(WFTCIXB, VFTCI, UNI_SINCE_Z14, { { 3, 4 }, { 8 } })
DEFINE_MNEMONIC(WLDEB, VFLL, UNI_SINCE_Z13, { { 2, 2 }, { 8 } })
DEFINE_MNEMONIC(WLEDB, VFLR, UNI_SINCE_Z13, { { 2, 3 }, mnemonic_transformation(0, 8, mnemonic_transformation_kind::or_with, 2, false) })
DEFINE_MNEMONIC(XHHR, RXSBG, UNI_SINCE_Z11, { { 2, 0 }, { 31 } })
DEFINE_MNEMONIC(XHLR, RXSBG, UNI_SINCE_Z11, { { 2, 0 }, { 31 }, { 32 } })
DEFINE_MNEMONIC(XLHR, RXSBG, UNI_SINCE_Z11, { { 2, 32 }, { 63 }, { 32 } })

DEFINE_ASM_INSTRUCTION("*PROCESS", 1, -1, false, "") // TO DO
DEFINE_ASM_INSTRUCTION("ACONTROL", 1, -1, false, "<selection>+")
DEFINE_ASM_INSTRUCTION("ADATA", 5, 5, false, "value1,value2,value3,value4,character_string")
DEFINE_ASM_INSTRUCTION("AINSERT", 2, 2, false, "'record',BACK|FRONT")
DEFINE_ASM_INSTRUCTION("ALIAS", 1, 1, false, "alias_string")
DEFINE_ASM_INSTRUCTION("AMODE", 1, 1, false, "amode_option")
DEFINE_ASM_INSTRUCTION("CATTR", 1, -1, false, "attribute+")
DEFINE_ASM_INSTRUCTION("CCW", 4, 4, true, "command_code,data_address,flags,data_count")
DEFINE_ASM_INSTRUCTION("CCW0", 4, 4, true, "command_code,data_address,flags,data_count")
DEFINE_ASM_INSTRUCTION("CCW1", 4, 4, true, "command_code,data_address,flags,data_count")
DEFINE_ASM_INSTRUCTION("CEJECT", 0, 1, true, "?number_of_lines")
DEFINE_ASM_INSTRUCTION("CNOP", 2, 2, true, "byte,boundary")
DEFINE_ASM_INSTRUCTION("COM", 0, 0, false, "")
DEFINE_ASM_INSTRUCTION("COPY", 1, 1, false, "member")
DEFINE_ASM_INSTRUCTION("CSECT", 0, 0, false, "")
DEFINE_ASM_INSTRUCTION("CXD", 0, 0, false, "")
DEFINE_ASM_INSTRUCTION("DC", 1, -1, true, "<operand>+")
DEFINE_ASM_INSTRUCTION("DROP", 0, -1, true, "?<<base_register|label>+>", true)
DEFINE_ASM_INSTRUCTION("DS", 1, -1, true, "<operand>+")
DEFINE_ASM_INSTRUCTION("DSECT", 0, 0, false, "")
DEFINE_ASM_INSTRUCTION("DXD", 1, -1, true, "<operand>+")
DEFINE_ASM_INSTRUCTION("EJECT", 0, 0, false, "")
DEFINE_ASM_INSTRUCTION("END", 0, 2, true, "?expression,?language")
DEFINE_ASM_INSTRUCTION("ENTRY", 1, -1, true, "entry_point+")
DEFINE_ASM_INSTRUCTION("EQU", 1, 5, true, "value,?<length_attribute_value>,?<type_attribute_value>,?<program_type_value>,?<assembler_type_value>")
DEFINE_ASM_INSTRUCTION("EXITCTL", 2, 5, false, "exit_type,control_value+")
DEFINE_ASM_INSTRUCTION("EXTRN", 1, -1, false, "<external_symbol>+|PART(<external_symbol>+")
DEFINE_ASM_INSTRUCTION("ICTL", 1, 3, false, "begin,?<end>,?<continue>")
DEFINE_ASM_INSTRUCTION("ISEQ", 0, 2, false, "?<left,right>")
DEFINE_ASM_INSTRUCTION("LOCTR", 0, 0, false, "")
DEFINE_ASM_INSTRUCTION("LTORG", 0, 0, false, "")
DEFINE_ASM_INSTRUCTION("MNOTE", 1, 2, false, "?<<severity|*|>,>message")
DEFINE_ASM_INSTRUCTION("OPSYN", 0, 1, false, "?operation_code_2")
DEFINE_ASM_INSTRUCTION("ORG", 0, 3, true, "expression?<,boundary?<,offset>>")
DEFINE_ASM_INSTRUCTION("POP", 1, 4, false, "<PRINT|USING|ACONTROL>+,?NOPRINT")
DEFINE_ASM_INSTRUCTION("PRINT", 1, -1, false, "operand+")
DEFINE_ASM_INSTRUCTION("PUNCH", 1, 1, false, "string")
DEFINE_ASM_INSTRUCTION("PUSH", 1, 4, false, "<PRINT|USING|ACONTROL>+,?NOPRINT")
DEFINE_ASM_INSTRUCTION("REPRO", 0, 0, false, "")
DEFINE_ASM_INSTRUCTION("RMODE", 1, 1, false, "rmode_option")
DEFINE_ASM_INSTRUCTION("RSECT", 0, 0, false, "")
DEFINE_ASM_INSTRUCTION("SPACE", 0, 1, true, "?number_of_lines")
DEFINE_ASM_INSTRUCTION("START", 0, 1, true, "?expression")
DEFINE_ASM_INSTRUCTION("TITLE", 1, 1, false, "title_string")
DEFINE_ASM_INSTRUCTION("USING", 2, 17, true, "operand+", true)
DEFINE_ASM_INSTRUCTION("WXTRN", 1, -1, false, "<external_symbol>+|PART(<external_symbol>+")
DEFINE_ASM_INSTRUCTION("XATTR", 1, -1, false, "attribute+")

// clang-format on
