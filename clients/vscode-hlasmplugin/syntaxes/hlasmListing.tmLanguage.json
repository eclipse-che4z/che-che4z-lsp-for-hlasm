{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "IBM HLASM Listing",
  "scopeName": "source.hlasmListing",
  "patterns": [
    {
      "begin": "  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement",
      "end": "                                                 Relocation Dictionary",
      "patterns": [ {"include": "#lines_to_ignore"}, {"include" : "#listing_syntax_long"}]
    },
    {
      "begin": "  Loc  Object Code    Addr1 Addr2  Stmt   Source Statement",
      "end": "                                                 Relocation Dictionary",
      "patterns": [ {"include": "#lines_to_ignore"}, {"include" : "#listing_syntax"}]
    },
    {
      "begin": "(.)  Loc    Object Code      Addr1    Addr2    Stmt  Source Statement",
      "end": "(1.{8})                                         Relocation Dictionary",
      "patterns": [ {"include": "#lines_to_ignore_endevor"}, {"include" : "#listing_syntax_endevor_long"}]
    },
    {
      "begin": "(.)  Loc  Object Code    Addr1 Addr2  Stmt   Source Statement",
      "end": "(1.{8})                                         Relocation Dictionary",
      "patterns": [ {"include": "#lines_to_ignore_endevor"}, {"include" : "#listing_syntax_endevor"}]
    }
  ],
  "repository": {
    "listing_syntax":{
      "match": "^(.{7})(.{9})(.{22})(\\d\\d|.\\d|.[+]|.{2})(.{71,72}).*$",
      "captures":
      {
        
        "2":{"patterns": [ {"include": "#param_syntax"}]},
        "5":{"patterns" :[ {"include": "#hlasm_syntax"}]}
      }
    },
    "listing_syntax_long":{
      "match": "^(.{9})(.{9})(.{29})(\\d\\d|.\\d|.[+]|.{2})(.{71,72}).*$",
      "captures":
      {
        "2":{"patterns": [ {"include": "#param_syntax"}]},
        "5":{"patterns" :[ {"include": "#hlasm_syntax"}]}
      }
    },
    "listing_syntax_endevor":{
      "match": "^(.{8})(.{9})(.{22})(\\d\\d|.\\d|.[+]|.{2})(.{71,72}).*$",
      "captures":
      {
        "2":{"patterns": [ {"include": "#param_syntax"}]},
        "5":{"patterns" :[ {"include": "#hlasm_syntax"}]}
      }
    },
    "listing_syntax_endevor_long":{
      "match": "^(.{10})(.{9})(.{29})(\\d\\d|.\\d|.[+]|.{2})(.{71,72}).*$",
      "captures":
      {
        "2":{"patterns": [ {"include": "#param_syntax"}]},
        "5":{"patterns" :[ {"include": "#hlasm_syntax"}]}
      }
    },
    "lines_to_ignore":{
      "match": "^  Active|^  Loc|^D-Loc  |^ {111}Page",
      "name": "placeholder_f8Gc"
    },
    "lines_to_ignore_endevor":{
      "match": "^(.)  Active|^(.)  Loc|^(.)D-Loc  |^(.) {111}Page",
      "name": "placeholder_f8Gc"
    },
    "hlasm_syntax": {
      "patterns": [
        {
          "include": "#lineTooLong"
        },
        {
          "include": "#multi_lineComment"
        },
        {
          "include": "#lineComment"
        },
        {
          "include": "#parseLine"
        },
        {
          "include": "#asmArgumentLine"
        },
        {
          "include": "#asmLineStart"
        },
        {
          "include": "#foldPage"
        }
      ]
    },
    "param_syntax": {
      "patterns": [
        {
          "include": "#objectCode"
        }
      ]
    },
    "additionalAsmHighlight": {
      "patterns": [
        {
          "include": "#labels"
        },
        {
          "include": "#asmSpecialStatements"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#numbers"
        }
      ]
    },
    "objectCode" : {
      "patterns": [
        {
          "match": "((\\h\\h)(\\h\\h)( {1})(.{4}))",
          "captures": {
            "2":{ "name": "entity.name.function.hlasm"},
            "3":{ "name": "constant.numeric.hlasm"},
            "5":{ "patterns": [ {"include": "#objectCodeCont"}]}
        }}
      ]
    },
    "objectCodeCont" : {
      "patterns": [
        {
          "name" : "constant.numeric.hlasm",
          "match": "((\\h\\h)(\\h\\h))"
          
        }
      ]
    },
    "lineTooLong": {
      "patterns": [
        {
          "name": "invalid.illegal.hlasm",
          "match": ".{81,}"
        }
      ]
    },
    "lineComment": {
      "patterns": [
        {
          "begin": "\\*.{72,73}X",
          "end": ""
        },
        {
          "name": "comment.hlasm",
          "match": "(\\*.{72,73})(.*)",
          "captures": {
            "1": {
              "name": "comment.hlasm"
            },
            "2": {
              "patterns": [
                {
                  "match": "\\s(.{0,8})",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "include": "#sequenceNumbers"
                        }
                      ]
                    }
                  }
                },
                {
                  "match": "([^\\s])(.{0,8})",
                  "captures": {
                    "1": {
                      "name": "invalid.illegal.hlasm"
                    },
                    "2": {
                      "patterns": [
                        {
                          "include": "#sequenceNumbers"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "name": "comment.hlasm",
          "match": "\\*.*"
        }
      ]
    },
    "parseLine": {
      "patterns": [
        {
          "match": "(.{72,73})",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#asmArgumentLine"
                },
                {
                  "include": "#asmLineStart"
                }
              ]
            }
          }
        },
        {
          "match": "(.{72,73})(\\s?)(.{0,8})$",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#asmArgumentLine"
                },
                {
                  "include": "#asmLineStart"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#sequenceNumbers"
                }
              ]
            }
          }
        }
      ]
    },
    "asmLineStart": {
      "patterns": [
        {
          "match": "([^*]\\S*)?\\s+(.*)$",
          "captures": {
            "1": {
              "name": "support.class.hlasm"
            },
            "2": {
              "patterns": [
                {
                  "include": "#asmInstruction"
                }
              ]
            }
          }
        }
      ]
    },
    "asmInstruction": {
      "patterns": [
        {
          "match": "(\\S+)\\s*(.*)",
          "captures": {
            "1": {
              "name": "entity.name.function.hlasm"
            },
            "2": {
              "patterns": [
                {
                  "include": "#asmArguments"
                }
              ]
            }
          }
        }
      ]
    },
    "asmArgumentLine": {
      "patterns": [
        {
          "match": "\\s+(\\S+=.*)$",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#asmArguments"
                }
              ]
            }
          }
        }
      ]
    },
    "asmArguments": {
      "patterns": [
        {
          "include": "#stringType"
        },
        {
          "include": "#quoteType"
        },
        {
          "match": "(\\S*)(.*)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.hlasm",
              "patterns": [
                {
                  "include": "#additionalAsmHighlight"
                }
              ]
            },
            "2": {
              "name": "comment.hlasm"
            }
          }
        },
        {
          "match": "\\s.*",
          "name": "comment.hlasm"
        }
      ]
    },
    "stringType": {
      "patterns": [
        {
          "match": "(\\S*?)('.*?')(.*)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.hlasm",
              "patterns": [
                {
                  "include": "#additionalAsmHighlight"
                }
              ]
            },
            "2": {
              "name": "string.hlasm"
            },
            "3": {
              "patterns": [
                {
                  "include": "#asmArguments"
                }
              ]
            }
          }
        }
      ]
    },
    "quoteType": {
      "patterns": [
        {
          "match": "(\\S*?)([LKNT]')(.*)",
          "captures": {
            "1": {
              "name": "keyword.control.hlasm",
              "patterns": [
                {
                  "include": "#additionalAsmHighlight"
                }
              ]
            },
            "2": {
              "name": "support.type.hlasm"
            },
            "3": {
              "patterns": [
                {
                  "include": "#asmArguments"
                }
              ]
            }
          }
        }
      ]
    },
    "labels": {
      "match": "[*]",
      "name": "support.class.hlasm"
    },
    "operators": {
      "match": "[=(),+]",
      "name": "keyword.operator.hlasm"
    },
    "numbers": {
      "match": "(?<=[=(),*\\s+])-?\\d*(?=[=(),*+\\s]|$)",
      "name": "constant.numeric.hlasm"
    },
    "asmSpecialStatements": {
      "match": "(?<=[=(),*+\\s])=?\\d*(A|B|C|D|E|F|G|H|P|V|X|Z)(L\\d*)?(?=[=(),*\\s+]|$)",
      "name": "support.type.hlasm"
    },
    "sequenceNumbers": {
      "name": "constant.numeric.hlasm",
      "match": ".*"
    }
  }
} 
